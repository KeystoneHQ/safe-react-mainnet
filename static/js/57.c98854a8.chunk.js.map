{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/ReviewCustomTx/style.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/ReviewCustomTx/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/layout/Bold/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx"],"names":["styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","secondaryText","marginRight","marginLeft","headingText","fontSize","closeIcon","height","width","container","value","sm","outerData","borderRadius","border","minHeight","data","wordBreak","overflow","fontFamily","fontStretch","lineHeight","buttonRow","gap","gasCostsContainer","backgroundColor","background","useStyles","makeStyles","nativeCoin","getNetworkInfo","ReviewCustomTx","onClose","onPrev","tx","classes","dispatch","useDispatch","safeAddress","useSelector","safeAddressFromUrl","useEstimateTransactionGas","txRecipient","contractAddress","txData","trim","txAmount","toTokenUnit","decimals","gasLimit","gasEstimation","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isCreation","isOffChainSignature","useEstimationStatus","buttonStatus","EditableTxParameters","ethGasLimit","ethGasPrice","safeTxGas","toString","txParameters","toggleEditMode","Row","align","className","grow","Paragraph","noMargin","weight","IconButton","disableRipple","onClick","Hairline","Block","SafeInfo","Divider","withArrow","margin","size","style","Col","xs","hash","name","contractName","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","Img","alt","onError","setImageToPlaceholder","src","getEthAsToken","logoUri","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","LOADING","Modal","Footer","withoutBorder","ButtonStatus","Buttons","cancelButtonProps","text","confirmButtonProps","txValue","createTransaction","to","valueInWei","txNonce","safeNonce","Number","undefined","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","console","error","submitTx","status","testId","event","img","currentTarget","test","TokenPlaceholder","Bold","this","props","children","React","Wrapper","styled","div","StyledDivider","DividerSRC","type","StyledBlock","currentSafeWithNames","address","ethBalance","safeName","data-testid","symbol"],"mappings":"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","file":"static/js/57.c98854a8.chunk.js","sourcesContent":["import { background, border, lg, md, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'flex-start',\n    boxSizing: 'border-box',\n    maxHeight: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: secondaryText,\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  headingText: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  value: {\n    marginLeft: sm,\n  },\n  outerData: {\n    borderRadius: '5px',\n    border: `1px solid ${border}`,\n    padding: '11px',\n    minHeight: '21px',\n  },\n  data: {\n    wordBreak: 'break-all',\n    overflow: 'auto',\n    fontSize: '14px',\n    fontFamily: 'Averta',\n    maxHeight: '100px',\n    letterSpacing: 'normal',\n    fontStretch: 'normal',\n    lineHeight: '1.43',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  gasCostsContainer: {\n    backgroundColor: background,\n    padding: `${sm} ${lg}`,\n  },\n})\n","import React, { ReactElement } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\n\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport Divider from 'src/components/Divider'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { safeAddressFromUrl } from 'src/logic/safe/store/selectors'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { getEthAsToken } from 'src/logic/tokens/utils/tokenHelpers'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { useEstimateTransactionGas, EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { TransactionFees } from 'src/components/TransactionsFees'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\n\nimport { styles } from './style'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\n\nexport type ReviewCustomTxProps = {\n  contractAddress: string\n  contractName?: string\n  data: string\n  value: string\n}\n\ntype Props = {\n  onClose: () => void\n  onPrev: () => void\n  tx: ReviewCustomTxProps\n}\n\nconst useStyles = makeStyles(styles)\n\nconst { nativeCoin } = getNetworkInfo()\n\nconst ReviewCustomTx = ({ onClose, onPrev, tx }: Props): ReactElement => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const safeAddress = useSelector(safeAddressFromUrl)\n\n  const {\n    gasLimit,\n    gasEstimation,\n    gasPriceFormatted,\n    gasCostFormatted,\n    txEstimationExecutionStatus,\n    isExecution,\n    isCreation,\n    isOffChainSignature,\n  } = useEstimateTransactionGas({\n    txRecipient: tx.contractAddress as string,\n    txData: tx.data ? tx.data.trim() : '',\n    txAmount: tx.value ? toTokenUnit(tx.value, nativeCoin.decimals) : '0',\n  })\n\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\n\n  const submitTx = (txParameters: TxParameters) => {\n    const txRecipient = tx.contractAddress\n    const txData = tx.data ? tx.data.trim() : ''\n    const txValue = tx.value ? toTokenUnit(tx.value, nativeCoin.decimals) : '0'\n\n    if (safeAddress) {\n      dispatch(\n        createTransaction({\n          safeAddress: safeAddress,\n          to: txRecipient as string,\n          valueInWei: txValue,\n          txData,\n          txNonce: txParameters.safeNonce,\n          safeTxGas: txParameters.safeTxGas ? Number(txParameters.safeTxGas) : undefined,\n          ethParameters: txParameters,\n          notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\n        }),\n      )\n    } else {\n      console.error('There was an error trying to submit the transaction, the safeAddress was not found')\n    }\n    onClose()\n  }\n\n  return (\n    <EditableTxParameters\n      isOffChainSignature={isOffChainSignature}\n      isExecution={isExecution}\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      safeTxGas={gasEstimation.toString()}\n    >\n      {(txParameters, toggleEditMode) => (\n        <>\n          <Row align=\"center\" className={classes.heading} grow>\n            <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\n              Contract interaction\n            </Paragraph>\n            <Paragraph className={classes.annotation}>2 of 2</Paragraph>\n            <IconButton disableRipple onClick={onClose}>\n              <Close className={classes.closeIcon} />\n            </IconButton>\n          </Row>\n          <Hairline />\n          <Block className={classes.container}>\n            <SafeInfo />\n            <Divider withArrow />\n            <Row margin=\"xs\">\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                Recipient\n              </Paragraph>\n            </Row>\n\n            <Row align=\"center\" margin=\"md\">\n              <Col xs={12}>\n                <EthHashInfo\n                  hash={tx.contractAddress as string}\n                  name={tx.contractName ?? ''}\n                  showAvatar\n                  showCopyBtn\n                  explorerUrl={getExplorerInfo(tx.contractAddress as string)}\n                />\n              </Col>\n            </Row>\n            <Row margin=\"xs\">\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                Value\n              </Paragraph>\n            </Row>\n            <Row align=\"center\" margin=\"md\">\n              <Img alt=\"Ether\" height={28} onError={setImageToPlaceholder} src={getEthAsToken('0').logoUri || ''} />\n              <Paragraph className={classes.value} noMargin size=\"md\">\n                {tx.value || 0}\n                {' ' + nativeCoin.name}\n              </Paragraph>\n            </Row>\n            <Row margin=\"xs\">\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                Data (hex encoded)\n              </Paragraph>\n            </Row>\n            <Row align=\"center\" margin=\"md\">\n              <Col className={classes.outerData}>\n                <Row className={classes.data} size=\"md\">\n                  {tx.data}\n                </Row>\n              </Col>\n            </Row>\n\n            {/* Tx Parameters */}\n            <TxParametersDetail\n              txParameters={txParameters}\n              onEdit={toggleEditMode}\n              isTransactionCreation={isCreation}\n              isTransactionExecution={isExecution}\n              isOffChainSignature={isOffChainSignature}\n            />\n          </Block>\n          {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\n            <Block className={classes.gasCostsContainer}>\n              <TransactionFees\n                gasCostFormatted={gasCostFormatted}\n                isExecution={isExecution}\n                isCreation={isCreation}\n                isOffChainSignature={isOffChainSignature}\n                txEstimationExecutionStatus={txEstimationExecutionStatus}\n              />\n            </Block>\n          )}\n          <Modal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\n              confirmButtonProps={{\n                onClick: () => submitTx(txParameters),\n                status: buttonStatus,\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\n                testId: 'submit-tx-btn',\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n\nexport default ReviewCustomTx\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render() {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import React, { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\n\nconst { nativeCoin } = getNetworkInfo()\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n\n  return (\n    <>\n      <EthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n"],"sourceRoot":""}