{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ReviewSendFundsTx/style.ts","routes/safe/components/Balances/SendModal/screens/ReviewSendFundsTx/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/layout/Bold/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","logic/tokens/store/actions/fetchTokens.ts"],"names":["styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","secondaryText","marginRight","marginLeft","headingText","fontSize","closeIcon","height","width","container","amount","sm","buttonRow","gap","gasCostsContainer","backgroundColor","background","useStyles","makeStyles","nativeCoin","getNetworkInfo","ReviewSendFundsTx","onClose","onPrev","tx","classes","dispatch","useDispatch","safeAddress","useSelector","safeAddressFromUrl","tokens","extendedSafeTokensSelector","txToken","useMemo","find","token","sameAddress","address","isSendingNativeToken","txRecipient","recipientAddress","txValue","toTokenUnit","decimals","data","txAmount","useState","setData","useEffect","a","txData","EMPTY_DATA","ERC20TokenInstance","getERC20TokenContract","erc20TransferAmount","methods","transfer","encodeABI","updateTxDataAsync","useTxData","manualSafeTxGas","setManualSafeTxGas","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","useEstimateTransactionGas","txType","safeTxGas","gasCostFormatted","gasPriceFormatted","gasLimit","gasEstimation","txEstimationExecutionStatus","isExecution","isCreation","isOffChainSignature","useEstimationStatus","buttonStatus","setButtonStatus","isSpendingLimit","sameString","submitTx","txParameters","ButtonStatus","LOADING","READY","logError","Errors","_802","tokenSpendingLimit","spendingLimitTokenAddress","ZERO_ADDRESS","spendingLimit","getSpendingLimitContract","executeAllowanceTransfer","delegate","send","from","on","_801","message","createTransaction","to","valueInWei","txNonce","safeNonce","Number","undefined","ethParameters","notifiedTransaction","TX_NOTIFICATION_TYPES","STANDARD_TX","EditableTxParameters","ethGasLimit","ethGasPrice","toString","closeEditModalCallback","oldGasPrice","newGasPrice","oldSafeTxGas","newSafeTxGas","toggleEditMode","Row","align","className","grow","data-testid","Paragraph","noMargin","weight","IconButton","disableRipple","onClick","Hairline","Block","SafeInfo","Divider","withArrow","margin","size","style","Col","xs","hash","name","recipientName","showCopyBtn","showAvatar","explorerUrl","getExplorerInfo","Img","alt","onError","setImageToPlaceholder","src","logoUri","symbol","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","Modal","Footer","withoutBorder","Buttons","cancelButtonProps","text","confirmButtonProps","status","testId","event","img","currentTarget","test","TokenPlaceholder","Bold","this","props","children","React","Wrapper","styled","div","StyledDivider","DividerSRC","type","StyledBlock","border","currentSafeWithNames","ethBalance","safeName","memoize","tokenAddress","getWeb3","eth","Contract","ERC20Contract","abi","getERC721TokenContract","ERC721Contract","fetchTokens","getState","currentSavedTokens","tokensSelector","fetchErc20AndErc721AssetsList","resp","tokenList","results","_600","erc20Tokens","filter","toLowerCase","length","List","map","makeToken","addTokens"],"mappings":"4cAGaA,EAASC,YAAa,CACjCC,QAAS,CACPC,QAAQ,GAAD,OAAKC,KAAL,YAAWC,MAClBC,eAAgB,aAChBC,UAAW,aACXC,UAAW,QAEbC,WAAY,CACVC,cAAe,OACfC,MAAOC,gBACPC,YAAa,OACbC,WAAY,QAEdC,YAAa,CACXC,SAAUX,MAEZY,UAAW,CACTC,OAAQ,OACRC,MAAO,QAETC,UAAW,CACTjB,QAAQ,GAAD,OAAKC,KAAL,YAAWC,OAEpBgB,OAAQ,CACNP,WAAYQ,MAEdC,UAAW,CACTL,OAAQ,OACRZ,eAAgB,SAChBkB,IAAK,QAEPC,kBAAmB,CACjBC,gBAAiBC,aACjBxB,QAAQ,KAAD,OAAOE,S,4BCKZuB,EAAYC,YAAW7B,GAErB8B,EAAeC,cAAfD,WAoQOE,UArNW,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,QAASC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,GACtCC,EAAUR,IACVS,EAAWC,cACXC,EAAcC,YAAYC,KAC1BC,EAAcF,YAAYG,KAC1BC,EAAUC,mBAAQ,kBAAMH,EAAOI,MAAK,SAACC,GAAD,OAAWC,YAAYD,EAAME,QAASd,EAAGY,YAAS,CAACL,EAAQP,EAAGY,QAClGG,EAAuBL,mBAAQ,kBAAMG,YAAW,OAACJ,QAAD,IAACA,OAAD,EAACA,EAASK,QAASnB,EAAWmB,WAAU,CAACL,IACzFO,EAAcD,EAAuBf,EAAGiB,kBAA0B,OAAPR,QAAO,IAAPA,OAAA,EAAAA,EAASK,UAAW,GAC/EI,EAAUH,EAAuBI,YAAYnB,EAAGd,OAAQS,EAAWyB,UAAY,IAC/EC,EAtCU,SAChBN,EACAO,EACAL,EACAR,GACY,IAAD,EACac,mBAAS,IADtB,mBACJF,EADI,KACEG,EADF,KAqBX,OAlBAC,qBAAU,YACe,uCAAG,gCAAAC,EAAA,yDACnBjB,EADmB,iDAKpBkB,EAASC,IACRb,IACGc,EAAqBC,YAAsBrB,EAAQK,SACnDiB,EAAsBZ,YAAYG,EAAUb,EAAQW,UAC1DO,EAASE,EAAmBG,QAAQC,SAAShB,EAAkBc,GAAqBG,aAEtFV,EAAQG,GAXgB,2CAAH,oDAcvBQ,KACC,CAACpB,EAAsBE,EAAkBK,EAAUb,IAE/CY,EAYMe,CAAUrB,EAAsBf,EAAGd,OAAQc,EAAGiB,iBAAkBR,GATW,EAU1Cc,mBAAS,GAViC,mBAUjFc,EAViF,KAUhEC,GAVgE,QAW5Cf,qBAX4C,qBAWjFgB,GAXiF,MAWjEC,GAXiE,SAY5CjB,qBAZ4C,qBAYjFkB,GAZiF,MAYjEC,GAZiE,SAuBpFC,YAA0B,CAC5BhB,OAAQN,EACRL,cACA4B,OAAQ5C,EAAG4C,OACXtB,SAAUJ,EACV2B,UAAWR,EACXE,kBACAE,oBAfAK,GAfsF,GAetFA,iBACAC,GAhBsF,GAgBtFA,kBACAC,GAjBsF,GAiBtFA,SACAC,GAlBsF,GAkBtFA,cACAC,GAnBsF,GAmBtFA,4BACAC,GApBsF,GAoBtFA,YACAC,GArBsF,GAqBtFA,WACAC,GAtBsF,GAsBtFA,oBAtBsF,GAiChDC,YAAoBJ,IAjC4B,qBAiCjFK,GAjCiF,MAiCnEC,GAjCmE,MAkClFC,GAAkBC,YAAW1D,EAAG4C,OAAQ,iBAExCe,GAAQ,uCAAG,WAAOC,GAAP,iBAAAlC,EAAA,yDACf8B,GAAgBK,IAAaC,SAExB1D,EAHU,uBAIboD,GAAgBK,IAAaE,OAC7BC,YAASC,IAAOC,MALH,+BASXT,IAAmBhD,GAAWT,EAAGmE,oBATtB,wBAUPC,EAA4BrD,EAAuBsD,IAAe5D,EAAQK,QAC1EwD,EAAgBC,cAXT,mBAaLD,EAActC,QACjBwC,yBACCpE,EACAgE,EACApE,EAAGiB,iBACHE,YAAYnB,EAAGd,OAAQuB,EAAQW,UAC/BiD,IACA,EACArE,EAAGmE,mBAAmBM,SACtB7C,KAED8C,KAAK,CAAEC,KAAM3E,EAAGmE,mBAAmBM,WACnCG,GAAG,mBAAmB,kBAAM9E,OAzBpB,0DA2BX0D,GAAgBK,IAAaE,OAC7BC,YAASC,IAAOY,KAAM,KAAIC,SA5Bf,0CAiCf5E,EACE6E,YAAkB,CAChB3E,YAAaA,EACb4E,GAAIhE,EACJiE,WAAY/D,EACZS,OAAQN,EACR6D,QAAStB,EAAauB,UACtBtC,UAAWe,EAAaf,UAAYuC,OAAOxB,EAAaf,gBAAawC,EACrEC,cAAe1B,EACf2B,oBAAqBC,IAAsBC,eAG/C3F,IA7Ce,0DAAH,sDAmEd,OACE,kBAAC4F,EAAA,EAAD,CACErC,oBAAqBA,GACrBF,YAAaA,GACbwC,YAAa3C,GACb4C,YAAa7C,GACbF,UAAWI,GAAc4C,WACzBC,uBA1B2B,SAAClC,GAC9B,IAAMmC,EAAcX,OAAOrC,IACrBiD,EAAcZ,OAAOxB,EAAagC,aAClCK,EAAeb,OAAOnC,IACtBiD,EAAed,OAAOxB,EAAaf,WAErCmD,GAAeD,IAAgBC,GACjCxD,GAAkBoB,EAAagC,aAG7BhC,EAAa+B,aAAe3C,KAAaY,EAAa+B,aACxDjD,GAAkBkB,EAAa+B,aAG7BO,GAAgBD,IAAiBC,GACnC5D,GAAmB4D,MAalB,SAACtC,EAAcuC,GAAf,OACC,oCAEE,kBAACC,EAAA,EAAD,CAAKC,MAAM,SAASC,UAAWrG,EAAQlC,QAASwI,MAAI,EAACC,cAAY,0BAC/D,kBAACC,EAAA,EAAD,CAAWH,UAAWrG,EAAQrB,YAAa8H,UAAQ,EAACC,OAAO,UAA3D,cAGA,kBAACF,EAAA,EAAD,CAAWH,UAAWrG,EAAQ3B,YAA9B,UACA,kBAACsI,EAAA,EAAD,CAAYC,eAAa,EAACC,QAAShH,GACjC,kBAAC,IAAD,CAAOwG,UAAWrG,EAAQnB,cAI9B,kBAACiI,EAAA,EAAD,MAEA,kBAACC,EAAA,EAAD,CAAOV,UAAWrG,EAAQhB,WAExB,kBAACgI,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAASC,WAAS,IAGlB,kBAACf,EAAA,EAAD,CAAKgB,OAAO,MACV,kBAACX,EAAA,EAAD,CAAWjI,MAAM,WAAWkI,UAAQ,EAACW,KAAK,KAAKC,MAAO,CAAE/I,cAAe,WAAvE,cAIF,kBAAC6H,EAAA,EAAD,CAAKC,MAAM,SAASe,OAAO,KAAKZ,cAAY,yBAC1C,kBAACe,EAAA,EAAD,CAAKC,GAAI,IACP,kBAAC,cAAD,CACEC,KAAMzH,EAAGiB,iBACTyG,KAAM1H,EAAG2H,cACTC,aAAW,EACXC,YAAU,EACVC,YAAaC,YAAgB/H,EAAGiB,sBAMtC,kBAACmF,EAAA,EAAD,CAAKgB,OAAO,MACV,kBAACX,EAAA,EAAD,CAAWjI,MAAM,WAAWkI,UAAQ,EAACW,KAAK,KAAKC,MAAO,CAAE/I,cAAe,WAAvE,WAIF,kBAAC6H,EAAA,EAAD,CAAKC,MAAM,SAASe,OAAO,MACzB,kBAACY,EAAA,EAAD,CAAKC,IAAG,OAAExH,QAAF,IAAEA,OAAF,EAAEA,EAASiH,KAAgB3I,OAAQ,GAAImJ,QAASC,IAAuBC,IAAG,OAAE3H,QAAF,IAAEA,OAAF,EAAEA,EAAS4H,UAC7F,kBAAC5B,EAAA,EAAD,CACEH,UAAWrG,EAAQf,OACnBwH,UAAQ,EACRW,KAAK,KACLb,cAAA,wBAAuB/F,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAS6H,OAAhC,iBAECtI,EAAGd,OANN,WAMeuB,QANf,IAMeA,OANf,EAMeA,EAAS6H,UAMxB7E,IACA,kBAAC8E,EAAA,EAAD,CACE3E,aAAcA,EACd4E,OAAQrC,EACRsC,sBAAuBrF,GACvBsF,uBAAwBvF,GACxBE,oBAAqBA,OAOzBI,IAAmBP,KAAgCyF,IAAiB7E,SACpE,yBAAKwC,UAAWrG,EAAQX,mBACtB,kBAAC,IAAD,CACEwD,iBAAkBA,GAClBK,YAAaA,GACbC,WAAYA,GACZC,oBAAqBA,GACrBH,4BAA6BA,MAMnC,kBAAC0F,EAAA,EAAMC,OAAP,CAAcC,eAAgBrF,IAAmBF,KAAiBM,IAAaC,SAC7E,kBAAC8E,EAAA,EAAMC,OAAOE,QAAd,CACEC,kBAAmB,CAAElC,QAAS/G,EAAQkJ,KAAM,QAC5CC,mBAAoB,CAClBpC,QAAS,kBAAMnD,GAASC,IACxBuF,OAAQ5F,GACR0F,KAAM/F,KAAgCyF,IAAiB7E,QAAU,kBAAeuB,EAChF+D,OAAQ,0B,kFCjSXjB,EAAwB,SAACkB,GACpC,IAAMC,EAAMD,EAAME,cACb,oBAAoBC,KAAKF,EAAIlB,OAChCkB,EAAIlB,IAAMqB,M,yFCLRC,E,4JACJ,WAAU,IAAD,EACwBC,KAAKC,MAA5BC,EADD,EACCA,SAAaD,EADd,4BAGP,OAAO,oBAAOA,EAAQC,O,GAJPC,iBAQJJ,O,kCCVA,QAA0B,+C,kFCInCK,EAAUC,UAAOC,IAAV,mIASPC,EAAgBF,kBAAOG,UAAPH,CAAH,4CAeJ9C,IAPC,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACd,kBAAC4C,EAAD,KACG5C,GAAa,kBAAC,OAAD,CAAMiD,KAAK,YAAY/C,KAAK,OAC1C,kBAAC6C,EAAD,S,2ICZIvK,EAAeC,cAAfD,WAEF0K,EAAcL,kBAAOhD,IAAPgD,CAAH,wOAIKM,SAGN9C,MA4BDP,IAvBE,WAA2B,IAAD,EACoB5G,YAAYkK,KAAxDnK,EADwB,EACjCU,QAAsB0J,EADW,EACXA,WAAkBC,EADP,EACC/C,KAE1C,OACE,oCACE,kBAAC,cAAD,CACED,KAAMrH,EACNsH,KAAM+C,EACN3C,YAAaC,YAAgB3H,GAC7ByH,YAAU,EACVD,aAAW,IAEZ4C,GACC,kBAACH,EAAD,KACE,kBAAC,IAAD,CAAW3D,UAAQ,GAAnB,YACW,kBAAC,IAAD,CAAMF,cAAY,uBAAlB,UAA4CgE,EAA5C,YAA0D7K,EAAW2I,c,sQCZ7ExG,EAAwB4I,KAVJ,SAACC,GAEhC,OAAO,IADMC,cACGC,IAAIC,UAASC,EAAcC,IAAkBL,MAUlDM,EAAyBP,KAPJ,SAACC,GAEjC,OAAO,IADMC,cACGC,IAAIC,UAASI,EAAeF,IAAkBL,MAcnDQ,EACX,yDACA,WACEjL,EACAkL,GAFF,uBAAA1J,EAAA,6DAIQ2J,EAAqBC,YAAeF,KAJ5C,kBAQuBG,cARvB,OAQUC,EARV,OASIC,EAAYD,EAAKnK,KAAKqK,QAT1B,uDAWI1H,YAASC,IAAO0H,KAAM,KAAE7G,SAX5B,8BAeQ8G,EAAcH,EAAUI,QAAO,SAACjL,GAAD,MAAwC,UAA7BA,EAAMwJ,KAAK0B,kBAErC,OAAlBT,QAAkB,IAAlBA,OAAA,EAAAA,EAAoBhE,QAASuE,EAAYG,OAjB/C,mDAqBQxL,EAASyL,YAAKJ,EAAYK,KAAI,SAACrL,GAAD,OAAWsL,YAAUtL,OAEzDV,EAASiM,YAAU5L,IAvBrB,yDADA","file":"static/js/52.d4da9da6.chunk.js","sourcesContent":["import { background, lg, md, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'flex-start',\n    boxSizing: 'border-box',\n    maxHeight: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: secondaryText,\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  headingText: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  amount: {\n    marginLeft: sm,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  gasCostsContainer: {\n    backgroundColor: background,\n    padding: `0 ${lg}`,\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport React, { useEffect, useMemo, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\n\nimport { toTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport Divider from 'src/components/Divider'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { getSpendingLimitContract } from 'src/logic/contracts/spendingLimitContracts'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\nimport { safeAddressFromUrl } from 'src/logic/safe/store/selectors'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { getERC20TokenContract } from 'src/logic/tokens/store/actions/fetchTokens'\nimport { sameAddress, ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\nimport { sameString } from 'src/utils/strings'\nimport { TokenProps } from 'src/logic/tokens/store/model/token'\nimport { RecordOf } from 'immutable'\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { ButtonStatus, Modal } from 'src/components/Modal'\nimport { TransactionFees } from 'src/components/TransactionsFees'\n\nimport { styles } from './style'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\n\nconst useStyles = makeStyles(styles)\n\nconst { nativeCoin } = getNetworkInfo()\n\nexport type ReviewTxProp = {\n  recipientAddress: string\n  recipientName?: string\n  amount: string\n  txRecipient: string\n  token: string\n  txType?: string\n  tokenSpendingLimit?: SpendingLimit\n}\n\ntype ReviewTxProps = {\n  onClose: () => void\n  onPrev: () => void\n  tx: ReviewTxProp\n}\n\nconst useTxData = (\n  isSendingNativeToken: boolean,\n  txAmount: string,\n  recipientAddress: string,\n  txToken?: RecordOf<TokenProps>,\n): string => {\n  const [data, setData] = useState('')\n\n  useEffect(() => {\n    const updateTxDataAsync = async () => {\n      if (!txToken) {\n        return\n      }\n\n      let txData = EMPTY_DATA\n      if (!isSendingNativeToken) {\n        const ERC20TokenInstance = getERC20TokenContract(txToken.address)\n        const erc20TransferAmount = toTokenUnit(txAmount, txToken.decimals)\n        txData = ERC20TokenInstance.methods.transfer(recipientAddress, erc20TransferAmount).encodeABI()\n      }\n      setData(txData)\n    }\n\n    updateTxDataAsync()\n  }, [isSendingNativeToken, recipientAddress, txAmount, txToken])\n\n  return data\n}\n\nconst ReviewSendFundsTx = ({ onClose, onPrev, tx }: ReviewTxProps): React.ReactElement => {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  const safeAddress = useSelector(safeAddressFromUrl)\n  const tokens: any = useSelector(extendedSafeTokensSelector)\n  const txToken = useMemo(() => tokens.find((token) => sameAddress(token.address, tx.token)), [tokens, tx.token])\n  const isSendingNativeToken = useMemo(() => sameAddress(txToken?.address, nativeCoin.address), [txToken])\n  const txRecipient = isSendingNativeToken ? tx.recipientAddress : txToken?.address || ''\n  const txValue = isSendingNativeToken ? toTokenUnit(tx.amount, nativeCoin.decimals) : '0'\n  const data = useTxData(isSendingNativeToken, tx.amount, tx.recipientAddress, txToken)\n  const [manualSafeTxGas, setManualSafeTxGas] = useState(0)\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\n\n  const {\n    gasCostFormatted,\n    gasPriceFormatted,\n    gasLimit,\n    gasEstimation,\n    txEstimationExecutionStatus,\n    isExecution,\n    isCreation,\n    isOffChainSignature,\n  } = useEstimateTransactionGas({\n    txData: data,\n    txRecipient,\n    txType: tx.txType,\n    txAmount: txValue,\n    safeTxGas: manualSafeTxGas,\n    manualGasPrice,\n    manualGasLimit,\n  })\n\n  const [buttonStatus, setButtonStatus] = useEstimationStatus(txEstimationExecutionStatus)\n  const isSpendingLimit = sameString(tx.txType, 'spendingLimit')\n\n  const submitTx = async (txParameters: TxParameters) => {\n    setButtonStatus(ButtonStatus.LOADING)\n\n    if (!safeAddress) {\n      setButtonStatus(ButtonStatus.READY)\n      logError(Errors._802)\n      return\n    }\n\n    if (isSpendingLimit && txToken && tx.tokenSpendingLimit) {\n      const spendingLimitTokenAddress = isSendingNativeToken ? ZERO_ADDRESS : txToken.address\n      const spendingLimit = getSpendingLimitContract()\n      try {\n        await spendingLimit.methods\n          .executeAllowanceTransfer(\n            safeAddress,\n            spendingLimitTokenAddress,\n            tx.recipientAddress,\n            toTokenUnit(tx.amount, txToken.decimals),\n            ZERO_ADDRESS,\n            0,\n            tx.tokenSpendingLimit.delegate,\n            EMPTY_DATA,\n          )\n          .send({ from: tx.tokenSpendingLimit.delegate })\n          .on('transactionHash', () => onClose())\n      } catch (err) {\n        setButtonStatus(ButtonStatus.READY)\n        logError(Errors._801, err.message)\n      }\n      return\n    }\n\n    dispatch(\n      createTransaction({\n        safeAddress: safeAddress,\n        to: txRecipient as string,\n        valueInWei: txValue,\n        txData: data,\n        txNonce: txParameters.safeNonce,\n        safeTxGas: txParameters.safeTxGas ? Number(txParameters.safeTxGas) : undefined,\n        ethParameters: txParameters,\n        notifiedTransaction: TX_NOTIFICATION_TYPES.STANDARD_TX,\n      }),\n    )\n    onClose()\n  }\n\n  const closeEditModalCallback = (txParameters: TxParameters) => {\n    const oldGasPrice = Number(gasPriceFormatted)\n    const newGasPrice = Number(txParameters.ethGasPrice)\n    const oldSafeTxGas = Number(gasEstimation)\n    const newSafeTxGas = Number(txParameters.safeTxGas)\n\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\n      setManualGasPrice(txParameters.ethGasPrice)\n    }\n\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\n      setManualGasLimit(txParameters.ethGasLimit)\n    }\n\n    if (newSafeTxGas && oldSafeTxGas !== newSafeTxGas) {\n      setManualSafeTxGas(newSafeTxGas)\n    }\n  }\n\n  return (\n    <EditableTxParameters\n      isOffChainSignature={isOffChainSignature}\n      isExecution={isExecution}\n      ethGasLimit={gasLimit}\n      ethGasPrice={gasPriceFormatted}\n      safeTxGas={gasEstimation.toString()}\n      closeEditModalCallback={closeEditModalCallback}\n    >\n      {(txParameters, toggleEditMode) => (\n        <>\n          {/* Header */}\n          <Row align=\"center\" className={classes.heading} grow data-testid=\"send-funds-review-step\">\n            <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\n              Send funds\n            </Paragraph>\n            <Paragraph className={classes.annotation}>2 of 2</Paragraph>\n            <IconButton disableRipple onClick={onClose}>\n              <Close className={classes.closeIcon} />\n            </IconButton>\n          </Row>\n\n          <Hairline />\n\n          <Block className={classes.container}>\n            {/* SafeInfo */}\n            <SafeInfo />\n            <Divider withArrow />\n\n            {/* Recipient */}\n            <Row margin=\"xs\">\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                Recipient\n              </Paragraph>\n            </Row>\n            <Row align=\"center\" margin=\"md\" data-testid=\"recipient-review-step\">\n              <Col xs={12}>\n                <EthHashInfo\n                  hash={tx.recipientAddress}\n                  name={tx.recipientName}\n                  showCopyBtn\n                  showAvatar\n                  explorerUrl={getExplorerInfo(tx.recipientAddress)}\n                />\n              </Col>\n            </Row>\n\n            {/* Amount */}\n            <Row margin=\"xs\">\n              <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                Amount\n              </Paragraph>\n            </Row>\n            <Row align=\"center\" margin=\"md\">\n              <Img alt={txToken?.name as string} height={28} onError={setImageToPlaceholder} src={txToken?.logoUri} />\n              <Paragraph\n                className={classes.amount}\n                noMargin\n                size=\"md\"\n                data-testid={`amount-${txToken?.symbol as string}-review-step`}\n              >\n                {tx.amount} {txToken?.symbol}\n              </Paragraph>\n            </Row>\n\n            {/* Tx Parameters */}\n            {/* FIXME TxParameters should be updated to be used with spending limits */}\n            {!isSpendingLimit && (\n              <TxParametersDetail\n                txParameters={txParameters}\n                onEdit={toggleEditMode}\n                isTransactionCreation={isCreation}\n                isTransactionExecution={isExecution}\n                isOffChainSignature={isOffChainSignature}\n              />\n            )}\n          </Block>\n\n          {/* Disclaimer */}\n          {/* FIXME Estimation should be fixed to be used with spending limits */}\n          {!isSpendingLimit && txEstimationExecutionStatus !== EstimationStatus.LOADING && (\n            <div className={classes.gasCostsContainer}>\n              <TransactionFees\n                gasCostFormatted={gasCostFormatted}\n                isExecution={isExecution}\n                isCreation={isCreation}\n                isOffChainSignature={isOffChainSignature}\n                txEstimationExecutionStatus={txEstimationExecutionStatus}\n              />\n            </div>\n          )}\n\n          {/* Footer */}\n          <Modal.Footer withoutBorder={!isSpendingLimit && buttonStatus !== ButtonStatus.LOADING}>\n            <Modal.Footer.Buttons\n              cancelButtonProps={{ onClick: onPrev, text: 'Back' }}\n              confirmButtonProps={{\n                onClick: () => submitTx(txParameters),\n                status: buttonStatus,\n                text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\n                testId: 'submit-tx-btn',\n              }}\n            />\n          </Modal.Footer>\n        </>\n      )}\n    </EditableTxParameters>\n  )\n}\n\nexport default ReviewSendFundsTx\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render() {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import React, { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\n\nconst { nativeCoin } = getNetworkInfo()\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n\n  return (\n    <>\n      <EthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import ERC20Contract from '@openzeppelin/contracts/build/contracts/ERC20.json'\nimport ERC721Contract from '@openzeppelin/contracts/build/contracts/ERC721.json'\nimport { List } from 'immutable'\nimport memoize from 'lodash.memoize'\nimport { AnyAction } from 'redux'\nimport { ThunkDispatch } from 'redux-thunk'\nimport { AbiItem } from 'web3-utils'\n\nimport { ERC20 } from 'src/types/contracts/ERC20.d'\nimport { ERC721 } from 'src/types/contracts/ERC721.d'\nimport { addTokens } from 'src/logic/tokens/store/actions/addTokens'\nimport { fetchErc20AndErc721AssetsList } from 'src/logic/tokens/api'\nimport { makeToken } from 'src/logic/tokens/store/model/token'\nimport { tokensSelector } from 'src/logic/tokens/store/selectors'\nimport { getWeb3 } from 'src/logic/wallets/getWeb3'\nimport { AppReduxState } from 'src/store'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\nimport { TokenResult } from '../../api/fetchErc20AndErc721AssetsList'\n\nconst createERC20TokenContract = (tokenAddress: string): ERC20 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC20Contract.abi as AbiItem[], tokenAddress) as unknown as ERC20\n}\n\nconst createERC721TokenContract = (tokenAddress: string): ERC721 => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract(ERC721Contract.abi as AbiItem[], tokenAddress) as unknown as ERC721\n}\n\nexport const getERC20TokenContract = memoize(createERC20TokenContract)\n\nexport const getERC721TokenContract = memoize(createERC721TokenContract)\n\nexport const containsMethodByHash = async (contractAddress: string, methodHash: string): Promise<boolean> => {\n  const web3 = getWeb3()\n  const byteCode = await web3.eth.getCode(contractAddress)\n\n  return byteCode.indexOf(methodHash.replace('0x', '')) !== -1\n}\n\nexport const fetchTokens =\n  () =>\n  async (\n    dispatch: ThunkDispatch<AppReduxState, undefined, AnyAction>,\n    getState: () => AppReduxState,\n  ): Promise<void> => {\n    const currentSavedTokens = tokensSelector(getState())\n\n    let tokenList: TokenResult[]\n    try {\n      const resp = await fetchErc20AndErc721AssetsList()\n      tokenList = resp.data.results\n    } catch (e) {\n      logError(Errors._600, e.message)\n      return\n    }\n\n    const erc20Tokens = tokenList.filter((token) => token.type.toLowerCase() === 'erc20')\n\n    if (currentSavedTokens?.size === erc20Tokens.length) {\n      return\n    }\n\n    const tokens = List(erc20Tokens.map((token) => makeToken(token)))\n\n    dispatch(addTokens(tokens))\n  }\n"],"sourceRoot":""}