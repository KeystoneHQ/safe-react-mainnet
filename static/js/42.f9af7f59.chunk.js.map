{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/SendFunds/SpendingLimitRow.tsx","routes/safe/components/Balances/SendModal/screens/SendFunds/style.ts","routes/safe/components/Balances/SendModal/screens/SendFunds/index.tsx","components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/layout/Bold/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","assets/icons/qrcode.svg","components/Divider/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","components/forms/SelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","../node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js","routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField/index.tsx"],"names":["SpendingLimitRadioButtons","styled","RadioButtons","theme","colors","primary","SpendingLimitRow","tokenSpendingLimit","selectedToken","availableAmount","useMemo","fromTokenUnit","BigNumber","amount","minus","spent","toString","decimals","mutators","useForm","Row","margin","Col","between","style","flexDirection","size","Field","name","initialValue","input","value","onRadioChange","setTxType","options","label","symbol","styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","height","annotation","letterSpacing","color","secondaryText","marginRight","marginLeft","manage","fontSize","closeIcon","width","qrCodeBtn","cursor","formContainer","minHeight","buttonRow","gap","selectAddress","formMutators","setMax","args","state","utils","changeValue","onTokenChange","formState","values","setRecipient","useStyles","makeStyles","InputAdornmentChildSymbol","SendFunds","initialValues","onClose","onReview","recipientAddress","classes","tokens","useSelector","extendedSafeTokensSelector","addressBook","currentNetworkAddressBook","nativeCoin","getNetworkInfo","useState","defaultEntry","address","predefinedAddress","addressBookEntry","find","sameAddress","selectedEntry","setSelectedEntry","pristine","setPristine","isValidAddress","setIsValidAddress","addressErrorMsg","setAddressErrorMsg","useEffect","spendingLimits","currentSafeSpendingLimits","currentUser","userAccountSelector","align","className","grow","data-testid","Paragraph","noMargin","weight","IconButton","disableRipple","onClick","Hairline","GnoForm","token","onSubmit","submitValues","recipientName","validation","tokenAddress","txType","isSpendingLimit","tokenDecimals","Number","getBalanceAndDecimalsFromToken","composeValidators","required","mustBeFloat","minMaxDecimalsLength","minValue","maxValue","spendingLimitAllowedBalance","balance","userSpendingLimits","filter","delegate","getSpendingLimitByTokenAddress","handleScan","closeQrModal","scannedAddress","startsWith","replace","scannedName","addressErrorMessage","mustBeEthereumAddress","shouldDisableSubmitButton","setMaxAllowedAmount","maxAmount","tokenBalance","spendingLimitBalance","gt","Block","SafeInfo","Divider","withArrow","onKeyDown","e","sameString","key","role","tabIndex","hash","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","xs","AddressBookInput","fieldMutator","errorMsg","center","middle","ScanQRWrapper","TokenSelectField","isValid","ButtonLink","testId","component","TextField","inputAdornment","endAdornment","InputAdornment","position","placeholder","text","type","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","disabled","valid","GnoField","props","overflowStyle","overflow","root","paddingTop","paddingBottom","lineHeight","onChange","restInput","meta","multiline","rows","rest","helperText","undefined","showError","touched","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","InputProps","stylesBasedOn","flex","children","decorators","subscription","render","handleSubmit","submitting","validating","form","validate","setImageToPlaceholder","event","img","currentTarget","test","src","TokenPlaceholder","Bold","this","React","maxHeight","loaderContainer","close","detailsContainer","backgroundColor","background","button","sm","ScanQRModal","isOpen","onScan","fileUploadModalOpen","setFileUploadModalOpen","setError","cameraBlocked","setCameraBlocked","scannerRef","openImageDialog","current","onFileScannedResolve","successData","console","description","handleClose","open","title","layout","legacyMode","onError","err","data","ref","facingMode","Button","minWidth","variant","Wrapper","div","StyledDivider","DividerSRC","qrModalOpen","setQrModalOpen","alt","QRIcon","StyledBlock","border","currentSafeWithNames","safeAddress","ethBalance","safeName","SelectInput","disableError","formControlProps","renderValue","dirtySinceLastSubmit","htmlFor","useTextFieldLabelStyle","borderRadius","useTextFieldInputStyle","chainId","getNetworkId","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","updateAddressInfo","addressEntry","validateAddress","filteredEntries","filterAddressEntries","inputValue","length","onInputChange","_","reason","a","normalizedValue","trimSpaces","isFeatureEnabled","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","labelStyles","inputStyles","Autocomplete","openOnFocus","filterOptions","freeSolo","id","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","getOptionLabel","renderOption","display","flexGrow","ContractsAddressBookInput","setFilteredEntries","filterContractAddressBookEntries","filteredADBK","filterContractAddresses","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","ListItemIcon","other","_objectWithoutProperties","context","ListContext","_extends","clsx","alignItems","alignItemsFlexStart","withStyles","palette","action","flexShrink","marginTop","useSelectedTokenStyles","container","tokenData","tokenImage","useSelectStyles","selectMenu","paddingRight","SelectedToken","MenuItem","Img","logoUri","ListItemText","secondary","formatAmount","tokenClasses","SelectField","displayEmpty","map"],"mappings":"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","file":"static/js/42.f9af7f59.chunk.js","sourcesContent":["import { RadioButtons, Text } from '@gnosis.pm/safe-react-components'\nimport { BigNumber } from 'bignumber.js'\nimport React, { ReactElement, useMemo } from 'react'\nimport { useForm } from 'react-final-form'\nimport styled from 'styled-components'\n\nimport Field from 'src/components/forms/Field'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\nimport { Token } from 'src/logic/tokens/store/model/token'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\n\n// TODO: propose refactor in safe-react-components based on this requirements\nconst SpendingLimitRadioButtons = styled(RadioButtons)`\n  & .MuiRadio-colorPrimary.Mui-checked {\n    color: ${({ theme }) => theme.colors.primary};\n  }\n`\n\ninterface SpendingLimitRowProps {\n  tokenSpendingLimit: SpendingLimit\n  selectedToken: Token\n}\n\nexport const SpendingLimitRow = ({ tokenSpendingLimit, selectedToken }: SpendingLimitRowProps): ReactElement => {\n  const availableAmount = useMemo(() => {\n    return fromTokenUnit(\n      new BigNumber(tokenSpendingLimit.amount).minus(tokenSpendingLimit.spent).toString(),\n      selectedToken.decimals,\n    )\n  }, [selectedToken.decimals, tokenSpendingLimit.amount, tokenSpendingLimit.spent])\n  const { mutators } = useForm()\n\n  return (\n    <Row margin=\"sm\">\n      <Col between=\"lg\" style={{ flexDirection: 'column' }}>\n        <Text size=\"lg\">Send as</Text>\n        <Field name=\"txType\" initialValue=\"multiSig\">\n          {({ input: { name, value } }) => (\n            <SpendingLimitRadioButtons\n              name={name}\n              value={value || 'multiSig'}\n              onRadioChange={mutators.setTxType}\n              options={[\n                { label: 'Multisig transaction', value: 'multiSig' },\n                {\n                  label: `Spending limit transaction (${availableAmount} ${selectedToken.symbol})`,\n                  value: 'spendingLimit',\n                },\n              ]}\n            />\n          )}\n        </Field>\n      </Col>\n    </Row>\n  )\n}\n","import { lg, md, secondaryText } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'flex-start',\n    boxSizing: 'border-box',\n    height: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: secondaryText,\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  manage: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n    minHeight: '216px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  selectAddress: {\n    cursor: 'pointer',\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport { BigNumber } from 'bignumber.js'\nimport React, { ReactElement, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { getExplorerInfo } from 'src/config'\nimport Field from 'src/components/forms/Field'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport TextField from 'src/components/forms/TextField'\nimport {\n  composeValidators,\n  maxValue,\n  minValue,\n  minMaxDecimalsLength,\n  mustBeFloat,\n  mustBeEthereumAddress,\n  required,\n} from 'src/components/forms/validator'\nimport Block from 'src/components/layout/Block'\nimport ButtonLink from 'src/components/layout/ButtonLink'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { SpendingLimit } from 'src/logic/safe/store/models/safe'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\n\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { AddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\nimport { SpendingLimitRow } from 'src/routes/safe/components/Balances/SendModal/screens/SendFunds/SpendingLimitRow'\nimport TokenSelectField from 'src/routes/safe/components/Balances/SendModal/screens/SendFunds/TokenSelectField'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\nimport { currentSafeSpendingLimits } from 'src/logic/safe/store/selectors'\nimport { sameString } from 'src/utils/strings'\n\nimport { styles } from './style'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport { spendingLimitAllowedBalance, getSpendingLimitByTokenAddress } from 'src/logic/safe/utils/spendingLimits'\nimport { getBalanceAndDecimalsFromToken } from 'src/logic/tokens/utils/tokenHelpers'\nimport { getNetworkInfo } from 'src/config'\nimport Divider from 'src/components/Divider'\nimport { Modal } from 'src/components/Modal'\n\nconst formMutators = {\n  setMax: (args, state, utils) => {\n    utils.changeValue(state, 'amount', () => args[0])\n  },\n  onTokenChange: (args, state, utils) => {\n    utils.changeValue(state, 'amount', () => state.formState.values.amount)\n  },\n  setRecipient: (args, state, utils) => {\n    utils.changeValue(state, 'recipientAddress', () => args[0])\n  },\n  setTxType: (args, state, utils) => {\n    utils.changeValue(state, 'txType', () => args[0])\n  },\n}\n\nconst useStyles = makeStyles(styles)\n\nexport type SendFundsTx = {\n  amount?: string\n  recipientAddress?: string\n  name?: string\n  token?: string\n  txType?: string\n  tokenSpendingLimit?: SpendingLimit\n}\n\ntype SendFundsProps = {\n  initialValues: SendFundsTx\n  onClose: () => void\n  onReview: (txInfo: unknown) => void\n  recipientAddress?: string\n  selectedToken?: string\n  amount?: string\n}\n\nconst InputAdornmentChildSymbol = ({ symbol }: { symbol?: string }): ReactElement => {\n  return <>{symbol}</>\n}\n\nconst SendFunds = ({\n  initialValues,\n  onClose,\n  onReview,\n  recipientAddress,\n  selectedToken = '',\n  amount,\n}: SendFundsProps): ReactElement => {\n  const classes = useStyles()\n  const tokens = useSelector(extendedSafeTokensSelector)\n  const addressBook = useSelector(currentNetworkAddressBook)\n  const { nativeCoin } = getNetworkInfo()\n  const [selectedEntry, setSelectedEntry] = useState<{ address: string; name: string } | null>(() => {\n    const defaultEntry = { address: recipientAddress || '', name: '' }\n\n    // if there's nothing to lookup for, we return the default entry\n    if (!initialValues?.recipientAddress && !recipientAddress) {\n      return defaultEntry\n    }\n\n    // if there's something to lookup for, `initialValues` has precedence over `recipientAddress`\n    const predefinedAddress = initialValues?.recipientAddress ?? recipientAddress\n    const addressBookEntry = addressBook.find(({ address }) => {\n      return sameAddress(predefinedAddress, address)\n    })\n\n    // if found in the Address Book, then we return the entry\n    if (addressBookEntry) {\n      return addressBookEntry\n    }\n\n    // otherwise we return the default entry\n    return defaultEntry\n  })\n  const [pristine, setPristine] = useState(true)\n  const [isValidAddress, setIsValidAddress] = useState(false)\n  const [addressErrorMsg, setAddressErrorMsg] = useState('')\n\n  useEffect(() => {\n    if (selectedEntry === null && pristine) {\n      setPristine(false)\n    }\n  }, [selectedEntry, pristine])\n\n  let tokenSpendingLimit\n  const handleSubmit = (values) => {\n    const submitValues = { ...values }\n    // If the input wasn't modified, there was no mutation of the recipientAddress\n    if (!values.recipientAddress) {\n      submitValues.recipientAddress = selectedEntry?.address\n    }\n    submitValues.recipientName = selectedEntry?.name\n    onReview({ ...submitValues, tokenSpendingLimit })\n  }\n\n  const spendingLimits = useSelector(currentSafeSpendingLimits)\n  const currentUser = useSelector(userAccountSelector)\n\n  const sendFundsValidation = (values) => {\n    const { amount, token: tokenAddress, txType } = values ?? {}\n    if (!amount || !tokenAddress) {\n      return\n    }\n\n    const isSpendingLimit = tokenSpendingLimit && txType === 'spendingLimit'\n    const tokenDecimals =\n      Number(getBalanceAndDecimalsFromToken({ tokenAddress, tokens })?.decimals) || nativeCoin.decimals\n    const amountValidation = composeValidators(\n      required,\n      mustBeFloat,\n      minMaxDecimalsLength(1, tokenDecimals),\n      minValue(0, false),\n      maxValue(\n        isSpendingLimit\n          ? spendingLimitAllowedBalance({ tokenAddress, tokenSpendingLimit, tokens })\n          : getBalanceAndDecimalsFromToken({ tokenAddress, tokens })?.balance ?? 0,\n      ),\n    )(amount)\n\n    return {\n      amount: amountValidation,\n    }\n  }\n\n  return (\n    <>\n      <Row align=\"center\" className={classes.heading} grow data-testid=\"modal-title-send-funds\">\n        <Paragraph className={classes.manage} noMargin weight=\"bolder\">\n          Send funds\n        </Paragraph>\n        <Paragraph className={classes.annotation}>1 of 2</Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.closeIcon} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <GnoForm\n        formMutators={formMutators}\n        initialValues={{\n          amount: initialValues?.amount || amount,\n          recipientAddress: initialValues.recipientAddress || recipientAddress,\n          token: initialValues?.token || selectedToken,\n        }}\n        onSubmit={handleSubmit}\n        validation={sendFundsValidation}\n      >\n        {(...args) => {\n          const formState = args[2]\n          const mutators = args[3]\n          const { token: tokenAddress, txType } = formState.values\n          const selectedToken = tokens?.find((token) => token.address === tokenAddress)\n          const userSpendingLimits = spendingLimits?.filter(({ delegate }) => sameAddress(delegate, currentUser))\n\n          tokenSpendingLimit = getSpendingLimitByTokenAddress({\n            spendingLimits: userSpendingLimits,\n            tokenAddress: selectedToken?.address,\n          })\n\n          const handleScan = (value, closeQrModal) => {\n            let scannedAddress = value\n\n            if (scannedAddress.startsWith('ethereum:')) {\n              scannedAddress = scannedAddress.replace('ethereum:', '')\n            }\n            const scannedName = addressBook[scannedAddress]?.name ?? ''\n            const addressErrorMessage = mustBeEthereumAddress(scannedAddress)\n            if (!addressErrorMessage) {\n              mutators.setRecipient(scannedAddress)\n              setSelectedEntry({\n                name: scannedName || '',\n                address: scannedAddress,\n              })\n            } else setAddressErrorMsg(addressErrorMessage)\n\n            closeQrModal()\n          }\n\n          let shouldDisableSubmitButton = !isValidAddress\n          if (selectedEntry) {\n            shouldDisableSubmitButton = !selectedEntry.address\n          }\n\n          const setMaxAllowedAmount = () => {\n            const isSpendingLimit = tokenSpendingLimit && txType === 'spendingLimit'\n            let maxAmount = selectedToken?.balance.tokenBalance ?? 0\n\n            if (isSpendingLimit) {\n              const spendingLimitBalance = fromTokenUnit(\n                new BigNumber(tokenSpendingLimit.amount).minus(tokenSpendingLimit.spent).toString(),\n                selectedToken?.decimals ?? 0,\n              )\n\n              maxAmount = new BigNumber(maxAmount).gt(spendingLimitBalance) ? spendingLimitBalance : maxAmount\n            }\n\n            mutators.setMax(maxAmount)\n          }\n\n          return (\n            <>\n              <Block className={classes.formContainer}>\n                <SafeInfo />\n                <Divider withArrow />\n                {selectedEntry && selectedEntry.address ? (\n                  <div\n                    onKeyDown={(e) => {\n                      if (sameString(e.key, 'Tab')) {\n                        return\n                      }\n                      setSelectedEntry({ address: '', name: '' })\n                    }}\n                    onClick={() => {\n                      setSelectedEntry({ address: '', name: '' })\n                    }}\n                    role=\"listbox\"\n                    tabIndex={0}\n                  >\n                    <Row margin=\"xs\">\n                      <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                        Recipient\n                      </Paragraph>\n                    </Row>\n                    <Row align=\"center\" margin=\"md\">\n                      <EthHashInfo\n                        hash={selectedEntry.address}\n                        name={selectedEntry.name}\n                        showAvatar\n                        showCopyBtn\n                        explorerUrl={getExplorerInfo(selectedEntry.address)}\n                      />\n                    </Row>\n                  </div>\n                ) : (\n                  <Row margin=\"md\">\n                    <Col xs={11}>\n                      <AddressBookInput\n                        fieldMutator={mutators.setRecipient}\n                        pristine={pristine}\n                        errorMsg={addressErrorMsg}\n                        setIsValidAddress={setIsValidAddress}\n                        setSelectedEntry={setSelectedEntry}\n                      />\n                    </Col>\n                    <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n                      <ScanQRWrapper handleScan={handleScan} />\n                    </Col>\n                  </Row>\n                )}\n                <Row margin=\"sm\">\n                  <Col>\n                    <TokenSelectField\n                      initialValue={selectedToken?.address}\n                      isValid={!!selectedToken?.address}\n                      tokens={tokens}\n                    />\n                  </Col>\n                </Row>\n                {tokenSpendingLimit && selectedToken && (\n                  <SpendingLimitRow selectedToken={selectedToken} tokenSpendingLimit={tokenSpendingLimit} />\n                )}\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                      Amount\n                    </Paragraph>\n                    <ButtonLink onClick={setMaxAllowedAmount} weight=\"bold\" testId=\"send-max-btn\">\n                      Send max\n                    </ButtonLink>\n                  </Col>\n                </Row>\n                <Row margin=\"md\">\n                  <Col>\n                    <Field\n                      component={TextField}\n                      inputAdornment={{\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <InputAdornmentChildSymbol symbol={selectedToken?.symbol} />\n                          </InputAdornment>\n                        ),\n                      }}\n                      name=\"amount\"\n                      placeholder=\"Amount*\"\n                      text=\"Amount*\"\n                      type=\"text\"\n                      testId=\"amount-input\"\n                    />\n                  </Col>\n                </Row>\n              </Block>\n              <Modal.Footer>\n                <Modal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onClose }}\n                  confirmButtonProps={{\n                    disabled: !formState.valid || shouldDisableSubmitButton,\n                    testId: 'review-tx-btn',\n                    text: 'Review',\n                  }}\n                />\n              </Modal.Footer>\n            </>\n          )\n        }}\n      </GnoForm>\n    </>\n  )\n}\n\nexport default SendFunds\n","import React from 'react'\nimport { Field } from 'react-final-form'\n\n// $FlowFixMe\nconst GnoField = ({ ...props }: any) => <Field {...props} />\n\nexport default GnoField\n","import MuiTextField from '@material-ui/core/TextField'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\n\nimport { lg } from 'src/theme/variables'\n\n// Neded for solving a fix in Windows browsers\nconst overflowStyle = {\n  overflow: 'hidden',\n  width: '100%',\n}\n\nconst styles = () =>\n  createStyles({\n    root: {\n      paddingTop: lg,\n      paddingBottom: '12px',\n      lineHeight: 0,\n    },\n  })\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  input: {\n    name: string\n    onChange?: () => void\n    value: string\n    placeholder: string\n    type: string\n  }\n  meta: {\n    touched?: boolean\n    pristine?: boolean\n    valid?: boolean\n    error?: string\n    modifiedSinceLastSubmit?: boolean\n    submitError?: boolean\n    active?: boolean\n  }\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\n  multiline: boolean\n  rows?: string\n  testId: string\n  text: string\n  disabled?: boolean\n  rowsMax?: number\n  className?: string\n}\n\nconst TextField = (props: Props): React.ReactElement => {\n  const {\n    input: { name, onChange, value, ...restInput },\n    inputAdornment,\n    meta,\n    multiline,\n    rows,\n    testId,\n    text,\n    ...rest\n  } = props\n  const classes = useStyles()\n  const helperText = value ? text : undefined\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\n  const errorMessage = meta.error || meta.submitError\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\n\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\n\n  const inputRoot = helperText ? classes.root : ''\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\n  const inputProps = {\n    ...restInput,\n    autoComplete: 'off',\n    'data-testid': testId,\n  }\n  const inputRootProps = {\n    ...inputAdornment,\n    className: `${inputRoot} ${statusClasses}`,\n    disableUnderline: disableUnderline,\n  }\n\n  return (\n    <MuiTextField\n      error={hasError && showError}\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\n      inputProps={inputProps} // blank in order to force to have helper text\n      InputProps={inputRootProps}\n      multiline={multiline}\n      name={name}\n      onChange={onChange}\n      rows={rows}\n      style={overflowStyle}\n      value={value}\n      {...rest}\n    />\n  )\n}\n\nexport default TextField\n","import * as React from 'react'\nimport { Form } from 'react-final-form'\n\nconst stylesBasedOn = (padding) => ({\n  padding: `0 ${padding}%`,\n  flexDirection: 'column',\n  flex: '1 0 auto',\n})\n\nconst GnoForm = ({\n  children,\n  decorators,\n  formMutators,\n  initialValues,\n  onSubmit,\n  padding = 0,\n  subscription,\n  testId = '',\n  validation,\n}: any) => (\n  <Form\n    decorators={decorators}\n    initialValues={initialValues}\n    mutators={formMutators}\n    onSubmit={onSubmit}\n    render={({ handleSubmit, ...rest }) => (\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\n      </form>\n    )}\n    subscription={subscription}\n    validate={validation}\n  />\n)\n\nexport default GnoForm\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render() {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import React, { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { makeStyles } from '@material-ui/core/styles'\nimport React, { ReactElement, useState } from 'react'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport Img from 'src/components/layout/Img'\n\nconst useStyles = makeStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n})\n\ntype Props = {\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\n}\n\nexport const ScanQRWrapper = ({ handleScan }: Props): ReactElement => {\n  const classes = useStyles()\n  const [qrModalOpen, setQrModalOpen] = useState(false)\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const onScanFinished = (value: string) => {\n    handleScan(value, closeQrModal)\n  }\n\n  return (\n    <>\n      <Img\n        alt=\"Scan QR\"\n        className={classes.qrCodeBtn}\n        height={20}\n        onClick={() => openQrModal()}\n        role=\"button\"\n        src={QRIcon}\n        testId=\"qr-icon\"\n      />\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\n    </>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\n\nconst { nativeCoin } = getNetworkInfo()\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n\n  return (\n    <>\n      <EthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport React from 'react'\n\nconst style = {\n  minWidth: '100%',\n}\n\nconst SelectInput = ({\n  classes,\n  disableError,\n  formControlProps,\n  input: { name, onChange, value, ...restInput },\n  label,\n  meta,\n  renderValue,\n  ...rest\n}) => {\n  const showError = ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) && meta.touched && !disableError\n  const inputProps = {\n    ...restInput,\n    name,\n  }\n\n  return (\n    <FormControl {...formControlProps} error={showError} style={style}>\n      <InputLabel htmlFor={name}>{label}</InputLabel>\n      <Select\n        classes={classes}\n        inputProps={inputProps}\n        onChange={onChange}\n        renderValue={renderValue}\n        value={value}\n        {...rest}\n      />\n      {showError && <FormHelperText>{meta.error || meta.submitError}</FormHelperText>}\n    </FormControl>\n  )\n}\n\nexport default SelectInput\n","import { createStyles, makeStyles } from '@material-ui/core'\n\nexport const useTextFieldLabelStyle = makeStyles(\n  createStyles({\n    root: {\n      overflow: 'hidden',\n      borderRadius: 4,\n      fontSize: '15px',\n      width: '500px',\n    },\n  }),\n)\n\nexport const useTextFieldInputStyle = makeStyles(\n  createStyles({\n    root: {\n      fontSize: '14px',\n      width: '420px',\n    },\n  }),\n)\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport MuiTextField from '@material-ui/core/TextField'\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\nimport React, { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\nimport { getNetworkId, isFeatureEnabled } from 'src/config'\nimport { FEATURES } from 'src/config/networks/network.d'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport {\n  useTextFieldInputStyle,\n  useTextFieldLabelStyle,\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\nimport { trimSpaces } from 'src/utils/strings'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\n\nconst chainId = getNetworkId()\n\nexport interface AddressBookProps {\n  fieldMutator: (address: string) => void\n  label?: string\n  pristine?: boolean\n  recipientAddress?: string\n  errorMsg?: string\n  setIsValidAddress: (valid: boolean) => void\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\n}\n\nexport interface BaseAddressBookInputProps extends AddressBookProps {\n  addressBookEntries: AddressBookEntry[]\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\n  validationText: string | undefined\n}\n\nconst BaseAddressBookInput = ({\n  addressBookEntries,\n  fieldMutator,\n  label = 'Recipient',\n  setIsValidAddress,\n  setSelectedEntry,\n  setValidationText,\n  validationText,\n}: BaseAddressBookInputProps): ReactElement => {\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\n    setSelectedEntry(addressEntry)\n    fieldMutator(addressEntry.address)\n  }\n\n  const validateAddress = (address: string): AddressBookEntry | string | undefined => {\n    const addressErrorMessage = mustBeEthereumAddress(address)\n    setIsValidAddress(!addressErrorMessage)\n\n    if (addressErrorMessage) {\n      setValidationText(addressErrorMessage)\n      return\n    }\n\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: address })\n    return filteredEntries.length === 1 ? filteredEntries[0] : address\n  }\n\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\n    switch (reason) {\n      case 'select-option': {\n        const { address, name, chainId } = value as AddressBookEntry\n        updateAddressInfo({ address, name, chainId })\n        break\n      }\n    }\n  }\n\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\n    _,\n    value,\n    reason,\n  ) => {\n    switch (reason) {\n      case 'input': {\n        const normalizedValue = trimSpaces(value)\n\n        if (!normalizedValue) {\n          break\n        }\n\n        // ENS-enabled resolve/validation\n        if (\n          isFeatureEnabled(FEATURES.DOMAIN_LOOKUP) &&\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\n        ) {\n          let address = ''\n          try {\n            address = await getAddressFromDomain(normalizedValue)\n          } catch (err) {\n            logError(Errors._101, err.message)\n          }\n\n          const validatedAddress = validateAddress(address)\n\n          if (!validatedAddress) {\n            fieldMutator('')\n            break\n          }\n\n          const newEntry =\n            typeof validatedAddress === 'string'\n              ? {\n                  address,\n                  name: normalizedValue,\n                  chainId,\n                }\n              : validatedAddress\n\n          updateAddressInfo(newEntry)\n          break\n        }\n\n        // ETH address validation\n        const validatedAddress = validateAddress(normalizedValue)\n\n        if (!validatedAddress) {\n          fieldMutator('')\n          break\n        }\n\n        const newEntry =\n          typeof validatedAddress === 'string'\n            ? {\n                address: validatedAddress,\n                name: '',\n                chainId,\n              }\n            : validatedAddress\n\n        updateAddressInfo(newEntry)\n\n        break\n      }\n    }\n  }\n\n  const labelStyles = useTextFieldLabelStyle()\n  const inputStyles = useTextFieldInputStyle()\n\n  return (\n    <Autocomplete<AddressBookEntry, false, false, true>\n      closeIcon={null}\n      openOnFocus={false}\n      filterOptions={filterAddressEntries}\n      freeSolo\n      onChange={onChange}\n      onInputChange={onInputChange}\n      options={addressBookEntries}\n      id=\"address-book-input\"\n      renderInput={(params) => (\n        <MuiTextField\n          {...params}\n          autoFocus={true}\n          error={!!validationText}\n          fullWidth\n          variant=\"filled\"\n          label={validationText ? validationText : label}\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\n        />\n      )}\n      getOptionLabel={({ address }) => address}\n      renderOption={({ address, name }) => <EthHashInfo hash={address} name={name} showAvatar />}\n      role=\"listbox\"\n      style={{ display: 'flex', flexGrow: 1 }}\n    />\n  )\n}\n\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    if (props.errorMsg) {\n      setValidationText(props.errorMsg)\n    }\n  }, [props.errorMsg])\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={addressBookEntries}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n\nexport const ContractsAddressBookInput = ({\n  setIsValidAddress,\n  setSelectedEntry,\n  ...props\n}: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    const filterContractAddresses = async (): Promise<void> => {\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\n      setFilteredEntries(filteredADBK)\n    }\n    filterContractAddresses()\n  }, [addressBookEntries])\n\n  const onSetSelectedEntry = async (selectedEntry) => {\n    if (selectedEntry?.address) {\n      // verify if `address` is a contract\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\n      setIsValidAddress(!contractAddressErrorMessage)\n      setValidationText(contractAddressErrorMessage ?? '')\n      setSelectedEntry(selectedEntry)\n    }\n  }\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={filteredEntries}\n      setIsValidAddress={setIsValidAddress}\n      setSelectedEntry={onSetSelectedEntry}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);","import { createStyles, makeStyles } from '@material-ui/core'\n\nimport { sm } from 'src/theme/variables'\n\nexport const useSelectedTokenStyles = makeStyles(\n  createStyles({\n    container: {\n      minHeight: '55px',\n      padding: 0,\n      width: '100%',\n    },\n    tokenData: {\n      padding: 0,\n      margin: 0,\n      lineHeight: '14px',\n    },\n    tokenImage: {\n      display: 'block',\n      marginRight: sm,\n      height: 28,\n      width: 'auto',\n    },\n  }),\n)\n\nexport const useSelectStyles = makeStyles(\n  createStyles({\n    selectMenu: {\n      paddingRight: 0,\n    },\n  }),\n)\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { List } from 'immutable'\nimport React, { ReactElement } from 'react'\n\nimport Field from 'src/components/forms/Field'\nimport SelectField from 'src/components/forms/SelectField'\nimport { required } from 'src/components/forms/validator'\nimport Img from 'src/components/layout/Img'\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { Token } from 'src/logic/tokens/store/model/token'\n\nimport { useSelectStyles, useSelectedTokenStyles } from './style'\n\ninterface SelectTokenProps {\n  tokenAddress: string\n  tokens: List<Token>\n}\n\nconst SelectedToken = ({ tokenAddress, tokens }: SelectTokenProps): ReactElement => {\n  const classes = useSelectedTokenStyles()\n  const token = tokens.find(({ address }) => address === tokenAddress)\n\n  return (\n    <MenuItem className={classes.container}>\n      {token ? (\n        <>\n          <ListItemIcon>\n            <Img\n              className={classes.tokenImage}\n              alt={token.name}\n              onError={setImageToPlaceholder}\n              src={token.logoUri || ''}\n            />\n          </ListItemIcon>\n          <ListItemText\n            className={classes.tokenData}\n            primary={token.name}\n            secondary={`${formatAmount(token.balance?.tokenBalance.toString() ?? '0')} ${token.symbol}`}\n          />\n        </>\n      ) : (\n        <Text color=\"placeHolder\" size=\"xl\">\n          Select an asset*\n        </Text>\n      )}\n    </MenuItem>\n  )\n}\n\ninterface TokenSelectFieldProps {\n  initialValue?: string\n  isValid?: boolean\n  tokens: List<Token>\n}\n\nconst TokenSelectField = ({ initialValue, isValid = true, tokens }: TokenSelectFieldProps): ReactElement => {\n  const classes = useSelectStyles()\n  const tokenClasses = useSelectedTokenStyles()\n\n  return (\n    <Field\n      classes={{ selectMenu: classes.selectMenu }}\n      className={isValid ? 'isValid' : 'isInvalid'}\n      component={SelectField}\n      displayEmpty\n      initialValue={initialValue}\n      name=\"token\"\n      renderValue={(tokenAddress) => <SelectedToken tokenAddress={tokenAddress} tokens={tokens} />}\n      validate={required}\n    >\n      {tokens.map((token) => (\n        <MenuItem key={token.address} value={token.address}>\n          <ListItemIcon>\n            <Img\n              className={tokenClasses.tokenImage}\n              alt={token.name}\n              onError={setImageToPlaceholder}\n              src={token.logoUri || ''}\n            />\n          </ListItemIcon>\n          <ListItemText\n            primary={token.name}\n            secondary={`${formatAmount(token.balance?.tokenBalance.toString() ?? '0')} ${token.symbol}`}\n            data-testid={`select-token-${token.name}`}\n          />\n        </MenuItem>\n      ))}\n    </Field>\n  )\n}\n\nexport default TokenSelectField\n"],"sourceRoot":""}