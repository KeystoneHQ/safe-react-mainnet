{"version":3,"sources":["routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/layout/Bold/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils/index.ts","../node_modules/final-form-calculate/dist/final-form-calculate.es.js","routes/safe/components/Settings/SpendingLimit/style.ts","routes/safe/components/Settings/SpendingLimit/FormFields/ResetTime.tsx","routes/safe/components/Settings/SpendingLimit/FormFields/Amount.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/DataDisplay.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/AddressInfo.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/ResetTimeInfo.tsx","routes/safe/components/Settings/SpendingLimit/InfoDisplay/TokenInfo.tsx","logic/safe/hooks/useTokenInfo.tsx","routes/safe/components/Transactions/TxList/assets/custom.svg","../node_modules/@material-ui/icons/MoreHoriz.js","routes/safe/components/Transactions/TxList/hooks/usePagedHistoryTransactions.ts","routes/safe/components/Transactions/TxList/hooks/useHistoryTransactions.ts","routes/safe/components/Transactions/TxList/styled.tsx","../../src/observe.ts","../../src/InView.tsx","components/InfiniteScroll/index.tsx","../../src/useInView.tsx","routes/safe/components/Transactions/TxList/TxsInfiniteScroll.tsx","routes/safe/components/Transactions/TxList/hooks/useAssetInfo.ts","routes/safe/components/Transactions/TxList/hooks/useTransactionStatus.ts","routes/safe/components/Transactions/TxList/assets/circle-cross-red.svg","routes/safe/components/Transactions/TxList/assets/incoming.svg","routes/safe/components/Transactions/TxList/assets/outgoing.svg","routes/safe/components/Transactions/TxList/assets/settings.svg","routes/safe/components/Transactions/TxList/hooks/useKnownAddress.ts","routes/safe/components/Transactions/TxList/hooks/useTransactionType.ts","components/CustomIconText/index.tsx","routes/safe/components/Transactions/TxList/TxLocationProvider.tsx","routes/safe/components/Transactions/TxList/hooks/useTransactionActions.ts","routes/safe/components/Transactions/TxList/TxActionProvider.tsx","routes/safe/components/Transactions/TxList/TxHoverProvider.tsx","routes/safe/components/Transactions/TxList/hooks/useActionButtonsHandlers.ts","routes/safe/components/Transactions/TxList/TxCollapsedActions.tsx","routes/safe/components/Transactions/TxList/TokenTransferAmount.tsx","routes/safe/components/Transactions/TxList/TxCollapsed.tsx","routes/safe/components/Transactions/TxList/TxHistoryCollapsed.tsx","routes/safe/components/Transactions/TxList/SpendingLimitDetails.tsx","../node_modules/@material-ui/core/esm/Divider/Divider.js","routes/safe/components/AddressBook/EllipsisTransactionDetails/index.tsx","routes/safe/components/Transactions/TxList/AddressInfo.tsx","routes/safe/components/Transactions/TxList/InfoDetails.tsx","routes/safe/components/Transactions/TxList/TxInfoDetails.tsx","routes/safe/components/Transactions/TxList/HexEncodedData.tsx","routes/safe/components/Transactions/TxList/MethodValue.tsx","routes/safe/components/Transactions/TxList/MethodDetails.tsx","routes/safe/components/Transactions/TxList/MultiSendDetails.tsx","routes/safe/components/Transactions/TxList/TxData.tsx","routes/safe/components/Transactions/TxList/TxExpandedActions.tsx","routes/safe/components/Transactions/TxList/TxInfoSettings.tsx","routes/safe/components/Transactions/TxList/TxInfoTransfer.tsx","routes/safe/components/Transactions/TxList/TxInfo.tsx","routes/safe/components/Transactions/TxList/assets/transactions-list-active.svg","routes/safe/components/Transactions/TxList/assets/transactions-list-inactive.svg","routes/safe/components/Transactions/TxList/OwnerRow.tsx","routes/safe/components/Transactions/TxList/TxOwners.tsx","routes/safe/components/Transactions/TxList/TxSummary.tsx","routes/safe/components/Transactions/TxList/TxDetails.tsx","routes/safe/components/Transactions/TxList/hooks/useTransactionDetails.ts","routes/safe/components/Transactions/TxList/TxInfoCreation.tsx","routes/safe/components/Transactions/TxList/TxHistoryRow.tsx","routes/safe/components/Transactions/TxList/HistoryTxList.tsx","routes/safe/components/Transactions/TxList/assets/no-transactions.svg","routes/safe/components/Transactions/TxList/HistoryTransactions.tsx","routes/safe/components/Transactions/TxList/modals/style.ts","logic/safe/store/models/confirmation.ts","routes/safe/components/Transactions/TxList/modals/ApproveTxModal.tsx","logic/safe/store/actions/processTransaction.ts","routes/safe/components/Transactions/TxList/modals/RejectTxModal.tsx","routes/safe/components/Transactions/TxList/ActionModal.tsx","routes/safe/components/Transactions/TxList/hooks/usePagedQueuedTransactions.ts","routes/safe/components/Transactions/TxList/hooks/useQueueTransactions.ts","routes/safe/components/Transactions/TxList/TxQueueCollapsed.tsx","routes/safe/components/Transactions/TxList/TxQueueRow.tsx","routes/safe/components/Transactions/TxList/QueueTxList.tsx","routes/safe/components/Transactions/TxList/QueueTransactions.tsx","routes/safe/components/Transactions/TxList/index.tsx"],"names":["setImageToPlaceholder","event","img","currentTarget","test","src","TokenPlaceholder","Bold","this","props","children","React","NO_CONTRACT","ensResolver","createDecorator","field","updates","contractAddress","a","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","resolvedAddress","console","error","message","formMutators","setMax","args","state","utils","changeValue","setContractAddress","setSelectedMethod","lastFormState","values","selectedMethod","name","setCallResults","setAbiValue","isAddress","type","indexOf","isBoolean","isUint","isInt","isByte","isArrayParameter","parameter","handleSubmitError","key","hasOwnProperty","undefined","value","reason","FORM_ERROR","generateFormFieldKey","signatureHash","index","keyType","extractMethodArgs","JSON","parse","map","Number","isInteger","BigNumber","toString","err","getParsedJSONOrArrayFromString","createTxObject","method","contract","getWeb3","eth","Contract","inputs","methods","isReadMethod","action","getValueFromTxInputs","tx","replace","String","isPromise","obj","then","tripleEquals","b","_len","arguments","length","calculations","Array","_key","form","previousValues","subscribe","_ref","batch","runUpdates","isEqual","next","getIn","previous","results","resolved","Object","keys","forEach","destField","change","result","update","fields","getRegisteredFields","_ref2","matches","isArray","findIndex","f","RegExp","fieldName","useStyles","makeStyles","createStyles","title","padding","lg","paddingBottom","hide","backgroundColor","visibility","actions","justifyContent","noBorderBottom","borderBottom","annotation","paddingLeft","ownersText","color","secondaryText","fontColor","container","actionButton","fontWeight","boldFont","marginRight","sm","buttonRow","left","bottom","boxSizing","width","borderTop","border","modifyBtn","height","xl","fontSize","smallFontSize","removeModuleIcon","marginLeft","cursor","modalHeading","modalContainer","minHeight","modalManage","modalClose","modalButtonRow","modalButtonRemove","modalName","textOverflow","overflow","modalUserName","whiteSpace","modalOwner","background","md","alignItems","modalUser","modalDescription","modalOpen","amountInput","gasCostsContainer","SpendingLimitRadioButtons","styled","RadioButtons","theme","colors","primary","StyledSwitch","rest","icon","hexToRgb","primaryLight","SafeRadioButtons","options","initialValue","groupName","input","onChange","onRadioChange","Switch","label","control","render","checked","ResetTimeLabel","div","ResetTimeToggle","ResetTimeOptions","RESET_TIME_OPTIONS","RINKEBY_RESET_TIME_OPTIONS","getResetTimeOptions","getNetworkName","toLowerCase","ResetTime","withResetTime","useField","subscription","resetTimeOptions","switchExplanation","size","Field","GnoField","AmountInput","TextField","SRCTextField","Amount","classes","tokenAddress","touched","visited","meta","selectedTokenRecord","useSelector","extendedSafeTokensSelector","find","token","address","validate","composeValidators","required","mustBeFloat","minValue","component","data-testid","endAdornment","symbol","className","DataDisplay","AddressInfo","addressBookEntryName","explorerUrl","getExplorerInfo","hash","sameString","ADDRESS_BOOK_DEFAULT_NAME","showCopyBtn","showAvatar","textSize","ResetTimeInfo","Row","align","margin","iconSize","iconType","text","StyledImage","StyledImageName","TokenInfo","amount","alt","onError","logoUri","useTokenInfo","tokens","safeKnownCoins","sameAddress","_interopRequireDefault","require","_interopRequireWildcard","defineProperty","exports","default","_default","createElement","d","usePagedHistoryTransactions","historyTxs","historyTransactions","useState","count","setCount","useEffect","history","entries","reduce","acc","transactions","useHistoryTransactions","dispatch","useRef","useDispatch","safeAddress","safeAddressFromUrl","hasMore","setHasMore","isLoading","setIsLoading","useCallback","loadPagedHistoryTransactions","current","content","Errors","_608","log","addHistoryTransactions","isTail","Wrapper","ContentWrapper","ColumnDisplayAccordionDetails","AccordionDetails","NoPaddingAccordion","Accordion","ActionAccordion","StyledTransactionsGroup","SubTitle","h2","Text","placeHolder","StyledTransactions","white","GroupedTransactionsCard","separator","inputField","gridColumns","nonce","info","time","votes","status","willBeReplaced","css","failedTransaction","onChainRejection","errorTooltip","StyledTransaction","join","StyledGroupedTransactions","slice","GroupedTransactions","DisclaimerContainer","TxDetailsContainer","errorHover","secondary","OwnerList","ul","OwnerListItem","li","InlineEthHashInfo","EthHashInfo","StyledScrollableBar","ScrollableTransactionsContainer","Centered","HorizontallyCentered","isVisible","StyledAccordionSummary","AccordionSummary","AlignItemsWithMargin","NoTransactions","ObserverMap","RootIds","rootId","optionsToId","root","observe","element","callback","id","instance","elements","observer","IntersectionObserver","inView","entry","thresholds","createObserver","callbacks","isPlainChildren","InView","node","_unobserveCb","handleNode","handleChange","componentDidUpdate","prevProps","componentWillUnmount","observeNode","threshold","rootMargin","trackVisibility","delay","unobserve","ref","as","tag","triggerOnce","initialInView","INFINITE_SCROLL_CONTAINER","InfiniteScrollContext","createContext","setLastItemId","InfiniteScrollProvider","forwardRef","lastItemId","_setLastItemId","Provider","itemId","setTimeout","displayName","InfiniteScroll","config","useInView","skip","setState","setRef","document","querySelector","TxsInfiniteScroll","defaultTokenTransferAsset","NOT_AVAILABLE","directionSign","amountWithSymbol","tokenType","useAssetInfo","txInfo","asset","setAsset","getTxAmount","isTransferTxInfo","direction","transferInfo","tokenName","nativeCoin","getNetworkInfo","isSettingsChangeTxInfo","isCustomTxInfo","useTransactionStatus","transaction","currentUser","userAccountSelector","setStatus","isStatusSuccess","txStatus","isStatusFailed","isStatusCancelled","isStatusWillBeReplaced","signaturePending","addressInList","executionInfo","missingSigners","useKnownAddress","addressInfo","recipientName","image","isAddressBook","useTransactionType","CustomTxIcon","setType","toAddress","getTxTo","knownAddress","toInfo","SettingsTxIcon","isSendTx","OutgoingTxIcon","IncomingTxIcon","dataDecoded","isCancellation","CircleCrossRed","safeAppInfo","logoUrl","fallbackIcon","CustomIconText","iconUrl","iconUrlFallback","showHash","avatarSize","customAvatar","customAvatarFallback","TxLocationContext","txLocation","setTxLocation","useTransactionActions","isUserAnOwner","grantedSelector","useContext","confirmationsSubmitted","confirmationsRequired","transactionsByNonce","getQueuedTransactionsByNonce","attributeName","attributeValue","canConfirm","canConfirmThenExecute","canExecute","canCancel","oneToGo","currentUserSigned","some","missingSigner","includes","prev","TransactionActionStateContext","selectedAction","actionSelected","transactionId","selectAction","Promise","resolve","TxActionProvider","setSelectedAction","fetchTransactionDetails","TxHoverContext","activeHover","setActiveHover","TxHoverProvider","useActionButtonsHandlers","actionContext","hoverContext","locationContext","handleConfirmButtonClick","stopPropagation","txDetails","detailedExecutionInfo","details","confirmations","enqueueSnackbar","NOTIFICATIONS","TX_FETCH_SIGNATURES_ERROR_MSG","handleCancelButtonClick","handleOnMouseEnter","handleOnMouseLeave","isPending","useMemo","match","disabledActions","IconButton","MuiIconButton","TxCollapsedActions","currentSafeNonce","getTitle","placement","onClick","disabled","onMouseEnter","onMouseLeave","AmountWrapper","TokenTransferAmount","assetInfo","Img","onerror","NFTIcon","TxInfo","settingsInfo","disableInfo","KNOWN_MODULES","module","isMultiSendTxInfo","actionCount","methodName","CircularProgressPainter","SmallDot","Dot","IconText","IconTextSrc","TooltipContent","TxCollapsed","isGrouped","TxsInfiniteScrollContext","isCancelTxDetails","txCollapsedNonce","txCollapsedType","txCollapsedInfo","timestamp","txCollapsedTime","formatDateTime","arrow","formatTime","formatTimeInWords","txCollapsedVotes","submitted","txCollapsedActions","txCollapsedStatus","strong","TxHistoryCollapsed","isSetAllowance","isDeleteAllowance","SpendingLimitRow","ModifySpendingLimitDetails","data","parameters","beneficiary","resetTimeMin","resetTimeLabel","tokenInfo","fromTokenUnit","decimals","DeleteSpendingLimitDetails","Divider","_props$absolute","absolute","_props$component","Component","_props$flexItem","flexItem","_props$light","light","_props$orientation","orientation","_props$role","role","_props$variant","variant","other","_objectWithoutProperties","_extends","clsx","vertical","withStyles","flexShrink","palette","divider","position","inset","fade","middle","spacing","alignSelf","display","xs","borderRadius","transition","outline","increasedPopperZindex","zIndex","EllipsisTransactionDetails","sendModalOpenHandler","anchorEl","setAnchorEl","currentSafeAddress","isOwnerConnected","isStoredInAddressBook","handleClick","closeMenuHandler","addOrEditEntryHandler","addressBookPath","generatePath","SAFE_ROUTES","ADDRESS_BOOK","push","ClickAwayListener","onClickAway","tabIndex","onKeyDown","Menu","keepMounted","onClose","open","Boolean","MenuItem","avatarUrl","InfoDetails","SingleRow","TxInfoDetails","isTransferType","canRepeatTransaction","sendModalOpen","setSendModalOpen","activeScreenType","recipientAddress","selectedToken","ZERO_ADDRESS","tokenAmount","sendModalParams","setSendModalParams","isCollectible","getTxTokenData","SendModal","isOpen","styles","txDataParagraph","linkTxData","textDecoration","HexEncodedData","hexData","limit","showTxData","setShowTxData","showExpandBtn","shortener","textShortener","charsStart","charsEnd","Paragraph","noMargin","Link","aria-label","rel","target","NestedWrapper","GenericValue","getTextValue","getArrayValue","parentId","currentValue","Value","shortenHash","TxDetailsMethodParam","StyledMethodName","MethodDetails","param","MultiSendTxGroup","actionTitle","MultiSendDetails","txData","valueDecoded","valuesDecoded","to","DetailsWithTxInfo","TxData","TxExpandedActions","getConfirmTooltipTitle","TxInfoSettings","handler","owner","oldOwner","newOwner","implementation","TxInfoTransfer","setDetails","sender","recipient","OwnerRow","ownerName","StyledImg","TxOwners","isModuleExecutionDetails","confirmationsNeeded","CreationNode","signer","executor","TransactionListActive","TransactionListInactive","TxSummary","txHash","executedAt","isMultiSigExecutionDetails","created","submittedAt","safeTxHash","operation","Operation","DELEGATE","NormalBreakingText","TxDataGroup","txNonce","isTxExecuted","href","TxDetails","loading","setTxDetails","getTransactionDetails","useTransactionDetails","cn","TxInfoCreation","transactionHash","creator","factory","TxHistoryRow","TransitionProps","mountOnEnter","unmountOnExit","appear","isCreationTxInfo","HistoryTxList","lastTransactionsGroup","lastTransaction","txs","formatWithSchema","HistoryTransactions","NoTransactionsImage","heading","headingText","closeIcon","nonceNumber","marginTop","makeConfirmation","Record","signature","ApproveTxModal","isCancelTx","userAddress","approveAndExecute","setApproveAndExecute","thresholdReached","_threshold","_countingCurrentConfirmation","modalInfo","description","getModalTitleAndDescription","oneConfirmationLeft","isTheTxReadyToBeExecuted","manualGasPrice","setManualGasPrice","manualGasLimit","setManualGasLimit","t","List","EMPTY_DATA","baseGas","gasPrice","safeTxGas","gasToken","refundReceiver","CALL","origin","stringify","url","useTxInfo","useEstimateTransactionGas","txRecipient","txConfirmations","txAmount","preApprovingOwner","gasLimit","gasPriceFormatted","gasCostFormatted","txEstimationExecutionStatus","isExecution","isOffChainSignature","isCreation","useEstimationStatus","buttonStatus","handleExecuteCheckbox","prevApproveAndExecute","approveTx","txParameters","notifiedTransaction","ethParameters","getState","providerSelector","from","account","hardwareWallet","smartContractWallet","safeVersion","currentSafeCurrentVersion","safeInstance","getGnosisSafeInstanceAt","getLastTx","lastTx","getNewTxNonce","shouldExecuteTransaction","sigs","generateSignaturesFromTxConfirmations","getPreValidatedSignatures","notificationsQueue","getNotificationsFromTxType","beforeExecutionKey","beforeExecution","txArgs","valueInWei","checkIfOffChainSignatureIsPossible","tryOffChainSigning","closeSnackbarAction","updateTransactionStatus","TransactionStatus","PENDING","saveTxToHistory","fetchTransactions","getExecutionTransaction","getApprovalTransaction","sendParams","gas","ethGasLimit","ethGasPriceInGWei","ethNonce","send","once","aboutToExecuteTx","on","PENDING_FAILED","receipt","fetchSafe","notification","isTxPendingError","TX_PENDING_MSG","afterExecutionError","code","logError","_804","executeData","approveHash","encodeABI","getErrorMessage","errMsg","processTransaction","TX_NOTIFICATION_TYPES","CONFIRMATION_TX","getParametersStatus","Modal","handleClose","EditableTxParameters","parametersStatus","ethGasPrice","safeNonce","closeEditModalCallback","oldGasPrice","newGasPrice","toggleEditMode","grow","weight","disableRipple","Hairline","Block","style","flexDirection","FormControlLabel","Checkbox","TxParametersDetail","onEdit","isTransactionCreation","isTransactionExecution","EstimationStatus","LOADING","Footer","withoutBorder","ButtonStatus","Buttons","cancelButtonProps","confirmButtonProps","testId","RejectTxModal","gwTransaction","confirmButtonStatus","READY","confirmButtonText","createTransaction","CANCELLATION_TX","navigateToTransactionsTab","sendReplacementTransaction","ActionModal","useTransactionParameters","getTransactionByAttribute","usePagedQueuedTransactions","nextTxs","nextTransactions","queuedTxs","queuedTransactions","txsCount","setTxsCount","queued","queue","useQueueTransactions","nextPage","loadPagedQueuedTransactions","addQueuedTransactions","TxQueueCollapsed","calculateVotes","TxQueueRow","setTx","currTx","WILL_BE_REPLACED","TreeView","firstElement","Disclaimer","QueueTransaction","QueueTxList","QueueTransactions","items","GatewayTransactions","tab","setTab","trackEvent","useAnalytics","category","SAFE_NAVIGATION_EVENT","Col","start","selectedTab"],"mappings":"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","file":"static/js/46.4274deaf.chunk.js","sourcesContent":["import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render() {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import { FORM_ERROR, Mutator, SubmissionErrors } from 'final-form'\nimport createDecorator from 'final-form-calculate'\nimport { ContractSendMethod } from 'web3-eth-contract'\n\nimport { AbiItemExtended } from 'src/logic/contractInteraction/sources/ABIService'\nimport { getAddressFromDomain, getWeb3 } from 'src/logic/wallets/getWeb3'\nimport { TransactionReviewType } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/Review'\nimport { isValidCryptoDomainName, isValidEnsName } from 'src/logic/wallets/ethAddresses'\nimport { BigNumber } from 'bignumber.js'\n\nexport const NO_CONTRACT = 'no contract'\n\nexport const ensResolver = createDecorator({\n  field: 'contractAddress',\n  updates: {\n    contractAddress: async (contractAddress) => {\n      try {\n        const resolvedAddress =\n          (isValidEnsName(contractAddress) || isValidCryptoDomainName(contractAddress)) &&\n          (await getAddressFromDomain(contractAddress))\n\n        if (resolvedAddress) {\n          return resolvedAddress\n        }\n\n        return contractAddress\n      } catch (e) {\n        console.error(e.message)\n        return contractAddress\n      }\n    },\n  },\n})\n\nexport const formMutators: Record<string, Mutator<{ selectedMethod: { name: string } }>> = {\n  setMax: (args, state, utils) => {\n    utils.changeValue(state, 'value', () => args[0])\n  },\n  setContractAddress: (args, state, utils) => {\n    utils.changeValue(state, 'contractAddress', () => args[0])\n  },\n  setSelectedMethod: (args, state, utils) => {\n    const modified =\n      state.lastFormState?.values.selectedMethod && state.lastFormState.values.selectedMethod.name !== args[0].name\n\n    if (modified) {\n      utils.changeValue(state, 'callResults', () => '')\n      utils.changeValue(state, 'value', () => '')\n    }\n\n    utils.changeValue(state, 'selectedMethod', () => args[0])\n  },\n  setCallResults: (args, state, utils) => {\n    utils.changeValue(state, 'callResults', () => args[0])\n  },\n  setAbiValue: (args, state, utils) => {\n    utils.changeValue(state, 'abi', () => args[0])\n  },\n}\n\nexport const isAddress = (type: string): boolean => type.indexOf('address') === 0\nexport const isBoolean = (type: string): boolean => type.indexOf('bool') === 0\nexport const isString = (type: string): boolean => type.indexOf('string') === 0\nexport const isUint = (type: string): boolean => type.indexOf('uint') === 0\nexport const isInt = (type: string): boolean => type.indexOf('int') === 0\nexport const isByte = (type: string): boolean => type.indexOf('byte') === 0\n\nexport const isArrayParameter = (parameter: string): boolean => /(\\[\\d*])+$/.test(parameter)\nexport const getParsedJSONOrArrayFromString = (parameter: string): (string | number)[] | null => {\n  try {\n    const arrayResult = JSON.parse(parameter)\n    return arrayResult.map((value) => {\n      if (Number.isInteger(value)) {\n        return new BigNumber(value).toString()\n      }\n      return value\n    })\n  } catch (err) {\n    return null\n  }\n}\n\nexport const handleSubmitError = (error: SubmissionErrors, values: Record<string, string>): Record<string, string> => {\n  for (const key in values) {\n    if (values.hasOwnProperty(key) && error !== undefined && values[key] === error.value) {\n      return { [key]: error.reason }\n    }\n  }\n\n  // .call() failed and we're logging a generic error\n  return { [FORM_ERROR]: error ? error.message : undefined }\n}\n\nexport const generateFormFieldKey = (type: string, signatureHash: string, index: number): string => {\n  const keyType = isArrayParameter(type) ? 'arrayParam' : type\n  return `methodInput-${signatureHash}_${index}_${keyType}`\n}\n\nconst extractMethodArgs =\n  (signatureHash: string, values: Record<string, string>) =>\n  ({ type }, index) => {\n    const key = generateFormFieldKey(type, signatureHash, index)\n\n    return getParsedJSONOrArrayFromString(values[key]) || values[key]\n  }\n\nexport const createTxObject = (\n  method: AbiItemExtended,\n  contractAddress: string,\n  values: Record<string, string>,\n): ContractSendMethod => {\n  const web3 = getWeb3()\n  const contract = new web3.eth.Contract([method], contractAddress)\n  const { inputs, name = '', signatureHash } = method\n  const args = inputs?.map(extractMethodArgs(signatureHash, values)) || []\n\n  return contract.methods[name](...args)\n}\n\nexport const isReadMethod = (method: AbiItemExtended): boolean => method && method.action === 'read'\n\nexport const getValueFromTxInputs = (key: string, type: string, tx: TransactionReviewType): string => {\n  if (isArrayParameter(type)) {\n    key = key.replace('[]', '')\n  }\n\n  let value = tx[key]\n\n  if (type === 'bool') {\n    value = String(value)\n  }\n\n  return value\n}\n","import { getIn } from 'final-form';\n\nvar isPromise = (function (obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n});\n\n//      \n\nvar tripleEquals = function tripleEquals(a, b) {\n  return a === b;\n};\n\nvar createDecorator = function createDecorator() {\n  for (var _len = arguments.length, calculations = new Array(_len), _key = 0; _key < _len; _key++) {\n    calculations[_key] = arguments[_key];\n  }\n\n  return function (form) {\n    var previousValues = {};\n    var unsubscribe = form.subscribe(function (_ref) {\n      var values = _ref.values;\n      form.batch(function () {\n        var runUpdates = function runUpdates(field, isEqual, updates) {\n          var next = values && getIn(values, field);\n          var previous = previousValues && getIn(previousValues, field);\n\n          if (!isEqual(next, previous)) {\n            if (typeof updates === 'function') {\n              var results = updates(next, field, values, previousValues);\n\n              if (isPromise(results)) {\n                results.then(function (resolved) {\n                  Object.keys(resolved).forEach(function (destField) {\n                    form.change(destField, resolved[destField]);\n                  });\n                });\n              } else {\n                Object.keys(results).forEach(function (destField) {\n                  form.change(destField, results[destField]);\n                });\n              }\n            } else {\n              Object.keys(updates).forEach(function (destField) {\n                var update = updates[destField];\n                var result = update(next, values, previousValues);\n\n                if (isPromise(result)) {\n                  result.then(function (resolved) {\n                    form.change(destField, resolved);\n                  });\n                } else {\n                  form.change(destField, result);\n                }\n              });\n            }\n          }\n        };\n\n        var fields = form.getRegisteredFields();\n        calculations.forEach(function (_ref2) {\n          var field = _ref2.field,\n              isEqual = _ref2.isEqual,\n              updates = _ref2.updates;\n\n          if (typeof field === 'string') {\n            runUpdates(field, isEqual || tripleEquals, updates);\n          } else {\n            // field is a either array or regex\n            var matches = Array.isArray(field) ? function (name) {\n              return ~field.indexOf(name) || field.findIndex(function (f) {\n                return f instanceof RegExp && f.test(name);\n              }) !== -1;\n            } : function (name) {\n              return field.test(name);\n            };\n            fields.forEach(function (fieldName) {\n              if (matches(fieldName)) {\n                runUpdates(fieldName, isEqual || tripleEquals, updates);\n              }\n            });\n          }\n        });\n        previousValues = values;\n      });\n    }, {\n      values: true\n    });\n    return unsubscribe;\n  };\n};\n\n//\n\nexport default createDecorator;\n","import { createStyles, makeStyles } from '@material-ui/core'\nimport {\n  background,\n  boldFont,\n  border,\n  error,\n  fontColor,\n  lg,\n  md,\n  secondaryText,\n  sm,\n  smallFontSize,\n  xl,\n} from 'src/theme/variables'\n\nexport const useStyles = makeStyles(\n  createStyles({\n    title: {\n      padding: lg,\n      paddingBottom: 0,\n    },\n    hide: {\n      '&:hover': {\n        backgroundColor: '#f7f5f5',\n      },\n      '&:hover $actions': {\n        visibility: 'initial',\n      },\n    },\n    actions: {\n      justifyContent: 'flex-end',\n      visibility: 'hidden',\n    },\n    noBorderBottom: {\n      '& > td': {\n        borderBottom: 'none',\n      },\n    },\n    annotation: {\n      paddingLeft: lg,\n    },\n    ownersText: {\n      color: secondaryText,\n      '& b': {\n        color: fontColor,\n      },\n    },\n    container: {\n      padding: lg,\n    },\n    actionButton: {\n      fontWeight: boldFont,\n      marginRight: sm,\n    },\n    buttonRow: {\n      padding: lg,\n      left: 0,\n      bottom: 0,\n      boxSizing: 'border-box',\n      width: '100%',\n      justifyContent: 'flex-end',\n      borderTop: `2px solid ${border}`,\n    },\n    modifyBtn: {\n      height: xl,\n      fontSize: smallFontSize,\n    },\n    removeModuleIcon: {\n      marginLeft: lg,\n      cursor: 'pointer',\n    },\n    modalHeading: {\n      boxSizing: 'border-box',\n      justifyContent: 'space-between',\n      height: '74px',\n      padding: `${sm} ${lg}`,\n    },\n    modalContainer: {\n      minHeight: '369px',\n    },\n    modalManage: {\n      fontSize: lg,\n    },\n    modalClose: {\n      height: '35px',\n      width: '35px',\n    },\n    modalButtonRow: {\n      height: '84px',\n      justifyContent: 'center',\n    },\n    modalButtonRemove: {\n      color: '#fff',\n      backgroundColor: error,\n      height: '42px',\n    },\n    modalName: {\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n    },\n    modalUserName: {\n      whiteSpace: 'nowrap',\n    },\n    modalOwner: {\n      backgroundColor: background,\n      padding: md,\n      alignItems: 'center',\n    },\n    modalUser: {\n      justifyContent: 'left',\n    },\n    modalDescription: {\n      padding: md,\n    },\n    modalOpen: {\n      paddingLeft: sm,\n      width: 'auto',\n      '&:hover': {\n        cursor: 'pointer',\n      },\n    },\n    amountInput: {\n      width: '100% !important',\n    },\n    gasCostsContainer: {\n      backgroundColor: background,\n      padding: `0 ${lg}`,\n    },\n  }),\n)\n","import { RadioButtons, Text } from '@gnosis.pm/safe-react-components'\nimport { FormControlLabel, hexToRgb, Switch as SwitchMui } from '@material-ui/core'\nimport React, { ReactElement } from 'react'\nimport { useField } from 'react-final-form'\nimport styled from 'styled-components'\n\nimport { getNetworkName } from 'src/config'\nimport { Field } from 'src/routes/safe/components/Settings/SpendingLimit/FormFields/Amount'\n\n// TODO: propose refactor in safe-react-components based on this requirements\nconst SpendingLimitRadioButtons = styled(RadioButtons)`\n  & .MuiRadio-colorPrimary.Mui-checked {\n    color: ${({ theme }) => theme.colors.primary};\n  }\n`\n\n// TODO: add `name` and `value` to SRC Switch, as they're required for a better RFF integration\nconst StyledSwitch = styled(({ ...rest }) => <SwitchMui {...rest} />)`\n  && {\n    .MuiIconButton-label,\n    .MuiSwitch-colorSecondary {\n      color: ${({ theme }) => theme.colors.icon};\n    }\n\n    .MuiSwitch-colorSecondary.Mui-checked .MuiIconButton-label {\n      color: ${({ theme }) => theme.colors.primary};\n    }\n\n    .MuiSwitch-colorSecondary.Mui-checked:hover {\n      background-color: ${({ theme }) => hexToRgb(`${theme.colors.primary}03`)};\n    }\n\n    .Mui-checked + .MuiSwitch-track {\n      background-color: ${({ theme }) => theme.colors.primaryLight};\n    }\n  }\n`\n\ninterface RadioButtonOption {\n  label: string\n  value: string\n}\n\ninterface RadioButtonProps {\n  options: RadioButtonOption[]\n  initialValue: string\n  groupName: string\n}\n\nconst SafeRadioButtons = ({ options, initialValue, groupName }: RadioButtonProps): ReactElement => (\n  <Field name={groupName} initialValue={initialValue}>\n    {({ input: { name, value, onChange } }) => (\n      <SpendingLimitRadioButtons name={name} value={value || initialValue} onRadioChange={onChange} options={options} />\n    )}\n  </Field>\n)\n\nconst Switch = ({ label, name }: { label: string; name: string }): ReactElement => (\n  <FormControlLabel\n    label={label}\n    control={\n      <Field\n        name={name}\n        type=\"checkbox\"\n        render={({ input: { checked, onChange, name, value } }) => (\n          <StyledSwitch checked={checked} onChange={onChange} name={name} value={value} />\n        )}\n      />\n    }\n  />\n)\n\nconst ResetTimeLabel = styled.div`\n  grid-area: resetTimeLabel;\n`\n\nconst ResetTimeToggle = styled.div`\n  grid-area: resetTimeToggle;\n`\n\nconst ResetTimeOptions = styled.div`\n  grid-area: resetTimeOption;\n`\n\nconst RESET_TIME_OPTIONS = [\n  { label: '1 day', value: '1440' }, // 1 day x 24h x 60min\n  { label: '1 week', value: '10080' }, // 7 days x 24h x 60min\n  { label: '1 month', value: '43200' }, // 30 days x 24h x 60min\n]\n\nconst RINKEBY_RESET_TIME_OPTIONS = [\n  { label: '5 minutes', value: '5' },\n  { label: '30 minutes', value: '30' },\n  { label: '1 hour', value: '60' },\n]\n\nexport const getResetTimeOptions = (): RadioButtonOption[] => {\n  const currentNetwork = getNetworkName().toLowerCase()\n  return currentNetwork !== 'rinkeby' ? RESET_TIME_OPTIONS : RINKEBY_RESET_TIME_OPTIONS\n}\n\nconst ResetTime = (): ReactElement => {\n  const {\n    input: { value: withResetTime },\n  } = useField('withResetTime', { subscription: { value: true } })\n\n  const resetTimeOptions = getResetTimeOptions()\n\n  const switchExplanation = withResetTime ? 'choose reset time period' : 'one time'\n\n  return (\n    <>\n      <ResetTimeLabel>\n        <Text size=\"xl\">Set a reset time so the allowance automatically refills after the defined time period.</Text>\n      </ResetTimeLabel>\n      <ResetTimeToggle>\n        <Switch label={`Reset time (${switchExplanation})`} name=\"withResetTime\" />\n      </ResetTimeToggle>\n      {withResetTime && (\n        <ResetTimeOptions>\n          <SafeRadioButtons groupName=\"resetTime\" initialValue={resetTimeOptions[0].value} options={resetTimeOptions} />\n        </ResetTimeOptions>\n      )}\n    </>\n  )\n}\n\nexport default ResetTime\n","import { TextField as SRCTextField } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\nimport { useField } from 'react-final-form'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport GnoField from 'src/components/forms/Field'\nimport { composeValidators, minValue, mustBeFloat, required } from 'src/components/forms/validator'\nimport { extendedSafeTokensSelector } from 'src/routes/safe/container/selector'\nimport { useStyles } from 'src/routes/safe/components/Settings/SpendingLimit/style'\n\nexport const Field = styled(GnoField)`\n  margin: 8px 0;\n  width: 100%;\n`\n\nconst AmountInput = styled.div`\n  grid-area: amountInput;\n`\n\nconst TextField = styled(SRCTextField)`\n  margin: 0;\n`\n\nconst Amount = (): ReactElement => {\n  const classes = useStyles()\n\n  const {\n    input: { value: tokenAddress },\n  } = useField('token', { subscription: { value: true } })\n  const {\n    meta: { touched, visited },\n  } = useField('amount', { subscription: { touched: true, visited: true } })\n\n  const tokens = useSelector(extendedSafeTokensSelector)\n\n  const selectedTokenRecord = tokens.find((token) => token.address === tokenAddress)\n\n  const validate = (touched || visited) && composeValidators(required, mustBeFloat, minValue(0, false))\n\n  return (\n    <AmountInput>\n      <Field\n        component={TextField}\n        label=\"Amount*\"\n        name=\"amount\"\n        type=\"text\"\n        data-testid=\"amount-input\"\n        endAdornment={selectedTokenRecord?.symbol}\n        className={classes.amountInput}\n        validate={validate}\n      />\n    </AmountInput>\n  )\n}\n\nexport default Amount\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\n\ninterface GenericInfoProps {\n  title?: string\n  children: React.ReactNode\n}\n\nconst DataDisplay = ({ title, children }: GenericInfoProps): ReactElement => (\n  <>\n    {title && (\n      <Text size=\"md\" color=\"secondaryLight\">\n        {title}\n      </Text>\n    )}\n    {children}\n  </>\n)\n\nexport default DataDisplay\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { getExplorerInfo } from 'src/config'\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\nimport { sameString } from 'src/utils/strings'\n\nimport DataDisplay from './DataDisplay'\n\ninterface AddressInfoProps {\n  address: string\n  title?: string\n}\n\nconst AddressInfo = ({ address, title }: AddressInfoProps): ReactElement => {\n  const name = useSelector((state) => addressBookEntryName(state, { address }))\n  const explorerUrl = getExplorerInfo(address)\n\n  return (\n    <DataDisplay title={title}>\n      <EthHashInfo\n        hash={address}\n        name={sameString(name, ADDRESS_BOOK_DEFAULT_NAME) ? undefined : name}\n        showCopyBtn\n        showAvatar\n        textSize=\"lg\"\n        explorerUrl={explorerUrl}\n      />\n    </DataDisplay>\n  )\n}\n\nexport default AddressInfo\n","import { IconText, Text } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\n\nimport Row from 'src/components/layout/Row'\n\nimport DataDisplay from './DataDisplay'\n\ninterface ResetTimeInfoProps {\n  title?: string\n  label?: string\n}\n\nconst ResetTimeInfo = ({ title, label }: ResetTimeInfoProps): ReactElement => {\n  return (\n    <DataDisplay title={title}>\n      {label ? (\n        <Row align=\"center\" margin=\"md\">\n          <IconText iconSize=\"md\" iconType=\"fuelIndicator\" text={label} textSize=\"lg\" />\n        </Row>\n      ) : (\n        <Row align=\"center\" margin=\"md\">\n          <Text size=\"lg\">One-time spending limit</Text>\n        </Row>\n      )}\n    </DataDisplay>\n  )\n}\n\nexport default ResetTimeInfo\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport { Token } from 'src/logic/tokens/store/model/token'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\n\nimport DataDisplay from './DataDisplay'\n\nconst StyledImage = styled.img`\n  width: 32px;\n  height: 32px;\n  object-fit: contain;\n  margin: 0 8px 0 0;\n`\nconst StyledImageName = styled.div`\n  display: flex;\n  align-items: center;\n`\n\ninterface TokenInfoProps {\n  amount: string\n  title?: string\n  token: Token\n}\n\nconst TokenInfo = ({ amount, title, token }: TokenInfoProps): ReactElement => {\n  return (\n    <DataDisplay title={title}>\n      <StyledImageName>\n        <StyledImage alt={token.name} onError={setImageToPlaceholder} src={token.logoUri || ''} />\n        <Text size=\"lg\">\n          {amount} {token.symbol}\n        </Text>\n      </StyledImageName>\n    </DataDisplay>\n  )\n}\n\nexport default TokenInfo\n","import { useSelector } from 'react-redux'\n\nimport { Token } from 'src/logic/tokens/store/model/token'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { safeKnownCoins } from 'src/routes/safe/container/selector'\n\nconst useTokenInfo = (address: string): Token | undefined => {\n  const tokens = useSelector(safeKnownCoins)\n\n  if (tokens) {\n    return tokens.find((token) => sameAddress(token.address, address))\n  }\n}\n\nexport default useTokenInfo\n","export default __webpack_public_path__ + \"static/media/custom.6f7b401c.svg\";","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n}), 'MoreHoriz');\n\nexports.default = _default;","import { useCallback, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { loadPagedHistoryTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\nimport { addHistoryTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { safeAddressFromUrl } from 'src/logic/safe/store/selectors'\nimport { useHistoryTransactions } from 'src/routes/safe/components/Transactions/TxList/hooks/useHistoryTransactions'\nimport { Errors } from 'src/logic/exceptions/CodedException'\nimport { Await } from 'src/types/helpers'\n\ntype PagedTransactions = {\n  count: number\n  transactions: TransactionDetails['transactions']\n  hasMore: boolean\n  next: () => Promise<void>\n  isLoading: boolean\n}\n\nexport const usePagedHistoryTransactions = (): PagedTransactions => {\n  const { count, transactions } = useHistoryTransactions()\n\n  const dispatch = useRef(useDispatch())\n  const safeAddress = useRef(useSelector(safeAddressFromUrl))\n  const [hasMore, setHasMore] = useState(true)\n  const [isLoading, setIsLoading] = useState(false)\n\n  const next = useCallback(async () => {\n    setIsLoading(true)\n\n    let results: Await<ReturnType<typeof loadPagedHistoryTransactions>>\n    try {\n      results = await loadPagedHistoryTransactions(safeAddress.current)\n    } catch (e) {\n      // No next page\n      if (e.content !== Errors._608) {\n        e.log()\n      }\n    }\n\n    if (!results) {\n      setHasMore(false)\n      setIsLoading(false)\n      return\n    }\n\n    const { values, next } = results\n\n    if (next === null) {\n      setHasMore(false)\n    }\n\n    if (values) {\n      dispatch.current(addHistoryTransactions({ safeAddress: safeAddress.current, values, isTail: true }))\n    } else {\n      setHasMore(false)\n    }\n    setIsLoading(false)\n  }, [])\n\n  return { count, transactions, hasMore, next, isLoading }\n}\n","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { historyTransactions } from 'src/logic/safe/store/selectors/gatewayTransactions'\n\nexport const useHistoryTransactions = (): TransactionDetails => {\n  const historyTxs = useSelector(historyTransactions)\n  const [count, setCount] = useState(0)\n\n  useEffect(() => {\n    const history = historyTxs\n      ? Object.entries(historyTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\n      : 0\n    setCount(history)\n  }, [historyTxs])\n\n  return {\n    count,\n    transactions: historyTxs ? Object.entries(historyTxs) : [],\n  }\n}\n","import { Text, Accordion, AccordionDetails, AccordionSummary, EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled, { css } from 'styled-components'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`\n\nexport const ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n  align-items: center;\n`\n\nexport const ColumnDisplayAccordionDetails = styled(AccordionDetails)`\n  flex-flow: column;\n`\n\nexport const NoPaddingAccordion = styled(Accordion)`\n  &.MuiAccordion-root {\n    background-color: transparent;\n\n    .MuiAccordionDetails-root {\n      padding: 0;\n    }\n  }\n`\n\nexport const ActionAccordion = styled(Accordion)`\n  &.MuiAccordion-root {\n    &:first-child {\n      border-top: none;\n    }\n\n    &.Mui-expanded {\n      &:last-child {\n        border-bottom: none;\n      }\n    }\n\n    .MuiAccordionDetails-root {\n      padding: 16px;\n    }\n  }\n`\n\nexport const StyledTransactionsGroup = styled.div`\n  align-items: flex-start;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  margin: 16px 8px;\n  width: 98%;\n`\n\nexport const H2 = styled.h2`\n  text-transform: uppercase;\n  font-size: smaller;\n`\n\nexport const SubTitle = styled(Text)`\n  margin-bottom: 8px;\n\n  font-size: 0.76em;\n  font-weight: 600;\n  line-height: 1.5;\n  letter-spacing: 1px;\n  color: ${({ theme }) => theme.colors.placeHolder};\n  text-transform: uppercase;\n`\n\nexport const StyledTransactions = styled.div`\n  background-color: ${({ theme }) => theme.colors.white};\n  border-radius: 8px;\n  box-shadow: #00000026 0 4px 12px 0;\n  overflow: hidden;\n  width: 100%;\n\n  & > .MuiAccordion-root {\n    &:first-child {\n      border-top: none;\n    }\n\n    &:last-child {\n      border-bottom: none;\n    }\n  }\n`\n\nexport const GroupedTransactionsCard = styled(StyledTransactions)`\n  transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n  background-color: transparent;\n  border-radius: 0;\n  box-shadow: none;\n\n  &:not(:last-child) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n  }\n\n  .MuiAccordion-root,\n  .MuiAccordionSummary-root,\n  .MuiAccordionDetails-root {\n    background-color: transparent;\n\n    &:hover,\n    &.Mui-expanded {\n      background-color: transparent;\n    }\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    .MuiAccordionDetails-root {\n      div[class^='tx-'] {\n        background-color: ${({ theme }) => theme.colors.background};\n      }\n    }\n\n    .disclaimer-container {\n      background-color: ${({ theme }) => theme.colors.inputField};\n    }\n  }\n`\nconst gridColumns = {\n  nonce: '0.5fr',\n  type: '3fr',\n  info: '3fr',\n  time: '2.5fr',\n  votes: '1.5fr',\n  actions: '1fr',\n  status: '2.5fr',\n}\n\nconst willBeReplaced = css`\n  .will-be-replaced * {\n    color: gray !important;\n    text-decoration: line-through !important;\n    filter: grayscale(1) opacity(0.8) !important;\n  }\n`\n\nconst failedTransaction = css`\n  &.failed-transaction {\n    div[class^='tx-']:not(.tx-status):not(.tx-nonce) {\n      opacity: 0.5;\n    }\n  }\n`\n\nconst onChainRejection = css`\n  &.on-chain-rejection {\n    background-color: ${({ theme }) => theme.colors.errorTooltip};\n    border-left: 4px solid ${({ theme }) => theme.colors.error};\n    border-radius: 4px;\n    padding-left: 7px;\n    height: 22px;\n    max-width: 165px;\n\n    > div {\n      height: 17px;\n      align-items: center;\n      padding-top: 3px;\n    }\n\n    p {\n      font-size: 11px;\n      line-height: 16px;\n      letter-spacing: 1px;\n      font-weight: bold;\n      text-transform: uppercase;\n      margin-left: -2px;\n    }\n  }\n`\n\nexport const StyledTransaction = styled.div`\n  ${willBeReplaced};\n  ${failedTransaction};\n\n  display: grid;\n  grid-template-columns: ${Object.values(gridColumns).join(' ')};\n  width: 100%;\n\n  & > div {\n    align-self: center;\n  }\n\n  .tx-type {\n    ${onChainRejection};\n  }\n\n  .tx-votes {\n    justify-self: center;\n  }\n\n  .tx-actions {\n    visibility: hidden;\n    justify-self: end;\n  }\n\n  .tx-status {\n    justify-self: end;\n    margin-right: 8px;\n    display: flex;\n    flex-flow: row nowrap;\n    align-items: center;\n    justify-content: end;\n\n    p {\n      margin-left: 8px;\n    }\n  }\n\n  &:hover {\n    .tx-actions {\n      visibility: visible;\n\n      &.will-be-replaced {\n        visibility: hidden;\n      }\n    }\n  }\n`\n\nexport const StyledGroupedTransactions = styled(StyledTransaction)`\n  // no \\`tx-nonce\\` column required\n  grid-template-columns: ${Object.values(gridColumns).slice(1).join(' ')};\n`\n\nexport const GroupedTransactions = styled(StyledTransaction)`\n  // add a bottom division line for all elements but the last\n  &:not(:last-of-type) {\n    border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n  }\n\n  // builds the tree-view layout\n  .tree-lines {\n    height: 100%;\n    margin-left: 30px;\n    position: relative;\n    width: 30%;\n\n    // this is a special case, the first element in the list needs to have a block child component\n    // add tree lines line to the first item of the list\n    .first-node {\n      display: block;\n      position: absolute;\n      top: -16px;\n      width: 100%;\n\n      &::before {\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n        border-left: 2px solid ${({ theme }) => theme.colors.separator};\n        content: '';\n        height: 22px;\n        position: absolute;\n        top: 8px;\n        width: 100%;\n      }\n    }\n\n    // add tree lines to all elements of the list (except for the last one)\n    // :last-of-type won't work with classes selector (HTML elements only)\n    // as we need block-level elements, we're using paragraphs for .tree-lines and .first-node\n    // given that divs are already being used for the transaction row, and both (p and div) are siblings\n    &:not(:last-of-type) {\n      &::before {\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n        border-left: 2px solid ${({ theme }) => theme.colors.separator};\n        content: '';\n        height: 100%;\n        margin-top: 14px;\n        position: absolute;\n        width: 100%;\n      }\n    }\n  }\n\n  // overrides Accordion styles, as grouped txs behave differently\n  > .MuiAccordion-root {\n    transition: none;\n    border: 0;\n    grid-column-end: span 6;\n    grid-column-start: 2;\n\n    &:first-child {\n      border: 0;\n    }\n\n    &.Mui-expanded {\n      justify-self: center;\n      width: calc(100% - 32px);\n\n      &:not(:last-of-type) {\n        border-bottom: 2px solid ${({ theme }) => theme.colors.separator};\n      }\n\n      &:not(:first-of-type) {\n        border-top: 2px solid ${({ theme }) => theme.colors.separator};\n        // if two consecutive accordions are expanded, borders will get duplicated\n        // this rule is to overlap them\n        margin-top: -2px;\n      }\n\n      > .MuiAccordionSummary-root {\n        padding: 0;\n      }\n    }\n  }\n}\n`\n\nexport const DisclaimerContainer = styled(StyledTransaction)`\n  background-color: ${({ theme }) => theme.colors.inputField} !important;\n  border-radius: 4px;\n  margin: 12px 8px 0 12px;\n  padding: 8px 12px;\n  width: calc(100% - 48px);\n\n  .nonce {\n    grid-column-start: 1;\n  }\n\n  .disclaimer {\n    grid-column-start: 2;\n    grid-column-end: span 6;\n  }\n`\n\nexport const TxDetailsContainer = styled.div`\n  ${willBeReplaced};\n\n  background-color: ${({ theme }) => theme.colors.separator} !important;\n  column-gap: 2px;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-auto-rows: minmax(min-content, max-content);\n  grid-template-rows: [tx-summary] minmax(min-content, max-content) [tx-details] minmax(min-content, 1fr);\n  row-gap: 2px;\n  width: 100%;\n\n  & > div {\n    background-color: ${({ theme }) => theme.colors.white};\n    line-break: anywhere;\n    overflow: hidden;\n    padding: 20px 24px;\n    word-break: break-all;\n  }\n\n  .tx-summary {\n  }\n\n  .tx-details {\n    &.not-executed {\n      grid-row-end: span 2;\n    }\n\n    &.no-padding {\n      padding: 0;\n    }\n  }\n\n  .tx-owners {\n    padding: 24px;\n    grid-column-start: 2;\n    grid-row-end: span 2;\n    grid-row-start: 1;\n\n    &.no-owner {\n      grid-row-end: span 3;\n    }\n  }\n\n  .tx-details-actions {\n    align-items: center;\n    display: flex;\n    height: 60px;\n    justify-content: center;\n\n    button {\n      color: ${({ theme }) => theme.colors.white};\n      margin: 0 8px;\n\n      &:hover {\n        color: ${({ theme }) => theme.colors.white};\n      }\n\n      &.error {\n        background-color: ${({ theme }) => theme.colors.error};\n\n        &:hover {\n          background-color: ${({ theme }) => theme.colors.errorHover};\n        }\n      }\n\n      &.primary {\n        background-color: ${({ theme }) => theme.colors.primary};\n\n        &:hover {\n          background-color: ${({ theme }) => theme.colors.secondary};\n        }\n      }\n    }\n  }\n`\n\nexport const OwnerList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding-left: 6px;\n\n  .legend {\n    left: 15px;\n    padding-bottom: 0.86em;\n    position: relative;\n    top: -3px;\n\n    .owner-info {\n      margin: 5px;\n    }\n\n    span {\n      color: #008c73;\n      font-weight: bold;\n    }\n  }\n\n  ul {\n    margin-top: 0;\n  }\n\n  .icon {\n    left: -7px;\n    position: absolute;\n    width: 16px;\n    z-index: 2;\n  }\n`\n\nexport const OwnerListItem = styled.li`\n  display: flex;\n  position: relative;\n\n  &::before {\n    border-left: 2px ${({ theme }) => theme.colors.icon} solid;\n    border-radius: 1px;\n    content: '';\n    height: calc(100% - 16px);\n    top: 16px;\n    left: 0;\n    position: absolute;\n    z-index: 1;\n  }\n\n  &:last-child::before {\n    border-left: none;\n  }\n`\n\nexport const InlineEthHashInfo = styled(EthHashInfo)`\n  display: inline-flex;\n`\n\nexport const StyledScrollableBar = styled.div`\n  &::-webkit-scrollbar {\n    width: 0.7em;\n    scroll-behavior: smooth;\n  }\n\n  &::-webkit-scrollbar-track {\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n    border-radius: 20px;\n  }\n\n  &::-webkit-scrollbar-thumb {\n    background-color: darkgrey;\n    outline: 1px solid #dadada;\n    border-radius: 20px;\n  }\n\n  // firefox experimental\n  scrollbar-color: darkgrey #dadada;\n  scrollbar-width: thin;\n`\n\nexport const ScrollableTransactionsContainer = styled(StyledScrollableBar)`\n  height: calc(100vh - 225px);\n  overflow-x: hidden;\n  overflow-y: auto;\n  width: 100%;\n`\nexport const Centered = styled.div<{ padding?: number }>`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  padding: ${({ padding }) => `${padding}px`};\n  justify-content: center;\n  align-items: center;\n`\n\nexport const HorizontallyCentered = styled(Centered)<{ isVisible: boolean }>`\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\n  height: 100px;\n`\n\nexport const StyledAccordionSummary = styled(AccordionSummary)`\n  height: 52px;\n  .tx-nonce {\n    margin: 0 16px 0 8px;\n  }\n`\nexport const AlignItemsWithMargin = styled.div`\n  display: flex;\n  align-items: center;\n\n  span:first-child {\n    margin-right: 6px;\n  }\n`\nexport const NoTransactions = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 60px;\n`\n","import { ObserverInstanceCallback } from './index';\n\nconst ObserverMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element, string> = new WeakMap();\n\nlet rootId = 0;\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root?: Element | null) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = ObserverMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    ObserverMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n) {\n  if (!element) return () => {};\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      ObserverMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  static displayName = 'InView';\n  static defaultProps = {\n    threshold: 0,\n    triggerOnce: false,\n    initialInView: false,\n  };\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const { threshold, root, rootMargin, trackVisibility, delay } = this.props;\n\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay,\n    });\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      tag,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || tag || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import React, { createContext, forwardRef, MutableRefObject, ReactElement, ReactNode, useEffect, useState } from 'react'\nimport { InViewHookResponse, useInView } from 'react-intersection-observer'\n\nexport const INFINITE_SCROLL_CONTAINER = 'infinite-scroll-container'\n\nexport const InfiniteScrollContext = createContext<{\n  ref: MutableRefObject<HTMLDivElement | null> | ((instance: HTMLDivElement | null) => void) | null\n  lastItemId?: string\n  setLastItemId: (itemId?: string) => void\n}>({ setLastItemId: () => {}, ref: null })\n\nexport const InfiniteScrollProvider = forwardRef<HTMLDivElement, { children: ReactNode }>(\n  ({ children }, ref): ReactElement => {\n    const [lastItemId, _setLastItemId] = useState<string>()\n\n    const setLastItemId = (itemId?: string) => {\n      setTimeout(() => _setLastItemId(itemId), 0)\n    }\n\n    return (\n      <InfiniteScrollContext.Provider value={{ ref, lastItemId, setLastItemId }}>\n        {children}\n      </InfiniteScrollContext.Provider>\n    )\n  },\n)\n\nInfiniteScrollProvider.displayName = 'InfiniteScrollProvider'\n\ntype InfiniteScrollProps = {\n  children: ReactNode\n  hasMore: boolean\n  next: () => Promise<void>\n  config?: InViewHookResponse\n}\n\nexport const InfiniteScroll = ({ children, hasMore, next, config }: InfiniteScrollProps): ReactElement => {\n  const { ref, inView } = useInView({\n    threshold: 0,\n    root: document.querySelector(`#${INFINITE_SCROLL_CONTAINER}`),\n    rootMargin: '0px 0px 200px 0px',\n    triggerOnce: true,\n    ...config,\n  })\n\n  useEffect(() => {\n    if (inView && hasMore) {\n      next()\n    }\n  }, [inView, hasMore, next])\n\n  return <InfiniteScrollProvider ref={ref}>{children}</InfiniteScrollProvider>\n}\n","import * as React from 'react';\nimport { InViewHookResponse, IntersectionOptions } from './index';\nimport { useEffect } from 'react';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  const setRef = React.useCallback(\n    (node) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import { Loader } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement, ReactNode } from 'react'\n\nimport { INFINITE_SCROLL_CONTAINER, InfiniteScroll } from 'src/components/InfiniteScroll'\nimport { HorizontallyCentered, ScrollableTransactionsContainer } from './styled'\n\ntype TxsInfiniteScrollProps = {\n  children: ReactNode\n  next: () => Promise<void>\n  hasMore: boolean\n  isLoading: boolean\n}\n\nexport const TxsInfiniteScroll = ({ children, next, hasMore, isLoading }: TxsInfiniteScrollProps): ReactElement => {\n  return (\n    <InfiniteScroll next={next} hasMore={hasMore}>\n      <ScrollableTransactionsContainer id={INFINITE_SCROLL_CONTAINER}>\n        {children}\n        <HorizontallyCentered isVisible={isLoading}>\n          <Loader size=\"md\" />\n        </HorizontallyCentered>\n      </ScrollableTransactionsContainer>\n    </InfiniteScroll>\n  )\n}\n\nexport { InfiniteScrollContext as TxsInfiniteScrollContext } from 'src/components/InfiniteScroll'\n","import { Custom, SettingsChange, TransactionInfo, Transfer } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useEffect, useState } from 'react'\n\nimport { getNetworkInfo } from 'src/config'\nimport { isCustomTxInfo, isSettingsChangeTxInfo, isTransferTxInfo } from 'src/logic/safe/store/models/types/gateway.d'\nimport { getTxAmount, NOT_AVAILABLE } from 'src/routes/safe/components/Transactions/TxList/utils'\n\nexport type TokenTransferAsset = {\n  type: 'Transfer'\n  name: string\n  logoUri: string\n  directionSign: '+' | '-' | ''\n  amountWithSymbol: string\n  tokenType: string\n}\n\nexport type AssetInfo = TokenTransferAsset | SettingsChange | Custom\n\nexport const isTokenTransferAsset = (value: AssetInfo): value is TokenTransferAsset => {\n  return value.type === 'Transfer'\n}\n\nconst defaultTokenTransferAsset: TokenTransferAsset = {\n  type: 'Transfer',\n  name: NOT_AVAILABLE,\n  logoUri: NOT_AVAILABLE,\n  directionSign: '',\n  amountWithSymbol: NOT_AVAILABLE,\n  tokenType: 'UNKNOWN',\n}\n\nexport const useAssetInfo = (txInfo: TransactionInfo): AssetInfo | undefined => {\n  const [asset, setAsset] = useState<AssetInfo>()\n  const amountWithSymbol = getTxAmount(txInfo)\n\n  useEffect(() => {\n    if (isTransferTxInfo(txInfo)) {\n      const { direction, transferInfo } = txInfo as Transfer\n      const directionSign = direction === 'INCOMING' ? '+' : '-'\n\n      switch (transferInfo.type) {\n        case 'ERC20': {\n          setAsset({\n            type: 'Transfer',\n            name: transferInfo.tokenName ?? defaultTokenTransferAsset.name,\n            logoUri: transferInfo.logoUri ?? defaultTokenTransferAsset.logoUri,\n            directionSign,\n            amountWithSymbol,\n            tokenType: transferInfo.type,\n          })\n          break\n        }\n        case 'ERC721': {\n          setAsset({\n            type: 'Transfer',\n            name: transferInfo.tokenName ?? defaultTokenTransferAsset.name,\n            logoUri: transferInfo.logoUri ?? defaultTokenTransferAsset.logoUri,\n            directionSign: directionSign,\n            amountWithSymbol,\n            tokenType: transferInfo.type,\n          })\n          break\n        }\n        case 'ETHER': {\n          const { nativeCoin } = getNetworkInfo()\n\n          setAsset({\n            type: 'Transfer',\n            name: nativeCoin.name ?? defaultTokenTransferAsset.name,\n            logoUri: nativeCoin.logoUri ?? defaultTokenTransferAsset.logoUri,\n            directionSign: directionSign,\n            amountWithSymbol,\n            tokenType: transferInfo.type,\n          })\n          break\n        }\n      }\n      return\n    }\n\n    if (isSettingsChangeTxInfo(txInfo)) {\n      setAsset(txInfo as SettingsChange)\n      return\n    }\n\n    if (isCustomTxInfo(txInfo)) {\n      setAsset(txInfo as Custom)\n    }\n  }, [txInfo, amountWithSymbol])\n\n  return asset\n}\n","import { ThemeColors } from '@gnosis.pm/safe-react-components/dist/theme'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport {\n  isStatusCancelled,\n  isStatusFailed,\n  isStatusSuccess,\n  isStatusWillBeReplaced,\n  Transaction,\n} from 'src/logic/safe/store/models/types/gateway.d'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { addressInList } from 'src/routes/safe/components/Transactions/TxList/utils'\n\nexport type TransactionStatusProps = {\n  color: ThemeColors\n  text: string\n}\n\nexport const useTransactionStatus = (transaction: Transaction): TransactionStatusProps => {\n  const currentUser = useSelector(userAccountSelector)\n  const [status, setStatus] = useState<TransactionStatusProps>({ color: 'primary', text: '' })\n\n  useEffect(() => {\n    if (isStatusSuccess(transaction.txStatus)) {\n      setStatus({ color: 'primary', text: 'Success' })\n    } else if (isStatusFailed(transaction.txStatus)) {\n      setStatus({ color: 'error', text: 'Failed' })\n    } else if (isStatusCancelled(transaction.txStatus)) {\n      setStatus({ color: 'error', text: 'Cancelled' })\n    } else if (isStatusWillBeReplaced(transaction.txStatus)) {\n      setStatus({ color: 'placeHolder', text: 'Transaction will be replaced' })\n    } else {\n      // AWAITING_EXECUTION, AWAITING_CONFIRMATIONS, PENDING or PENDING_FAILED\n      let text: string\n      const signaturePending = addressInList(transaction.executionInfo?.missingSigners ?? undefined)\n\n      switch (transaction.txStatus) {\n        case 'AWAITING_CONFIRMATIONS':\n          text = signaturePending(currentUser) ? 'Needs your confirmation' : 'Needs confirmations'\n          break\n        case 'AWAITING_EXECUTION':\n          text = 'Needs execution'\n          break\n        case 'PENDING':\n        case 'PENDING_FAILED':\n        default:\n          text = 'Pending'\n          break\n      }\n\n      setStatus({ color: 'rinkeby', text })\n    }\n  }, [currentUser, transaction.executionInfo?.missingSigners, transaction.txStatus])\n\n  return status\n}\n","export default __webpack_public_path__ + \"static/media/circle-cross-red.c9afa2b3.svg\";","export default __webpack_public_path__ + \"static/media/incoming.1bf5be26.svg\";","export default __webpack_public_path__ + \"static/media/outgoing.d744cc02.svg\";","export default __webpack_public_path__ + \"static/media/settings.0fea6f0c.svg\";","import { useSelector } from 'react-redux'\n\nimport { sameString } from 'src/utils/strings'\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\n\ntype AddressInfo = { name: string | undefined; image: string | undefined }\n\ntype UseKnownAddressResponse = AddressInfo & { isAddressBook: boolean }\n\nexport const useKnownAddress = (address: string, addressInfo: AddressInfo): UseKnownAddressResponse => {\n  const recipientName = useSelector((state) => addressBookEntryName(state, { address }))\n  // We have to check that the name returned is not UNKNOWN\n  const isInAddressBook = !sameString(recipientName, ADDRESS_BOOK_DEFAULT_NAME)\n\n  return isInAddressBook\n    ? {\n        name: recipientName,\n        image: undefined,\n        isAddressBook: true,\n      }\n    : { ...addressInfo, isAddressBook: false }\n}\n","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { safeAddressFromUrl } from 'src/logic/safe/store/selectors'\nimport CustomTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/custom.svg'\nimport CircleCrossRed from 'src/routes/safe/components/Transactions/TxList/assets/circle-cross-red.svg'\nimport IncomingTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/incoming.svg'\nimport OutgoingTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/outgoing.svg'\nimport SettingsTxIcon from 'src/routes/safe/components/Transactions/TxList/assets/settings.svg'\nimport { getTxTo } from 'src/routes/safe/components/Transactions/TxList/utils'\nimport { useKnownAddress } from './useKnownAddress'\nimport { Custom } from '@gnosis.pm/safe-react-gateway-sdk'\n\nexport type TxTypeProps = {\n  icon?: string\n  fallbackIcon?: string\n  text?: string\n}\n\nexport const useTransactionType = (tx: Transaction): TxTypeProps => {\n  const [type, setType] = useState<TxTypeProps>({ icon: CustomTxIcon, text: 'Contract interaction' })\n  const safeAddress = useSelector(safeAddressFromUrl)\n  const toAddress = getTxTo(tx)\n  // Fixed casting because known address only works for Custom tx\n  const knownAddress = useKnownAddress(toAddress || '0x', {\n    name: (tx.txInfo as Custom)?.toInfo?.name,\n    image: (tx.txInfo as Custom)?.toInfo?.logoUri || undefined,\n  })\n\n  useEffect(() => {\n    switch (tx.txInfo.type) {\n      case 'Creation': {\n        setType({ icon: SettingsTxIcon, text: 'Safe created' })\n        break\n      }\n      case 'Transfer': {\n        const isSendTx = tx.txInfo.direction === 'OUTGOING'\n        setType({ icon: isSendTx ? OutgoingTxIcon : IncomingTxIcon, text: isSendTx ? 'Send' : 'Receive' })\n        break\n      }\n      case 'SettingsChange': {\n        setType({ icon: SettingsTxIcon, text: tx.txInfo.dataDecoded.method })\n        break\n      }\n      case 'Custom': {\n        // TODO: is this the only way to identify a 'module' transaction?\n        if (!tx.executionInfo) {\n          setType({ icon: SettingsTxIcon, text: 'Module' })\n          break\n        }\n\n        if (tx.txInfo.isCancellation) {\n          setType({ icon: CircleCrossRed, text: 'On-chain rejection' })\n          break\n        }\n\n        if (tx.safeAppInfo) {\n          setType({ icon: tx.safeAppInfo.logoUrl, text: tx.safeAppInfo.name })\n          break\n        }\n\n        const toInfo = tx.txInfo.toInfo\n        setType({\n          icon: knownAddress.isAddressBook ? CustomTxIcon : knownAddress.image || CustomTxIcon,\n          fallbackIcon: knownAddress.isAddressBook ? undefined : CustomTxIcon,\n          text: toInfo ? knownAddress.name : 'Contract interaction',\n        })\n        break\n      }\n    }\n  }, [tx, safeAddress, knownAddress.name, knownAddress.image, knownAddress.isAddressBook])\n\n  return type\n}\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\n\ntype Props = {\n  address: string\n  iconUrl?: string\n  iconUrlFallback?: string\n  text?: string\n}\n\nexport const CustomIconText = ({ address, iconUrl, text, iconUrlFallback }: Props): ReactElement => (\n  <EthHashInfo\n    hash={address}\n    showHash={false}\n    avatarSize=\"sm\"\n    showAvatar\n    customAvatar={iconUrl || undefined}\n    customAvatarFallback={iconUrlFallback}\n    name={text}\n    textSize=\"xl\"\n  />\n)\n","import React, { createContext, ReactElement, ReactNode, useState } from 'react'\nimport { TxLocation } from 'src/logic/safe/store/models/types/gateway.d'\n\nexport type TxLocationProps = {\n  txLocation: TxLocation\n  setTxLocation?: (txLocation: TxLocation) => void\n}\n\nexport const TxLocationContext = createContext<TxLocationProps>({\n  txLocation: 'history',\n  setTxLocation: () => {},\n})\n\nexport const TxLocationProvider = ({ children }: { children: ReactNode }): ReactElement => {\n  const [txLocation, setTxLocation] = useState<TxLocation>('history')\n\n  return <TxLocationContext.Provider value={{ txLocation, setTxLocation }}>{children}</TxLocationContext.Provider>\n}\n","import { ExecutionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { useContext, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { isCustomTxInfo, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { safeAddressFromUrl } from 'src/logic/safe/store/selectors'\nimport { getQueuedTransactionsByNonce } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { TxLocationContext } from 'src/routes/safe/components/Transactions/TxList/TxLocationProvider'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\nimport { AppReduxState } from 'src/store'\n\nexport const isThresholdReached = (executionInfo: ExecutionInfo): boolean => {\n  const { confirmationsSubmitted, confirmationsRequired } = executionInfo\n  return confirmationsSubmitted >= confirmationsRequired\n}\n\nexport type TransactionActions = {\n  canConfirm: boolean\n  canConfirmThenExecute: boolean\n  canExecute: boolean\n  canCancel: boolean\n  isUserAnOwner: boolean\n  oneToGo: boolean\n}\n\nexport const useTransactionActions = (transaction: Transaction): TransactionActions => {\n  const currentUser = useSelector(userAccountSelector)\n  const safeAddress = useSelector(safeAddressFromUrl)\n  const isUserAnOwner = useSelector(grantedSelector)\n  const { txLocation } = useContext(TxLocationContext)\n  const { confirmationsSubmitted = 0, confirmationsRequired = 0, missingSigners } = transaction.executionInfo ?? {}\n  const transactionsByNonce = useSelector((state: AppReduxState) =>\n    getQueuedTransactionsByNonce(state)({\n      attributeName: 'nonce',\n      attributeValue: transaction.executionInfo?.nonce ?? -1,\n      txLocation,\n    }),\n  )\n\n  const [state, setState] = useState<TransactionActions>({\n    canConfirm: false,\n    canConfirmThenExecute: false,\n    canExecute: false,\n    canCancel: false,\n    isUserAnOwner,\n    oneToGo: false,\n  })\n\n  useEffect(() => {\n    if (isUserAnOwner && txLocation !== 'history' && transaction.executionInfo) {\n      const currentUserSigned = !missingSigners?.some((missingSigner) => sameAddress(missingSigner, currentUser))\n\n      const oneToGo = confirmationsSubmitted === confirmationsRequired - 1\n      const canConfirm = ['queued.next', 'queued.queued'].includes(txLocation) && !currentUserSigned\n      const thresholdReached = confirmationsSubmitted >= confirmationsRequired\n\n      setState({\n        canConfirm,\n        canConfirmThenExecute: txLocation === 'queued.next' && canConfirm && oneToGo,\n        canExecute: txLocation === 'queued.next' && thresholdReached,\n        canCancel: !transactionsByNonce.some(({ txInfo }) => isCustomTxInfo(txInfo) && txInfo.isCancellation),\n        isUserAnOwner,\n        oneToGo,\n      })\n    } else {\n      setState((prev) => ({ ...prev, isUserAnOwner }))\n    }\n  }, [\n    confirmationsRequired,\n    confirmationsSubmitted,\n    currentUser,\n    isUserAnOwner,\n    missingSigners,\n    safeAddress,\n    transaction,\n    transactionsByNonce,\n    txLocation,\n  ])\n\n  return state\n}\n","import React, { createContext, ReactElement, ReactNode, useCallback, useRef, useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { fetchTransactionDetails } from 'src/logic/safe/store/actions/fetchTransactionDetails'\nimport { TxLocation } from 'src/logic/safe/store/models/types/gateway.d'\n\nexport type ActionType = 'cancel' | 'confirm' | 'execute' | 'none'\n\nexport type SelectedAction = {\n  // FixMe: give proper names to the keys\n  //  for instance:\n  //  `action->{ type; forTransactionId; txLocation; }`\n  //  `setAction` as callback\n  selectedAction: {\n    actionSelected: ActionType\n    transactionId: string\n    txLocation: TxLocation\n  }\n  selectAction: (args: SelectedAction['selectedAction']) => Promise<void>\n}\n\nexport const TransactionActionStateContext = createContext<SelectedAction>({\n  selectedAction: {\n    actionSelected: 'none',\n    transactionId: '',\n    txLocation: 'history',\n  },\n  selectAction: () => Promise.resolve(),\n})\n\nexport const TxActionProvider = ({ children }: { children: ReactNode }): ReactElement => {\n  const dispatch = useRef(useDispatch())\n  const [selectedAction, setSelectedAction] = useState<SelectedAction['selectedAction']>({\n    actionSelected: 'none',\n    transactionId: '',\n    txLocation: 'history',\n  })\n\n  const selectAction = useCallback(\n    async ({ actionSelected, transactionId, txLocation }: SelectedAction['selectedAction']) => {\n      if (transactionId) {\n        await dispatch.current(fetchTransactionDetails({ transactionId, txLocation }))\n      }\n\n      setSelectedAction({ actionSelected, transactionId, txLocation })\n    },\n    [],\n  )\n\n  return (\n    <TransactionActionStateContext.Provider value={{ selectedAction, selectAction }}>\n      {children}\n    </TransactionActionStateContext.Provider>\n  )\n}\n","import React, { createContext, ReactElement, ReactNode, useState } from 'react'\n\nexport const TxHoverContext = createContext<{\n  activeHover?: string\n  setActiveHover: (activeHover?: string) => void\n}>({\n  activeHover: undefined,\n  setActiveHover: () => {},\n})\n\nexport const TxHoverProvider = ({ children }: { children: ReactNode }): ReactElement => {\n  const [activeHover, setActiveHover] = useState<string | undefined>()\n\n  return <TxHoverContext.Provider value={{ activeHover, setActiveHover }}>{children}</TxHoverContext.Provider>\n}\n","import { MouseEvent as ReactMouseEvent, useCallback, useContext, useMemo, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { MultiSigExecutionDetails, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { addressInList } from 'src/routes/safe/components/Transactions/TxList/utils'\nimport { useTransactionActions } from './useTransactionActions'\nimport { TransactionActionStateContext } from 'src/routes/safe/components/Transactions/TxList/TxActionProvider'\nimport { TxHoverContext } from 'src/routes/safe/components/Transactions/TxList/TxHoverProvider'\nimport { TxLocationContext } from 'src/routes/safe/components/Transactions/TxList/TxLocationProvider'\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\nimport { NOTIFICATIONS } from 'src/logic/notifications'\n\ntype ActionButtonsHandlers = {\n  canCancel: boolean\n  handleConfirmButtonClick: (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void\n  handleCancelButtonClick: (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void\n  handleOnMouseEnter: () => void\n  handleOnMouseLeave: () => void\n  isPending: boolean\n  disabledActions: boolean\n}\n\nexport const useActionButtonsHandlers = (transaction: Transaction): ActionButtonsHandlers => {\n  const currentUser = useSelector(userAccountSelector)\n  const actionContext = useRef(useContext(TransactionActionStateContext))\n  const hoverContext = useRef(useContext(TxHoverContext))\n  const locationContext = useRef(useContext(TxLocationContext))\n  const dispatch = useDispatch()\n  const { canCancel, canConfirmThenExecute, canExecute } = useTransactionActions(transaction)\n\n  const handleConfirmButtonClick = useCallback(\n    (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n      event.stopPropagation()\n      if (transaction.txDetails?.detailedExecutionInfo?.type === 'MULTISIG') {\n        const details = transaction.txDetails?.detailedExecutionInfo as MultiSigExecutionDetails\n        if (\n          (canExecute && details.confirmationsRequired > details.confirmations.length) ||\n          (canConfirmThenExecute && details.confirmationsRequired - 1 > details.confirmations.length)\n        ) {\n          dispatch(enqueueSnackbar(NOTIFICATIONS.TX_FETCH_SIGNATURES_ERROR_MSG))\n          return\n        }\n      }\n      actionContext.current.selectAction({\n        actionSelected: canExecute || canConfirmThenExecute ? 'execute' : 'confirm',\n        transactionId: transaction.id,\n        txLocation: locationContext.current.txLocation,\n      })\n    },\n    [canConfirmThenExecute, canExecute, dispatch, transaction.id, transaction.txDetails?.detailedExecutionInfo],\n  )\n\n  const handleCancelButtonClick = useCallback(\n    (event: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n      event.stopPropagation()\n      actionContext.current.selectAction({\n        actionSelected: 'cancel',\n        transactionId: transaction.id,\n        txLocation: locationContext.current.txLocation,\n      })\n    },\n    [transaction.id],\n  )\n\n  const handleOnMouseEnter = useCallback(() => {\n    if (canExecute) {\n      hoverContext.current.setActiveHover(transaction.id)\n    }\n  }, [canExecute, transaction.id])\n\n  const handleOnMouseLeave = useCallback(() => {\n    hoverContext.current.setActiveHover()\n  }, [])\n\n  const isPending = useMemo(() => !!transaction.txStatus.match(/^PENDING.*/), [transaction.txStatus])\n\n  const signaturePending = addressInList(transaction.executionInfo?.missingSigners ?? undefined)\n\n  const disabledActions = useMemo(\n    () =>\n      isPending ||\n      (transaction.txStatus === 'AWAITING_EXECUTION' && locationContext.current.txLocation === 'queued.queued') ||\n      (transaction.txStatus === 'AWAITING_CONFIRMATIONS' && !signaturePending(currentUser)),\n    [currentUser, isPending, signaturePending, transaction.txStatus],\n  )\n\n  return {\n    canCancel,\n    handleConfirmButtonClick,\n    handleCancelButtonClick,\n    handleOnMouseEnter,\n    handleOnMouseLeave,\n    isPending,\n    disabledActions,\n  }\n}\n","import { Icon, Tooltip } from '@gnosis.pm/safe-react-components'\nimport { default as MuiIconButton } from '@material-ui/core/IconButton'\nimport React, { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { useSelector } from 'react-redux'\n\nimport { currentSafeNonce } from 'src/logic/safe/store/selectors'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useActionButtonsHandlers } from './hooks/useActionButtonsHandlers'\n\nconst IconButton = styled(MuiIconButton)`\n  padding: 8px !important;\n\n  &.Mui-disabled {\n    opacity: 0.4;\n  }\n`\n\ntype TxCollapsedActionsProps = {\n  transaction: Transaction\n}\n\nexport const TxCollapsedActions = ({ transaction }: TxCollapsedActionsProps): ReactElement => {\n  const {\n    canCancel,\n    handleConfirmButtonClick,\n    handleCancelButtonClick,\n    handleOnMouseEnter,\n    handleOnMouseLeave,\n    isPending,\n    disabledActions,\n  } = useActionButtonsHandlers(transaction)\n  const nonce = useSelector(currentSafeNonce)\n\n  const getTitle = () => {\n    if (transaction.txStatus === 'AWAITING_EXECUTION') {\n      return transaction.executionInfo?.nonce === nonce\n        ? 'Execute'\n        : `Transaction with nonce ${nonce} needs to be executed first`\n    }\n    return 'Confirm'\n  }\n\n  return (\n    <>\n      <Tooltip title={getTitle()} placement=\"top\">\n        <span>\n          <IconButton\n            size=\"small\"\n            type=\"button\"\n            onClick={handleConfirmButtonClick}\n            disabled={disabledActions}\n            onMouseEnter={handleOnMouseEnter}\n            onMouseLeave={handleOnMouseLeave}\n          >\n            <Icon type={transaction.txStatus === 'AWAITING_EXECUTION' ? 'rocket' : 'check'} color=\"primary\" size=\"sm\" />\n          </IconButton>\n        </span>\n      </Tooltip>\n      {canCancel && (\n        <Tooltip title=\"Reject\" placement=\"top\">\n          <span>\n            <IconButton size=\"small\" type=\"button\" onClick={handleCancelButtonClick} disabled={isPending}>\n              <Icon type=\"circleCross\" color=\"error\" size=\"sm\" />\n            </IconButton>\n          </span>\n        </Tooltip>\n      )}\n    </>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport Img from 'src/components/layout/Img'\nimport NFTIcon from 'src/routes/safe/components/Balances/assets/nft_icon.png'\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\nimport { TokenTransferAsset } from './hooks/useAssetInfo'\n\nconst Amount = styled(Text)`\n  margin-left: 10px;\n  line-height: 16px;\n`\n\nconst AmountWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport type TokenTransferAmountProps = {\n  assetInfo: TokenTransferAsset\n}\n\nexport const TokenTransferAmount = ({ assetInfo }: TokenTransferAmountProps): ReactElement => {\n  return (\n    <AmountWrapper>\n      <Img\n        alt={assetInfo.name}\n        height={26}\n        onError={(error) => {\n          error.currentTarget.onerror = null\n          error.currentTarget.src = assetInfo.tokenType === 'ERC721' ? NFTIcon : TokenPlaceholder\n        }}\n        src={assetInfo.logoUri}\n      />\n      <Amount size=\"xl\">{`${assetInfo.directionSign}${assetInfo.amountWithSymbol}`}</Amount>\n    </AmountWrapper>\n  )\n}\n","import { Dot, IconText as IconTextSrc, Loader, Text, Tooltip } from '@gnosis.pm/safe-react-components'\nimport { ThemeColors } from '@gnosis.pm/safe-react-components/dist/theme'\nimport React, { ReactElement, useContext, useRef } from 'react'\nimport styled from 'styled-components'\n\nimport { CustomIconText } from 'src/components/CustomIconText'\nimport {\n  isCustomTxInfo,\n  isMultiSendTxInfo,\n  isSettingsChangeTxInfo,\n  Transaction,\n} from 'src/logic/safe/store/models/types/gateway.d'\nimport { TxCollapsedActions } from './TxCollapsedActions'\nimport { formatDateTime, formatTime, formatTimeInWords } from 'src/utils/date'\nimport { KNOWN_MODULES } from 'src/utils/constants'\nimport { sameString } from 'src/utils/strings'\nimport { AssetInfo, isTokenTransferAsset } from './hooks/useAssetInfo'\nimport { TransactionActions } from './hooks/useTransactionActions'\nimport { TransactionStatusProps } from './hooks/useTransactionStatus'\nimport { TxTypeProps } from './hooks/useTransactionType'\nimport { StyledGroupedTransactions, StyledTransaction } from './styled'\nimport { TokenTransferAmount } from './TokenTransferAmount'\nimport { TxsInfiniteScrollContext } from './TxsInfiniteScroll'\nimport { TxLocationContext } from './TxLocationProvider'\nimport { CalculatedVotes } from './TxQueueCollapsed'\nimport { getTxTo, isCancelTxDetails } from './utils'\nimport { SettingsChange, DisableModule, MultiSend, Custom } from '@gnosis.pm/safe-react-gateway-sdk'\n\nconst TxInfo = ({ info }: { info: AssetInfo }) => {\n  if (isTokenTransferAsset(info)) {\n    return <TokenTransferAmount assetInfo={info} />\n  }\n\n  if (isSettingsChangeTxInfo(info)) {\n    const UNKNOWN_MODULE = 'Unknown module'\n\n    switch ((info as SettingsChange).settingsInfo?.type) {\n      case 'SET_FALLBACK_HANDLER':\n      case 'ADD_OWNER':\n      case 'REMOVE_OWNER':\n      case 'SWAP_OWNER':\n      case 'CHANGE_THRESHOLD':\n      case 'CHANGE_IMPLEMENTATION':\n        break\n      case 'ENABLE_MODULE':\n      case 'DISABLE_MODULE':\n        const disableInfo = (info as SettingsChange).settingsInfo as DisableModule\n        return (\n          <Text size=\"xl\" as=\"span\">\n            {KNOWN_MODULES[disableInfo.module] ?? UNKNOWN_MODULE}\n          </Text>\n        )\n    }\n  }\n\n  if (isCustomTxInfo(info)) {\n    if (isMultiSendTxInfo(info)) {\n      return (\n        <Text size=\"xl\" as=\"span\">\n          {info.actionCount} {`action${(info as MultiSend).actionCount > 1 ? 's' : ''}`}\n        </Text>\n      )\n    }\n\n    return (\n      <Text size=\"xl\" as=\"span\">\n        {(info as Custom).methodName}\n      </Text>\n    )\n  }\n  return null\n}\n\nconst CircularProgressPainter = styled.div<{ color: ThemeColors }>`\n  color: ${({ theme, color }) => theme.colors[color]};\n`\n\nconst SmallDot = styled(Dot)`\n  height: 8px;\n  width: 8px;\n  background-color: ${({ theme, color }) => theme.colors[color]} !important;\n`\n\nconst IconText = styled(IconTextSrc)`\n  p {\n    font-weight: bold;\n  }\n`\n\nconst TooltipContent = styled.div`\n  width: max-content;\n`\n\ntype TxCollapsedProps = {\n  transaction: Transaction\n  isGrouped?: boolean\n  nonce?: number\n  type: TxTypeProps\n  info?: AssetInfo\n  time: number\n  votes?: CalculatedVotes\n  actions?: TransactionActions\n  status: TransactionStatusProps\n}\n\nexport const TxCollapsed = ({\n  transaction,\n  isGrouped = false,\n  nonce,\n  type,\n  info,\n  time,\n  votes,\n  actions,\n  status,\n}: TxCollapsedProps): ReactElement => {\n  const { txLocation } = useContext(TxLocationContext)\n  const { ref, lastItemId } = useContext(TxsInfiniteScrollContext)\n  const toAddress = getTxTo(transaction)\n\n  const willBeReplaced = transaction?.txStatus === 'WILL_BE_REPLACED' ? ' will-be-replaced' : ''\n  const onChainRejection =\n    isCancelTxDetails(transaction.txInfo) && txLocation !== 'history' ? ' on-chain-rejection' : ''\n\n  const txCollapsedNonce = (\n    <div className={'tx-nonce' + willBeReplaced}>\n      <Text size=\"xl\">{nonce}</Text>\n    </div>\n  )\n\n  const txCollapsedType = (\n    <div className={'tx-type' + willBeReplaced + onChainRejection}>\n      <CustomIconText\n        address={toAddress || '0x'}\n        iconUrl={type.icon}\n        iconUrlFallback={type.fallbackIcon}\n        text={type.text}\n      />\n    </div>\n  )\n\n  const txCollapsedInfo = <div className={'tx-info' + willBeReplaced}>{info && <TxInfo info={info} />}</div>\n\n  const timestamp = useRef<HTMLDivElement | null>(null)\n\n  const txCollapsedTime = (\n    <div className={'tx-time' + willBeReplaced}>\n      <Tooltip title={formatDateTime(time)} arrow backgroundColor=\"white\" size=\"lg\">\n        <TooltipContent ref={timestamp}>\n          <Text size=\"xl\">{txLocation === 'history' ? formatTime(time) : formatTimeInWords(time)}</Text>\n        </TooltipContent>\n      </Tooltip>\n    </div>\n  )\n\n  const txCollapsedVotes = (\n    <div className={'tx-votes' + willBeReplaced}>\n      {votes && (\n        <IconText\n          color={votes.required > votes.submitted ? 'secondaryLight' : 'primary'}\n          iconType=\"owners\"\n          iconSize=\"sm\"\n          text={`${votes.votes}`}\n          textSize=\"md\"\n        />\n      )}\n    </div>\n  )\n\n  const txCollapsedActions = (\n    <div className={'tx-actions' + willBeReplaced}>\n      {actions?.isUserAnOwner && transaction && <TxCollapsedActions transaction={transaction} />}\n    </div>\n  )\n\n  // attaching ref to a div element as it was causing troubles to add a `ref` to a FunctionComponent\n  const txCollapsedStatus = (\n    <div className=\"tx-status\" ref={sameString(lastItemId, transaction.id) ? ref : null}>\n      {transaction?.txStatus === 'PENDING' || transaction?.txStatus === 'PENDING_FAILED' ? (\n        <CircularProgressPainter color={status.color}>\n          <Loader size=\"xs\" color=\"pending\" />\n        </CircularProgressPainter>\n      ) : (\n        (transaction?.txStatus === 'AWAITING_EXECUTION' || transaction?.txStatus === 'AWAITING_CONFIRMATIONS') && (\n          <SmallDot color={status.color} />\n        )\n      )}\n      <Text size=\"md\" color={status.color} className=\"col\" strong>\n        {status.text}\n      </Text>\n    </div>\n  )\n\n  return isGrouped ? (\n    <StyledGroupedTransactions>\n      {/* no nonce */}\n      {txCollapsedType}\n      {txCollapsedInfo}\n      {txCollapsedTime}\n      {txCollapsedVotes}\n      {txCollapsedActions}\n      {txCollapsedStatus}\n    </StyledGroupedTransactions>\n  ) : (\n    <StyledTransaction className={sameString(status.text, 'Failed') ? 'failed-transaction' : ''}>\n      {txCollapsedNonce}\n      {txCollapsedType}\n      {txCollapsedInfo}\n      {txCollapsedTime}\n      {txCollapsedVotes}\n      {txCollapsedActions}\n      {txCollapsedStatus}\n    </StyledTransaction>\n  )\n}\n","import React, { ReactElement } from 'react'\n\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useAssetInfo } from './hooks/useAssetInfo'\nimport { useTransactionStatus } from './hooks/useTransactionStatus'\nimport { useTransactionType } from './hooks/useTransactionType'\nimport { TxCollapsed } from './TxCollapsed'\n\nexport const TxHistoryCollapsed = ({ transaction }: { transaction: Transaction }): ReactElement => {\n  const nonce = transaction.executionInfo?.nonce\n  const type = useTransactionType(transaction)\n  const info = useAssetInfo(transaction.txInfo)\n  const status = useTransactionStatus(transaction)\n\n  return (\n    <TxCollapsed\n      nonce={nonce}\n      type={type}\n      info={info}\n      time={transaction.timestamp}\n      status={status}\n      transaction={transaction}\n    />\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport React from 'react'\nimport { sameString } from 'src/utils/strings'\nimport styled from 'styled-components'\n\nimport useTokenInfo from 'src/logic/safe/hooks/useTokenInfo'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { getResetTimeOptions } from 'src/routes/safe/components/Settings/SpendingLimit/FormFields/ResetTime'\nimport { AddressInfo, ResetTimeInfo, TokenInfo } from 'src/routes/safe/components/Settings/SpendingLimit/InfoDisplay'\nimport { DataDecoded } from '@gnosis.pm/safe-react-gateway-sdk'\n\nconst SET_ALLOWANCE = 'setAllowance'\nconst DELETE_ALLOWANCE = 'deleteAllowance'\n\nexport const isSetAllowance = (method?: string): boolean => {\n  return sameString(method, SET_ALLOWANCE)\n}\n\nexport const isDeleteAllowance = (method?: string): boolean => {\n  return sameString(method, DELETE_ALLOWANCE)\n}\n\nexport const isSpendingLimitMethod = (method?: string): boolean => {\n  return isSetAllowance(method) || isDeleteAllowance(method)\n}\n\nconst SpendingLimitRow = styled.div`\n  margin-bottom: 16px;\n`\n\nexport const ModifySpendingLimitDetails = ({ data }: { data: DataDecoded }): React.ReactElement => {\n  const [beneficiary, tokenAddress, amount, resetTimeMin] = React.useMemo(\n    () => data.parameters?.map(({ value }) => value) ?? [],\n    [data.parameters],\n  )\n\n  const resetTimeLabel = React.useMemo(\n    () => getResetTimeOptions().find(({ value }) => +value === +resetTimeMin)?.label ?? '',\n    [resetTimeMin],\n  )\n\n  const tokenInfo = useTokenInfo(tokenAddress as string)\n\n  return (\n    <>\n      <SpendingLimitRow>\n        <Text size=\"xl\" strong>\n          Modify spending limit:\n        </Text>\n      </SpendingLimitRow>\n      <SpendingLimitRow>\n        <AddressInfo title=\"Beneficiary\" address={beneficiary as string} />\n      </SpendingLimitRow>\n      <SpendingLimitRow>\n        {tokenInfo && (\n          <TokenInfo amount={fromTokenUnit(amount as string, tokenInfo.decimals)} title=\"Amount\" token={tokenInfo} />\n        )}\n      </SpendingLimitRow>\n      <SpendingLimitRow>\n        <ResetTimeInfo title=\"Reset Time\" label={resetTimeLabel} />\n      </SpendingLimitRow>\n    </>\n  )\n}\n\nexport const DeleteSpendingLimitDetails = ({ data }: { data: DataDecoded }): React.ReactElement => {\n  const [beneficiary, tokenAddress] = React.useMemo(\n    () => data.parameters?.map(({ value }) => value) ?? [],\n    [data.parameters],\n  )\n  const tokenInfo = useTokenInfo(tokenAddress as string)\n\n  return (\n    <>\n      <SpendingLimitRow>\n        <Text size=\"xl\" strong>\n          Delete spending limit:\n        </Text>\n      </SpendingLimitRow>\n      <SpendingLimitRow>\n        <AddressInfo title=\"Beneficiary\" address={beneficiary as string} />\n      </SpendingLimitRow>\n      <SpendingLimitRow>{tokenInfo && <TokenInfo amount=\"\" title=\"Token\" token={tokenInfo} />}</SpendingLimitRow>\n    </>\n  )\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      height: 1,\n      margin: 0,\n      // Reset browser default style.\n      border: 'none',\n      flexShrink: 0,\n      backgroundColor: theme.palette.divider\n    },\n\n    /* Styles applied to the root element if `absolute={true}`. */\n    absolute: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      width: '100%'\n    },\n\n    /* Styles applied to the root element if `variant=\"inset\"`. */\n    inset: {\n      marginLeft: 72\n    },\n\n    /* Styles applied to the root element if `light={true}`. */\n    light: {\n      backgroundColor: fade(theme.palette.divider, 0.08)\n    },\n\n    /* Styles applied to the root element if `variant=\"middle\"`. */\n    middle: {\n      marginLeft: theme.spacing(2),\n      marginRight: theme.spacing(2)\n    },\n\n    /* Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: {\n      height: '100%',\n      width: 1\n    },\n\n    /* Styles applied to the root element if `flexItem={true}`. */\n    flexItem: {\n      alignSelf: 'stretch',\n      height: 'auto'\n    }\n  };\n};\nvar Divider = /*#__PURE__*/React.forwardRef(function Divider(props, ref) {\n  var _props$absolute = props.absolute,\n      absolute = _props$absolute === void 0 ? false : _props$absolute,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'hr' : _props$component,\n      _props$flexItem = props.flexItem,\n      flexItem = _props$flexItem === void 0 ? false : _props$flexItem,\n      _props$light = props.light,\n      light = _props$light === void 0 ? false : _props$light,\n      _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n      _props$role = props.role,\n      role = _props$role === void 0 ? Component !== 'hr' ? 'separator' : undefined : _props$role,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'fullWidth' : _props$variant,\n      other = _objectWithoutProperties(props, [\"absolute\", \"classes\", \"className\", \"component\", \"flexItem\", \"light\", \"orientation\", \"role\", \"variant\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'fullWidth' && classes[variant], absolute && classes.absolute, flexItem && classes.flexItem, light && classes.light, orientation === 'vertical' && classes.vertical),\n    role: role,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Divider.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Absolutely position the element.\n   */\n  absolute: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * If `true`, a vertical divider will have the correct height when used in flex container.\n   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)\n   */\n  flexItem: PropTypes.bool,\n\n  /**\n   * If `true`, the divider will have a lighter color.\n   */\n  light: PropTypes.bool,\n\n  /**\n   * The divider orientation.\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * @ignore\n   */\n  role: PropTypes.string,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['fullWidth', 'inset', 'middle'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDivider'\n})(Divider);","import { ClickAwayListener, createStyles, Divider } from '@material-ui/core'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz'\nimport { push } from 'connected-react-router'\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { generatePath } from 'react-router-dom'\n\nimport { sameString } from 'src/utils/strings'\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\nimport { SAFE_ROUTES } from 'src/routes/routes'\nimport { safeAddressFromUrl } from 'src/logic/safe/store/selectors'\nimport { xs } from 'src/theme/variables'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\n\nconst useStyles = makeStyles(\n  createStyles({\n    container: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      cursor: 'pointer',\n      margin: `0 ${xs}`,\n      borderRadius: '50%',\n      transition: 'background-color .2s ease-in-out',\n      '&:hover': {\n        backgroundColor: '#F0EFEE',\n      },\n      outline: 'none',\n    },\n    increasedPopperZindex: {\n      zIndex: 2001,\n    },\n  }),\n)\n\ntype EllipsisTransactionDetailsProps = {\n  address: string\n  sendModalOpenHandler?: () => void\n}\n\nexport const EllipsisTransactionDetails = ({\n  address,\n  sendModalOpenHandler,\n}: EllipsisTransactionDetailsProps): React.ReactElement => {\n  const classes = useStyles()\n  const [anchorEl, setAnchorEl] = React.useState(null)\n\n  const dispatch = useDispatch()\n  const currentSafeAddress = useSelector(safeAddressFromUrl)\n  const isOwnerConnected = useSelector(grantedSelector)\n\n  const recipientName = useSelector((state) => addressBookEntryName(state, { address }))\n  // We have to check that the name returned is not UNKNOWN\n  const isStoredInAddressBook = !sameString(recipientName, ADDRESS_BOOK_DEFAULT_NAME)\n\n  const handleClick = (event) => setAnchorEl(event.currentTarget)\n\n  const closeMenuHandler = () => setAnchorEl(null)\n\n  const addOrEditEntryHandler = () => {\n    const addressBookPath = generatePath(SAFE_ROUTES.ADDRESS_BOOK, {\n      safeAddress: currentSafeAddress,\n    })\n\n    dispatch(push(`${addressBookPath}?entryAddress=${address}`))\n    closeMenuHandler()\n  }\n\n  return (\n    <ClickAwayListener onClickAway={closeMenuHandler}>\n      <div className={classes.container} role=\"menu\" tabIndex={0}>\n        <MoreHorizIcon onClick={handleClick} onKeyDown={handleClick} />\n        <Menu anchorEl={anchorEl} id=\"simple-menu\" keepMounted onClose={closeMenuHandler} open={Boolean(anchorEl)}>\n          {sendModalOpenHandler\n            ? [\n                <MenuItem key=\"send-again-button\" onClick={sendModalOpenHandler} disabled={!isOwnerConnected}>\n                  Send Again\n                </MenuItem>,\n                <Divider key=\"divider\" />,\n              ]\n            : null}\n          {isStoredInAddressBook ? (\n            <MenuItem onClick={addOrEditEntryHandler}>Edit Address book Entry</MenuItem>\n          ) : (\n            <MenuItem onClick={addOrEditEntryHandler}>Add to address book</MenuItem>\n          )}\n        </Menu>\n      </div>\n    </ClickAwayListener>\n  )\n}\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\n\nimport { getExplorerInfo } from 'src/config'\nimport { useKnownAddress } from './hooks/useKnownAddress'\n\ntype Props = {\n  address: string\n  name?: string | undefined\n  avatarUrl?: string | undefined\n}\n\nexport const AddressInfo = ({ address, name, avatarUrl }: Props): ReactElement | null => {\n  const toInfo = useKnownAddress(address, { name, image: avatarUrl })\n\n  if (address === '') {\n    return null\n  }\n\n  return (\n    <EthHashInfo\n      hash={address}\n      name={toInfo.name}\n      showAvatar\n      customAvatar={toInfo.image}\n      showCopyBtn\n      explorerUrl={getExplorerInfo(address)}\n    />\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement, ReactNode } from 'react'\n\ntype InfoDetailsProps = {\n  children: ReactNode\n  title: string\n}\n\nexport const InfoDetails = ({ children, title }: InfoDetailsProps): ReactElement => (\n  <>\n    <Text size=\"xl\" strong>\n      {title}\n    </Text>\n    {children}\n  </>\n)\n","import React, { ReactElement, useContext, useEffect, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { EllipsisTransactionDetails } from 'src/routes/safe/components/AddressBook/EllipsisTransactionDetails'\nimport SendModal from 'src/routes/safe/components/Balances/SendModal'\nimport { AddressInfo } from './AddressInfo'\nimport { InfoDetails } from './InfoDetails'\nimport { TxLocationContext, TxLocationProps } from './TxLocationProvider'\nimport { getTxTokenData } from './utils'\nimport { Erc721Transfer, Transfer } from '@gnosis.pm/safe-react-gateway-sdk'\n\nconst SingleRow = styled.div`\n  display: flex;\n  align-items: flex-end;\n`\n\ntype TxInfoDetailsProps = {\n  title: string\n  address: string\n  name?: string | undefined\n  avatarUrl?: string | undefined\n  isTransferType?: boolean\n  txInfo?: Transfer\n}\n\nexport const TxInfoDetails = ({\n  title,\n  address,\n  isTransferType,\n  txInfo,\n  name,\n  avatarUrl,\n}: TxInfoDetailsProps): ReactElement => {\n  const { txLocation } = useContext<TxLocationProps>(TxLocationContext)\n  const canRepeatTransaction =\n    // is transfer type by context\n    isTransferType &&\n    // not a Collectible\n    txInfo?.transferInfo.type !== 'ERC721' &&\n    // in history list\n    txLocation === 'history' &&\n    // it's outgoing\n    txInfo?.direction === 'OUTGOING'\n\n  const [sendModalOpen, setSendModalOpen] = useState(false)\n  const sendModalOpenHandler = () => {\n    setSendModalOpen(true)\n  }\n  const onClose = () => {\n    setSendModalOpen(false)\n  }\n\n  const [sendModalParams, setSendModalParams] = useState<{\n    activeScreenType: 'sendCollectible' | 'sendFunds'\n    recipientAddress: string\n    selectedToken: string | Erc721Transfer\n    tokenAmount: string\n  }>({\n    activeScreenType: 'sendFunds',\n    recipientAddress: address,\n    selectedToken: ZERO_ADDRESS,\n    tokenAmount: '0',\n  })\n\n  useEffect(() => {\n    if (txInfo) {\n      const isCollectible = txInfo.transferInfo.type === 'ERC721'\n      const { address, value, decimals } = getTxTokenData(txInfo)\n\n      setSendModalParams((prev) => ({\n        ...prev,\n        activeScreenType: isCollectible ? 'sendCollectible' : 'sendFunds',\n        selectedToken: isCollectible ? (txInfo.transferInfo as Erc721Transfer) : address,\n        tokenAmount: isCollectible ? '1' : fromTokenUnit(value, Number(decimals)),\n      }))\n    }\n  }, [txInfo])\n\n  return (\n    <InfoDetails title={title}>\n      <SingleRow>\n        <AddressInfo address={address} name={name} avatarUrl={avatarUrl} />\n        <EllipsisTransactionDetails\n          address={address}\n          sendModalOpenHandler={canRepeatTransaction ? sendModalOpenHandler : undefined}\n        />\n      </SingleRow>\n      {canRepeatTransaction && <SendModal isOpen={sendModalOpen} onClose={onClose} {...sendModalParams} />}\n    </InfoDetails>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport React, { ReactElement, useState } from 'react'\n\nimport Paragraph from 'src/components/layout/Paragraph'\nimport LinkWithRef from 'src/components/layout/Link'\nimport { textShortener } from 'src/utils/strings'\n\nexport const styles = createStyles({\n  txDataParagraph: {\n    whiteSpace: 'normal',\n  },\n  linkTxData: {\n    textDecoration: 'underline',\n    cursor: 'pointer',\n  },\n})\n\nconst useStyles = makeStyles(styles)\n\nexport const HexEncodedData = ({\n  hexData,\n  title,\n  limit = 20,\n}: {\n  hexData: string\n  title?: string\n  limit?: number\n}): ReactElement => {\n  const classes = useStyles()\n  const [showTxData, setShowTxData] = useState(false)\n  const showExpandBtn = hexData.length > limit\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\n\n  return (\n    <div className=\"tx-hexData\">\n      {title && (\n        <Text size=\"xl\" strong>\n          {title}:\n        </Text>\n      )}\n      <Paragraph className={classes.txDataParagraph} noMargin size=\"md\">\n        {showExpandBtn ? (\n          <>\n            {showTxData ? (\n              <>\n                {hexData}{' '}\n                <LinkWithRef\n                  aria-label=\"Hide details of the transaction\"\n                  className={classes.linkTxData}\n                  onClick={() => setShowTxData(false)}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  Show Less\n                </LinkWithRef>\n              </>\n            ) : (\n              <>\n                {shortener(hexData)}{' '}\n                <LinkWithRef\n                  aria-label=\"Show details of the transaction\"\n                  className={classes.linkTxData}\n                  onClick={() => setShowTxData(true)}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  Show More\n                </LinkWithRef>\n              </>\n            )}\n          </>\n        ) : (\n          hexData\n        )}\n      </Paragraph>\n    </div>\n  )\n}\n","import { Text, EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport {\n  isAddress,\n  isArrayParameter,\n} from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\nimport { HexEncodedData } from './HexEncodedData'\nimport { getExplorerInfo } from 'src/config'\n\nconst NestedWrapper = styled.div`\n  padding-left: 4px;\n`\n\ninterface RenderValueProps {\n  method: string\n  type: string\n  value: string | string[]\n}\n\nconst GenericValue = ({ method, type, value }: RenderValueProps): React.ReactElement => {\n  const getTextValue = (value: string) => <HexEncodedData limit={60} hexData={value} />\n\n  const getArrayValue = (parentId: string, value: string[] | string) => (\n    <div>\n      [\n      <NestedWrapper>\n        {(value as string[]).map((currentValue, index) => {\n          const key = `${parentId}-value-${index}`\n          return Array.isArray(currentValue) ? (\n            <Text key={key} size=\"xl\">\n              {getArrayValue(key, currentValue)}\n            </Text>\n          ) : (\n            getTextValue(currentValue)\n          )\n        })}\n      </NestedWrapper>\n      ]\n    </div>\n  )\n\n  if (isArrayParameter(type) || Array.isArray(value)) {\n    return getArrayValue(method, value)\n  }\n\n  return getTextValue(value as string)\n}\n\nconst Value = ({ type, ...props }: RenderValueProps): React.ReactElement => {\n  if (isArrayParameter(type) && isAddress(type)) {\n    return (\n      <div>\n        [\n        <NestedWrapper>\n          {(props.value as string[]).map((address) => {\n            const explorerUrl = getExplorerInfo(address)\n            return <EthHashInfo key={address} textSize=\"xl\" hash={address} showCopyBtn explorerUrl={explorerUrl} />\n          })}\n        </NestedWrapper>\n        ]\n      </div>\n    )\n  }\n\n  if (isAddress(type)) {\n    const explorerUrl = getExplorerInfo(props.value as string)\n    return (\n      <EthHashInfo textSize=\"xl\" hash={props.value as string} showCopyBtn explorerUrl={explorerUrl} shortenHash={4} />\n    )\n  }\n\n  return <GenericValue type={type} {...props} />\n}\n\nexport default Value\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { isArrayParameter } from 'src/routes/safe/components/Balances/SendModal/screens/ContractInteraction/utils'\nimport Value from 'src/routes/safe/components/Transactions/TxList/MethodValue'\nimport { DataDecoded } from '@gnosis.pm/safe-react-gateway-sdk'\n\nconst TxDetailsMethodParam = styled.div<{ isArrayParameter: boolean }>`\n  padding-left: 24px;\n  display: ${({ isArrayParameter }) => (isArrayParameter ? 'block' : 'flex')};\n  align-items: center;\n\n  p:first-of-type {\n    margin-right: ${({ isArrayParameter }) => (isArrayParameter ? '0' : '4px')};\n  }\n`\n\nconst TxInfo = styled.div`\n  padding: 8px 0;\n`\n\nconst StyledMethodName = styled(Text)`\n  white-space: nowrap;\n`\n\nexport const MethodDetails = ({ data }: { data: DataDecoded }): React.ReactElement => {\n  return (\n    <TxInfo>\n      <Text size=\"xl\" strong>\n        {data.method}\n      </Text>\n\n      {data.parameters?.map((param, index) => (\n        <TxDetailsMethodParam key={`${data.method}_param-${index}`} isArrayParameter={isArrayParameter(param.type)}>\n          <StyledMethodName size=\"xl\" strong>\n            {param.name}({param.type}):\n          </StyledMethodName>\n          <Value method={data.method} type={param.type} value={param.value as string} />\n        </TxDetailsMethodParam>\n      ))}\n    </TxInfo>\n  )\n}\n","import { AccordionSummary, IconText } from '@gnosis.pm/safe-react-components'\nimport { DataDecoded } from '@gnosis.pm/safe-react-gateway-sdk'\nimport React, { ReactElement, ReactNode } from 'react'\n\nimport { getNetworkInfo } from 'src/config'\nimport { TransactionData } from 'src/logic/safe/store/models/types/gateway.d'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { HexEncodedData } from './HexEncodedData'\nimport { MethodDetails } from './MethodDetails'\nimport { isSpendingLimitMethod } from './SpendingLimitDetails'\nimport { ColumnDisplayAccordionDetails, ActionAccordion } from './styled'\nimport { TxInfoDetails } from './TxInfoDetails'\n\ntype MultiSendTxGroupProps = {\n  actionTitle: string\n  children: ReactNode\n  txDetails: {\n    title: string\n    address: string\n    dataDecoded: DataDecoded | null\n  }\n}\n\nconst MultiSendTxGroup = ({ actionTitle, children, txDetails }: MultiSendTxGroupProps): ReactElement => {\n  return (\n    <ActionAccordion>\n      <AccordionSummary>\n        <IconText iconSize=\"sm\" iconType=\"code\" text={actionTitle} textSize=\"xl\" />\n      </AccordionSummary>\n      <ColumnDisplayAccordionDetails>\n        {!isSpendingLimitMethod(txDetails.dataDecoded?.method) && (\n          <TxInfoDetails title={txDetails.title} address={txDetails.address} />\n        )}\n        {children}\n      </ColumnDisplayAccordionDetails>\n    </ActionAccordion>\n  )\n}\n\nconst { nativeCoin } = getNetworkInfo()\n\nexport const MultiSendDetails = ({ txData }: { txData: TransactionData }): ReactElement | null => {\n  // no parameters for the `multiSend`\n  if (!txData.dataDecoded?.parameters) {\n    // we render the hex encoded data\n    if (txData.hexData) {\n      return <HexEncodedData title=\"Data (hex encoded)\" hexData={txData.hexData} />\n    }\n\n    return null\n  }\n\n  // multiSend has one parameter `transactions` therefore `txData.dataDecoded.parameters[0]` is safe to be used here\n  return (\n    <>\n      {txData.dataDecoded.parameters[0].valueDecoded?.map(({ dataDecoded }, index, valuesDecoded) => {\n        let details\n        const { data, value, to } = valuesDecoded[index]\n        const actionTitle = `Action ${index + 1} ${dataDecoded ? `(${dataDecoded.method})` : ''}`\n        const amount = value ? fromTokenUnit(value, nativeCoin.decimals) : 0\n        const title = `Send ${amount} ${nativeCoin.name} to:`\n\n        if (dataDecoded) {\n          // Backend decoded data\n          details = <MethodDetails data={dataDecoded} />\n        } else {\n          // We couldn't decode it but we have data\n          details = data && <HexEncodedData title=\"Data (hex encoded)\" hexData={data} />\n        }\n\n        return (\n          <MultiSendTxGroup\n            key={`${data ?? to}-${index}`}\n            actionTitle={actionTitle}\n            txDetails={{ title, address: to, dataDecoded }}\n          >\n            {details}\n          </MultiSendTxGroup>\n        )\n      })}\n    </>\n  )\n}\n","import React, { ReactElement, ReactNode } from 'react'\n\nimport { getNetworkInfo } from 'src/config'\nimport { ExpandedTxDetails, isCustomTxInfo, TransactionData } from 'src/logic/safe/store/models/types/gateway.d'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport {\n  DeleteSpendingLimitDetails,\n  isDeleteAllowance,\n  isSetAllowance,\n  ModifySpendingLimitDetails,\n} from './SpendingLimitDetails'\nimport { TxInfoDetails } from './TxInfoDetails'\nimport { sameString } from 'src/utils/strings'\nimport { HexEncodedData } from './HexEncodedData'\nimport { MethodDetails } from './MethodDetails'\nimport { MultiSendDetails } from './MultiSendDetails'\nimport { TransactionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\n\nconst { nativeCoin } = getNetworkInfo()\n\ntype DetailsWithTxInfoProps = {\n  children: ReactNode\n  txData: TransactionData\n  txInfo: TransactionInfo\n}\n\nconst DetailsWithTxInfo = ({ children, txData, txInfo }: DetailsWithTxInfoProps): ReactElement => {\n  const amount = txData.value ? fromTokenUnit(txData.value, nativeCoin.decimals) : 'n/a'\n  let name\n  let avatarUrl\n\n  if (isCustomTxInfo(txInfo) && txInfo.toInfo) {\n    name = txInfo.toInfo.name\n    avatarUrl = txInfo.toInfo.logoUri\n  }\n\n  return (\n    <>\n      <TxInfoDetails\n        address={txData.to}\n        name={name}\n        avatarUrl={avatarUrl}\n        title={`Send ${amount} ${nativeCoin.symbol} to:`}\n      />\n\n      {children}\n    </>\n  )\n}\n\ntype TxDataProps = {\n  txData: ExpandedTxDetails['txData']\n  txInfo: TransactionInfo\n}\n\nexport const TxData = ({ txData, txInfo }: TxDataProps): ReactElement | null => {\n  // nothing to render\n  if (!txData) {\n    return null\n  }\n\n  // unknown tx information\n  if (!txData.dataDecoded) {\n    // no hex data, nothing to render\n    if (!txData.hexData) {\n      return null\n    }\n\n    // we render the hex encoded data\n    return (\n      <DetailsWithTxInfo txData={txData} txInfo={txInfo}>\n        <HexEncodedData title=\"Data (hex encoded)\" hexData={txData.hexData} />\n      </DetailsWithTxInfo>\n    )\n  }\n\n  // known data and particularly `multiSend` data type\n  if (sameString(txData.dataDecoded.method, 'multiSend')) {\n    return <MultiSendDetails txData={txData} />\n  }\n\n  // FixMe: this way won't scale well\n  if (isSetAllowance(txData.dataDecoded.method)) {\n    return <ModifySpendingLimitDetails data={txData.dataDecoded} />\n  }\n\n  // FixMe: this way won't scale well\n  if (isDeleteAllowance(txData.dataDecoded.method)) {\n    return <DeleteSpendingLimitDetails data={txData.dataDecoded} />\n  }\n\n  // we render the decoded data\n  return (\n    <DetailsWithTxInfo txData={txData} txInfo={txInfo}>\n      <MethodDetails data={txData.dataDecoded} />\n    </DetailsWithTxInfo>\n  )\n}\n","import { Button, Tooltip } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { currentSafeNonce } from 'src/logic/safe/store/selectors'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useActionButtonsHandlers } from 'src/routes/safe/components/Transactions/TxList/hooks/useActionButtonsHandlers'\n\ntype TxExpandedActionsProps = {\n  transaction: Transaction\n}\n\nexport const TxExpandedActions = ({ transaction }: TxExpandedActionsProps): ReactElement | null => {\n  const {\n    canCancel,\n    handleConfirmButtonClick,\n    handleCancelButtonClick,\n    handleOnMouseEnter,\n    handleOnMouseLeave,\n    isPending,\n    disabledActions,\n  } = useActionButtonsHandlers(transaction)\n  const nonce = useSelector(currentSafeNonce)\n\n  const onExecuteOrConfirm = (event) => {\n    handleOnMouseLeave()\n    handleConfirmButtonClick(event)\n  }\n\n  const getConfirmTooltipTitle = () => {\n    if (transaction.txStatus === 'AWAITING_EXECUTION') {\n      return transaction.executionInfo?.nonce === nonce\n        ? 'Execute'\n        : `Transaction with nonce ${nonce} needs to be executed first`\n    }\n    return 'Confirm'\n  }\n\n  // There is a problem in chrome that produces onMouseLeave event not being triggered properly.\n  // https://github.com/facebook/react/issues/4492\n  return (\n    <>\n      <Tooltip title={getConfirmTooltipTitle()} placement=\"top\">\n        <span>\n          <Button\n            size=\"md\"\n            color=\"primary\"\n            disabled={disabledActions}\n            onClick={onExecuteOrConfirm}\n            onMouseEnter={handleOnMouseEnter}\n            onMouseLeave={handleOnMouseLeave}\n            className=\"primary\"\n          >\n            {transaction.txStatus === 'AWAITING_EXECUTION' ? 'Execute' : 'Confirm'}\n          </Button>\n        </span>\n      </Tooltip>\n      {canCancel && (\n        <Button size=\"md\" color=\"error\" onClick={handleCancelButtonClick} className=\"error\" disabled={isPending}>\n          Reject\n        </Button>\n      )}\n    </>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport { SettingsChange } from '@gnosis.pm/safe-react-gateway-sdk'\nimport React, { ReactElement } from 'react'\n\nimport { AddressInfo } from './AddressInfo'\nimport { InfoDetails } from './InfoDetails'\nimport { TxInfoDetails } from './TxInfoDetails'\n\ntype TxInfoSettingsProps = {\n  settingsInfo: SettingsChange['settingsInfo']\n}\n\nexport const TxInfoSettings = ({ settingsInfo }: TxInfoSettingsProps): ReactElement | null => {\n  if (!settingsInfo) {\n    return null\n  }\n\n  switch (settingsInfo.type) {\n    case 'SET_FALLBACK_HANDLER': {\n      return <InfoDetails title=\"Set fallback handler:\">{settingsInfo.handler}</InfoDetails>\n    }\n    case 'ADD_OWNER': {\n      return (\n        <InfoDetails title=\"Add owner:\">\n          <AddressInfo address={settingsInfo.owner} />\n          <InfoDetails title=\"Change required confirmations:\">{settingsInfo.threshold}</InfoDetails>\n        </InfoDetails>\n      )\n    }\n    case 'REMOVE_OWNER': {\n      return (\n        <InfoDetails title=\"Remove owner:\">\n          <AddressInfo address={settingsInfo.owner} />\n          <InfoDetails title=\"Change required confirmations:\">{settingsInfo.threshold}</InfoDetails>\n        </InfoDetails>\n      )\n    }\n    case 'SWAP_OWNER': {\n      return (\n        <InfoDetails title=\"Swap owner:\">\n          <TxInfoDetails title=\"Old owner\" address={settingsInfo.oldOwner} />\n          <TxInfoDetails title=\"New owner\" address={settingsInfo.newOwner} />\n        </InfoDetails>\n      )\n    }\n    case 'CHANGE_THRESHOLD': {\n      return <InfoDetails title=\"Change required confirmations:\">{settingsInfo.threshold}</InfoDetails>\n    }\n    case 'CHANGE_IMPLEMENTATION': {\n      return (\n        <InfoDetails title=\"Change implementation:\">\n          <Text size=\"md\" strong>\n            {settingsInfo.implementation}\n          </Text>\n        </InfoDetails>\n      )\n    }\n    case 'ENABLE_MODULE': {\n      return (\n        <InfoDetails title=\"Enable module:\">\n          <AddressInfo address={settingsInfo.module} />\n        </InfoDetails>\n      )\n    }\n    case 'DISABLE_MODULE': {\n      return (\n        <InfoDetails title=\"Disable module:\">\n          <AddressInfo address={settingsInfo.module} />\n        </InfoDetails>\n      )\n    }\n    default:\n      return null\n  }\n}\n","import { Transfer } from '@gnosis.pm/safe-react-gateway-sdk'\nimport React, { ReactElement, useEffect, useState } from 'react'\n\nimport { useAssetInfo } from './hooks/useAssetInfo'\nimport { TxInfoDetails } from './TxInfoDetails'\n\nexport const TxInfoTransfer = ({ txInfo }: { txInfo: Transfer }): ReactElement | null => {\n  const assetInfo = useAssetInfo(txInfo)\n  const [details, setDetails] = useState<{ title: string; address: string } | undefined>()\n\n  useEffect(() => {\n    if (assetInfo && assetInfo.type === 'Transfer') {\n      if (txInfo.direction === 'INCOMING') {\n        setDetails({ title: `Received ${assetInfo.amountWithSymbol} from:`, address: txInfo.sender })\n      } else {\n        setDetails({ title: `Send ${assetInfo.amountWithSymbol} to:`, address: txInfo.recipient })\n      }\n    }\n  }, [assetInfo, txInfo.direction, txInfo.recipient, txInfo.sender])\n\n  return details ? (\n    <TxInfoDetails title={details.title} address={details.address} isTransferType txInfo={txInfo} />\n  ) : null\n}\n","import { SettingsChange, TransactionInfo } from '@gnosis.pm/safe-react-gateway-sdk'\nimport React, { ReactElement } from 'react'\n\nimport { isSettingsChangeTxInfo, isTransferTxInfo } from 'src/logic/safe/store/models/types/gateway.d'\nimport { TxInfoSettings } from './TxInfoSettings'\nimport { TxInfoTransfer } from './TxInfoTransfer'\n\nexport const TxInfo = ({ txInfo }: { txInfo: TransactionInfo }): ReactElement | null => {\n  if (isSettingsChangeTxInfo(txInfo)) {\n    return <TxInfoSettings settingsInfo={(txInfo as SettingsChange).settingsInfo} />\n  }\n\n  if (isTransferTxInfo(txInfo)) {\n    return <TxInfoTransfer txInfo={txInfo} />\n  }\n\n  return null\n}\n","export default __webpack_public_path__ + \"static/media/transactions-list-active.275ff76c.svg\";","export default __webpack_public_path__ + \"static/media/transactions-list-inactive.362550b8.svg\";","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { getExplorerInfo } from 'src/config'\nimport { addressBookEntryName } from 'src/logic/addressBook/store/selectors'\nimport { ADDRESS_BOOK_DEFAULT_NAME } from 'src/logic/addressBook/model/addressBook'\nimport { sameString } from 'src/utils/strings'\n\nexport const OwnerRow = ({ address }: { address: string }): ReactElement => {\n  const ownerName = useSelector((state) => addressBookEntryName(state, { address }))\n\n  return (\n    <EthHashInfo\n      hash={address}\n      name={sameString(ownerName, ADDRESS_BOOK_DEFAULT_NAME) ? undefined : ownerName}\n      showAvatar\n      showCopyBtn\n      explorerUrl={getExplorerInfo(address)}\n      shortenHash={4}\n      className=\"owner-info\"\n    />\n  )\n}\n","import { Text, Icon } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\nimport styled from 'styled-components'\n\nimport Img from 'src/components/layout/Img'\nimport { ExpandedTxDetails, isModuleExecutionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport TransactionListActive from './assets/transactions-list-active.svg'\nimport TransactionListInactive from './assets/transactions-list-inactive.svg'\nimport { OwnerRow } from './OwnerRow'\nimport { OwnerList, OwnerListItem } from './styled'\nimport { isCancelTxDetails } from './utils'\n\nconst StyledImg = styled(Img)`\n  background-color: transparent;\n  border-radius: 50%;\n`\n\nexport const TxOwners = ({ txDetails }: { txDetails: ExpandedTxDetails }): ReactElement | null => {\n  const { txInfo, detailedExecutionInfo } = txDetails\n\n  if (!detailedExecutionInfo || isModuleExecutionDetails(detailedExecutionInfo)) {\n    return null\n  }\n\n  const confirmationsNeeded = detailedExecutionInfo.confirmationsRequired - detailedExecutionInfo.confirmations.length\n\n  const CreationNode = isCancelTxDetails(txInfo) ? (\n    <OwnerListItem>\n      <span className=\"icon\">\n        <Icon size=\"sm\" type=\"circleCross\" color=\"error\" />\n      </span>\n      <div className=\"legend\">\n        <Text color=\"error\" size=\"xl\" strong>\n          On-chain rejection created\n        </Text>\n      </div>\n    </OwnerListItem>\n  ) : (\n    <OwnerListItem>\n      <span className=\"icon\">\n        <Icon size=\"sm\" type=\"add\" color=\"primary\" />\n      </span>\n      <div className=\"legend\">\n        <Text color=\"primary\" size=\"xl\" strong>\n          Created\n        </Text>\n      </div>\n    </OwnerListItem>\n  )\n\n  return (\n    <OwnerList>\n      {CreationNode}\n      {detailedExecutionInfo.confirmations.map(({ signer }) => (\n        <OwnerListItem key={signer}>\n          <span className=\"icon\">\n            <Icon size=\"sm\" type=\"circleCheck\" color=\"primary\" />\n          </span>\n          <div className=\"legend\">\n            <Text color=\"primary\" size=\"xl\" strong>\n              Confirmed\n            </Text>\n            <OwnerRow address={signer} />\n          </div>\n        </OwnerListItem>\n      ))}\n      {confirmationsNeeded <= 0 ? (\n        <OwnerListItem>\n          <span className=\"icon\">\n            {detailedExecutionInfo.executor ? (\n              <Icon type=\"circleCheck\" size=\"sm\" color=\"primary\" />\n            ) : (\n              <StyledImg alt=\"\" src={TransactionListActive} />\n            )}\n          </span>\n          <div className=\"legend\">\n            <Text color=\"primary\" size=\"xl\" strong>\n              {detailedExecutionInfo.executor ? 'Executed' : 'Execute'}\n            </Text>\n            {detailedExecutionInfo.executor && <OwnerRow address={detailedExecutionInfo.executor} />}\n          </div>\n        </OwnerListItem>\n      ) : (\n        <OwnerListItem>\n          <span className=\"icon\">\n            <StyledImg alt=\"\" src={TransactionListInactive} />\n          </span>\n          <div className=\"legend\">\n            <Text color=\"icon\" size=\"xl\" strong>\n              Execute ({confirmationsNeeded} more {confirmationsNeeded === 1 ? 'confirmation' : 'confirmations'} needed)\n            </Text>\n          </div>\n        </OwnerListItem>\n      )}\n    </OwnerList>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\n\nimport { getExplorerInfo } from 'src/config'\nimport { formatDateTime } from 'src/utils/date'\nimport { ExpandedTxDetails, isMultiSigExecutionDetails, Operation } from 'src/logic/safe/store/models/types/gateway.d'\nimport { InlineEthHashInfo } from './styled'\nimport { NOT_AVAILABLE } from './utils'\n\nexport const TxSummary = ({ txDetails }: { txDetails: ExpandedTxDetails }): ReactElement => {\n  const { txHash, detailedExecutionInfo, executedAt, txData } = txDetails\n  const explorerUrl = txHash ? getExplorerInfo(txHash) : null\n  const nonce = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.nonce : undefined\n  const created = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.submittedAt : undefined\n  const safeTxHash = isMultiSigExecutionDetails(detailedExecutionInfo) ? detailedExecutionInfo.safeTxHash : undefined\n\n  return (\n    <>\n      <div className=\"tx-hash\">\n        <Text size=\"xl\" strong as=\"span\">\n          Transaction hash:{' '}\n        </Text>\n        {txHash ? (\n          <InlineEthHashInfo textSize=\"xl\" hash={txHash} shortenHash={8} showCopyBtn explorerUrl={explorerUrl} />\n        ) : (\n          <Text size=\"xl\" as=\"span\">\n            {NOT_AVAILABLE}\n          </Text>\n        )}\n      </div>\n      {safeTxHash !== undefined && (\n        <div className=\"tx-hash\">\n          <Text size=\"xl\" strong as=\"span\">\n            SafeTxHash:{' '}\n          </Text>\n          <InlineEthHashInfo textSize=\"xl\" hash={safeTxHash} shortenHash={8} showCopyBtn />\n        </div>\n      )}\n      {nonce !== undefined && (\n        <div className=\"tx-nonce\">\n          <Text size=\"xl\" strong as=\"span\">\n            Nonce:{' '}\n          </Text>\n          <Text size=\"xl\" as=\"span\">\n            {nonce}\n          </Text>\n        </div>\n      )}\n      {created && (\n        <div className=\"tx-created\">\n          <Text size=\"xl\" strong as=\"span\">\n            Created:{' '}\n          </Text>\n          <Text size=\"xl\" as=\"span\">\n            {formatDateTime(created)}\n          </Text>\n        </div>\n      )}\n      <div className=\"tx-executed\">\n        <Text size=\"xl\" strong as=\"span\">\n          Executed:{' '}\n        </Text>\n        <Text size=\"xl\" as=\"span\">\n          {executedAt ? formatDateTime(executedAt) : NOT_AVAILABLE}\n        </Text>\n      </div>\n      {txData?.operation === Operation.DELEGATE && (\n        <div className=\"tx-operation\">\n          <Text size=\"xl\" strong as=\"span\">\n            Delegate Call\n          </Text>\n        </div>\n      )}\n    </>\n  )\n}\n","import { Icon, Link, Loader, Text } from '@gnosis.pm/safe-react-components'\nimport cn from 'classnames'\nimport React, { ReactElement, useContext } from 'react'\nimport styled from 'styled-components'\n\nimport {\n  ExpandedTxDetails,\n  isMultiSendTxInfo,\n  isSettingsChangeTxInfo,\n  isTransferTxInfo,\n  MultiSigExecutionDetails,\n  Transaction,\n} from 'src/logic/safe/store/models/types/gateway.d'\nimport { TransactionActions } from './hooks/useTransactionActions'\nimport { useTransactionDetails } from './hooks/useTransactionDetails'\nimport { TxDetailsContainer, Centered, AlignItemsWithMargin } from './styled'\nimport { TxData } from './TxData'\nimport { TxExpandedActions } from './TxExpandedActions'\nimport { TxInfo } from './TxInfo'\nimport { TxLocationContext } from './TxLocationProvider'\nimport { TxOwners } from './TxOwners'\nimport { TxSummary } from './TxSummary'\nimport { isCancelTxDetails, NOT_AVAILABLE } from './utils'\n\nconst NormalBreakingText = styled(Text)`\n  line-break: normal;\n  word-break: normal;\n`\n\nconst TxDataGroup = ({ txDetails }: { txDetails: ExpandedTxDetails }): ReactElement | null => {\n  if (isTransferTxInfo(txDetails.txInfo) || isSettingsChangeTxInfo(txDetails.txInfo)) {\n    return <TxInfo txInfo={txDetails.txInfo} />\n  }\n\n  if (isCancelTxDetails(txDetails.txInfo)) {\n    const txNonce = `${(txDetails.detailedExecutionInfo as MultiSigExecutionDetails).nonce ?? NOT_AVAILABLE}`\n    const isTxExecuted = txDetails.executedAt\n\n    // executed rejection transaction\n    let message = `This is an on-chain rejection that didn't send any funds.\n     This on-chain rejection replaced all transactions with nonce ${txNonce}.`\n\n    if (!isTxExecuted) {\n      // queued rejection transaction\n      message = `This is an on-chain rejection that doesn't send any funds.\n Executing this on-chain rejection will replace all currently awaiting transactions with nonce ${txNonce}.`\n    }\n    return (\n      <>\n        <NormalBreakingText size=\"xl\">{message}</NormalBreakingText>\n        {!isTxExecuted && (\n          <>\n            <br />\n            <Link\n              href=\"https://help.gnosis-safe.io/en/articles/4738501-why-do-i-need-to-pay-for-cancelling-a-transaction\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title=\"Why do I need to pay for rejecting a transaction?\"\n            >\n              <AlignItemsWithMargin>\n                <Text size=\"xl\" as=\"span\" color=\"primary\">\n                  Why do I need to pay for rejecting a transaction?\n                </Text>\n                <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n              </AlignItemsWithMargin>\n            </Link>\n          </>\n        )}\n      </>\n    )\n  }\n\n  if (!txDetails.txData) {\n    return null\n  }\n\n  return <TxData txData={txDetails.txData} txInfo={txDetails.txInfo} />\n}\n\ntype TxDetailsProps = {\n  transaction: Transaction\n  actions?: TransactionActions\n}\n\nexport const TxDetails = ({ transaction, actions }: TxDetailsProps): ReactElement => {\n  const { txLocation } = useContext(TxLocationContext)\n  const { data, loading } = useTransactionDetails(transaction.id)\n\n  if (loading) {\n    return (\n      <Centered padding={10}>\n        <Loader size=\"sm\" />\n      </Centered>\n    )\n  }\n\n  if (!data) {\n    return (\n      <TxDetailsContainer>\n        <Text size=\"xl\" strong>\n          No data available\n        </Text>\n      </TxDetailsContainer>\n    )\n  }\n\n  return (\n    <TxDetailsContainer>\n      <div className={cn('tx-summary', { 'will-be-replaced': transaction.txStatus === 'WILL_BE_REPLACED' })}>\n        <TxSummary txDetails={data} />\n      </div>\n      <div\n        className={cn('tx-details', {\n          'no-padding': isMultiSendTxInfo(data.txInfo),\n          'not-executed': !data.executedAt,\n          'will-be-replaced': transaction.txStatus === 'WILL_BE_REPLACED',\n        })}\n      >\n        <TxDataGroup txDetails={data} />\n      </div>\n      <div\n        className={cn('tx-owners', {\n          'no-owner': txLocation !== 'history' && !actions?.isUserAnOwner,\n          'will-be-replaced': transaction.txStatus === 'WILL_BE_REPLACED',\n        })}\n      >\n        <TxOwners txDetails={data} />\n      </div>\n      {!data.executedAt && txLocation !== 'history' && actions?.isUserAnOwner && (\n        <div className={cn('tx-details-actions', { 'will-be-replaced': transaction.txStatus === 'WILL_BE_REPLACED' })}>\n          <TxExpandedActions transaction={transaction} />\n        </div>\n      )}\n    </TxDetailsContainer>\n  )\n}\n","import { useContext, useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { ExpandedTxDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { fetchTransactionDetails } from 'src/logic/safe/store/actions/fetchTransactionDetails'\nimport { TxLocationContext } from 'src/routes/safe/components/Transactions/TxList/TxLocationProvider'\nimport { getTransactionDetails } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { AppReduxState } from 'src/store'\n\nexport type LoadTransactionDetails = {\n  data?: ExpandedTxDetails\n  loading: boolean\n}\n\nexport const useTransactionDetails = (transactionId: string): LoadTransactionDetails => {\n  const { txLocation } = useContext(TxLocationContext)\n  const dispatch = useRef(useDispatch())\n  const [txDetails, setTxDetails] = useState<LoadTransactionDetails>({\n    loading: true,\n    data: undefined,\n  })\n  const data = useSelector((state: AppReduxState) =>\n    getTransactionDetails(state)({ attributeValue: transactionId, attributeName: 'id', txLocation }),\n  )\n\n  useEffect(() => {\n    if (data) {\n      setTxDetails({ loading: false, data })\n    } else {\n      // lookup tx details\n      dispatch.current(fetchTransactionDetails({ transactionId, txLocation }))\n    }\n  }, [data, transactionId, txLocation])\n\n  return txDetails\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\n\nimport { getExplorerInfo } from 'src/config'\nimport { formatDateTime } from 'src/utils/date'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { NOT_AVAILABLE } from './utils'\nimport { InlineEthHashInfo, TxDetailsContainer } from './styled'\nimport { Creation } from '@gnosis.pm/safe-react-gateway-sdk'\n\nexport const TxInfoCreation = ({ transaction }: { transaction: Transaction }): ReactElement | null => {\n  const txInfo = transaction.txInfo as Creation\n  const timestamp = transaction.timestamp\n\n  return (\n    <TxDetailsContainer>\n      <div className=\"tx-summary\">\n        <div className=\"tx-hash\">\n          <Text size=\"xl\" strong as=\"span\">\n            Transaction hash:{' '}\n          </Text>\n          <InlineEthHashInfo\n            textSize=\"xl\"\n            hash={txInfo.transactionHash}\n            shortenHash={8}\n            showCopyBtn\n            explorerUrl={getExplorerInfo(txInfo.transactionHash)}\n          />\n        </div>\n        <div className=\"tx-created\">\n          <Text size=\"xl\" strong as=\"span\">\n            Created:{' '}\n          </Text>\n          <Text size=\"xl\" as=\"span\">\n            {formatDateTime(timestamp)}\n          </Text>\n        </div>\n        <div className=\"tx-creator\">\n          <Text size=\"xl\" strong as=\"span\">\n            Creator:{' '}\n          </Text>\n          <InlineEthHashInfo\n            textSize=\"xl\"\n            hash={txInfo.creator}\n            shortenHash={4}\n            showCopyBtn\n            explorerUrl={getExplorerInfo(txInfo.creator)}\n          />\n        </div>\n        <div className=\"tx-factory\">\n          <Text size=\"xl\" strong as=\"span\">\n            Factory:{' '}\n          </Text>\n          {txInfo.factory ? (\n            <InlineEthHashInfo\n              textSize=\"xl\"\n              hash={txInfo.factory}\n              shortenHash={4}\n              showCopyBtn\n              explorerUrl={getExplorerInfo(txInfo.factory)}\n            />\n          ) : (\n            <Text size=\"xl\" as=\"span\">\n              {NOT_AVAILABLE}\n            </Text>\n          )}\n        </div>\n        <div className=\"tx-mastercopy\">\n          <Text size=\"xl\" strong as=\"span\">\n            Mastercopy:{' '}\n          </Text>\n          {txInfo.implementation ? (\n            <InlineEthHashInfo\n              textSize=\"xl\"\n              hash={txInfo.implementation}\n              shortenHash={4}\n              showCopyBtn\n              explorerUrl={getExplorerInfo(txInfo.implementation)}\n            />\n          ) : (\n            <Text size=\"xl\" as=\"span\">\n              {NOT_AVAILABLE}\n            </Text>\n          )}\n        </div>\n      </div>\n      <div />\n    </TxDetailsContainer>\n  )\n}\n","import { AccordionDetails } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\n\nimport { isCreationTxInfo, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { NoPaddingAccordion, StyledAccordionSummary } from './styled'\nimport { TxHistoryCollapsed } from './TxHistoryCollapsed'\nimport { TxDetails } from './TxDetails'\nimport { TxInfoCreation } from './TxInfoCreation'\n\nexport const TxHistoryRow = ({ transaction }: { transaction: Transaction }): ReactElement => (\n  <NoPaddingAccordion\n    TransitionProps={{\n      mountOnEnter: false,\n      unmountOnExit: true,\n      appear: true,\n    }}\n  >\n    <StyledAccordionSummary>\n      <TxHistoryCollapsed transaction={transaction} />\n    </StyledAccordionSummary>\n    <AccordionDetails>\n      {isCreationTxInfo(transaction.txInfo) ? (\n        <TxInfoCreation transaction={transaction} />\n      ) : (\n        <TxDetails transaction={transaction} />\n      )}\n    </AccordionDetails>\n  </NoPaddingAccordion>\n)\n","import React, { ReactElement, useContext } from 'react'\n\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { TxsInfiniteScrollContext } from 'src/routes/safe/components/Transactions/TxList/TxsInfiniteScroll'\nimport { formatWithSchema } from 'src/utils/date'\nimport { sameString } from 'src/utils/strings'\nimport { StyledTransactions, StyledTransactionsGroup, SubTitle } from './styled'\nimport { TxHistoryRow } from './TxHistoryRow'\nimport { TxLocationContext } from './TxLocationProvider'\n\nexport const HistoryTxList = ({ transactions }: { transactions: TransactionDetails['transactions'] }): ReactElement => {\n  const { lastItemId, setLastItemId } = useContext(TxsInfiniteScrollContext)\n\n  const [, lastTransactionsGroup] = transactions[transactions.length - 1]\n  const lastTransaction = lastTransactionsGroup[lastTransactionsGroup.length - 1]\n\n  if (!sameString(lastItemId, lastTransaction.id)) {\n    setLastItemId(lastTransaction.id)\n  }\n\n  return (\n    <TxLocationContext.Provider value={{ txLocation: 'history' }}>\n      {transactions?.map(([timestamp, txs]) => (\n        <StyledTransactionsGroup key={timestamp}>\n          <SubTitle size=\"lg\">{formatWithSchema(Number(timestamp), 'MMM d, yyyy')}</SubTitle>\n          <StyledTransactions>\n            {txs.map((transaction) => (\n              <TxHistoryRow key={transaction.id} transaction={transaction} />\n            ))}\n          </StyledTransactions>\n        </StyledTransactionsGroup>\n      ))}\n    </TxLocationContext.Provider>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/no-transactions.0fc3884a.svg\";","import { Loader, Title } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\n\nimport { usePagedHistoryTransactions } from './hooks/usePagedHistoryTransactions'\nimport { Centered, NoTransactions } from './styled'\nimport { HistoryTxList } from './HistoryTxList'\nimport { TxsInfiniteScroll } from './TxsInfiniteScroll'\nimport Img from 'src/components/layout/Img'\nimport NoTransactionsImage from './assets/no-transactions.svg'\n\nexport const HistoryTransactions = (): ReactElement => {\n  const { count, hasMore, next, transactions, isLoading } = usePagedHistoryTransactions()\n\n  if (count === 0 && isLoading) {\n    return (\n      <Centered>\n        <Loader size=\"md\" />\n      </Centered>\n    )\n  }\n\n  if (count === 0) {\n    return (\n      <NoTransactions>\n        <Img alt=\"No Transactions yet\" src={NoTransactionsImage} />\n        <Title size=\"xs\">History transactions will appear here </Title>\n      </NoTransactions>\n    )\n  }\n\n  return (\n    <TxsInfiniteScroll next={next} hasMore={hasMore} isLoading={isLoading}>\n      <HistoryTxList transactions={transactions} />\n    </TxsInfiniteScroll>\n  )\n}\n","import { createStyles, makeStyles } from '@material-ui/core'\nimport { background, lg, md, sm } from 'src/theme/variables'\n\nexport const useStyles = makeStyles(\n  createStyles({\n    heading: {\n      padding: `${sm} ${lg}`,\n      justifyContent: 'space-between',\n      boxSizing: 'border-box',\n      height: '74px',\n    },\n    headingText: {\n      fontSize: lg,\n    },\n    closeIcon: {\n      height: '35px',\n      width: '35px',\n    },\n    container: {\n      padding: `${md} ${lg}`,\n    },\n    nonceNumber: {\n      marginTop: sm,\n      fontSize: md,\n    },\n    gasCostsContainer: {\n      backgroundColor: background,\n      padding: `0 ${lg}`,\n    },\n  }),\n)\n","import { Record } from 'immutable'\nimport { ConfirmationProps } from './types/confirmation'\n\nexport const makeConfirmation = Record<ConfirmationProps>({\n  owner: '',\n  type: 'initialised',\n  hash: '',\n  signature: null,\n})\n","import { List } from 'immutable'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport IconButton from '@material-ui/core/IconButton'\nimport Close from '@material-ui/icons/Close'\nimport React, { useMemo, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useStyles } from './style'\n\nimport Modal, { ButtonStatus, Modal as GenericModal } from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Bold from 'src/components/layout/Bold'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { processTransaction } from 'src/logic/safe/store/actions/processTransaction'\nimport { safeAddressFromUrl } from 'src/logic/safe/store/selectors'\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { useEstimationStatus } from 'src/logic/hooks/useEstimationStatus'\nimport { TransactionFees } from 'src/components/TransactionsFees'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { isThresholdReached } from 'src/routes/safe/components/Transactions/TxList/hooks/useTransactionActions'\nimport { Overwrite } from 'src/types/helpers'\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { makeConfirmation } from 'src/logic/safe/store/models/confirmation'\nimport { NOTIFICATIONS } from 'src/logic/notifications'\nimport {\n  ExpandedTxDetails,\n  isMultiSigExecutionDetails,\n  Operation,\n  Transaction,\n} from 'src/logic/safe/store/models/types/gateway.d'\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\nimport { Erc20Transfer, Erc721Transfer } from '@gnosis.pm/safe-react-gateway-sdk'\n\nexport const APPROVE_TX_MODAL_SUBMIT_BTN_TEST_ID = 'approve-tx-modal-submit-btn'\nexport const REJECT_TX_MODAL_SUBMIT_BTN_TEST_ID = 'reject-tx-modal-submit-btn'\n\nconst getModalTitleAndDescription = (thresholdReached, isCancelTx) => {\n  const modalInfo = {\n    title: 'Execute transaction rejection',\n    description: 'This action will execute this transaction.',\n  }\n\n  if (isCancelTx) {\n    return modalInfo\n  }\n\n  if (thresholdReached) {\n    modalInfo.title = 'Execute transaction'\n    modalInfo.description =\n      'This action will execute this transaction. A separate Transaction will be performed to submit the execution.'\n  } else {\n    modalInfo.title = 'Approve Transaction'\n    modalInfo.description =\n      'This action will approve this transaction. A separate Transaction will be performed to submit the approval.'\n  }\n\n  return modalInfo\n}\n\nconst useTxInfo = (transaction: Props['transaction']) => {\n  const t = useRef(transaction)\n  const safeAddress = useSelector(safeAddressFromUrl)\n\n  const confirmations = useMemo(\n    () =>\n      t.current.txDetails.detailedExecutionInfo && isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? List(\n            t.current.txDetails.detailedExecutionInfo.confirmations.map(({ signer, signature }) =>\n              makeConfirmation({ owner: signer, signature }),\n            ),\n          )\n        : List([]),\n    [],\n  )\n\n  const data = useMemo(() => t.current.txDetails.txData?.hexData ?? EMPTY_DATA, [])\n\n  const baseGas = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.baseGas\n        : 0,\n    [],\n  )\n\n  const gasPrice = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.gasPrice\n        : '0',\n    [],\n  )\n\n  const safeTxGas = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.safeTxGas\n        : 0,\n    [],\n  )\n\n  const gasToken = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.gasToken\n        : ZERO_ADDRESS,\n    [],\n  )\n\n  const nonce = useMemo(() => t.current.executionInfo?.nonce ?? 0, [])\n\n  const refundReceiver = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.refundReceiver\n        : ZERO_ADDRESS,\n    [],\n  )\n\n  const safeTxHash = useMemo(\n    () =>\n      isMultiSigExecutionDetails(t.current.txDetails.detailedExecutionInfo)\n        ? t.current.txDetails.detailedExecutionInfo.safeTxHash\n        : EMPTY_DATA,\n    [],\n  )\n\n  const value = useMemo(() => {\n    switch (t.current.txInfo.type) {\n      case 'Transfer':\n        if (t.current.txInfo.transferInfo.type === 'ETHER') {\n          return t.current.txInfo.transferInfo.value\n        } else {\n          return t.current.txDetails.txData?.value ?? '0'\n        }\n      case 'Custom':\n        return t.current.txInfo.value\n      case 'Creation':\n      case 'SettingsChange':\n      default:\n        return '0'\n    }\n  }, [])\n\n  const to = useMemo(() => {\n    switch (t.current.txInfo.type) {\n      case 'Transfer':\n        if (t.current.txInfo.transferInfo.type === 'ETHER') {\n          return t.current.txInfo.recipient\n        } else {\n          return (t.current.txInfo.transferInfo as Erc20Transfer | Erc721Transfer).tokenAddress\n        }\n      case 'Custom':\n        return t.current.txInfo.to\n      case 'Creation':\n      case 'SettingsChange':\n      default:\n        return safeAddress\n    }\n  }, [safeAddress])\n\n  const operation = useMemo(() => t.current.txDetails.txData?.operation ?? Operation.CALL, [])\n\n  const origin = useMemo(\n    () =>\n      t.current.safeAppInfo ? JSON.stringify({ name: t.current.safeAppInfo.name, url: t.current.safeAppInfo.url }) : '',\n    [],\n  )\n\n  const id = useMemo(() => t.current.id, [])\n\n  return {\n    confirmations,\n    data,\n    baseGas,\n    gasPrice,\n    safeTxGas,\n    gasToken,\n    nonce,\n    refundReceiver,\n    safeTxHash,\n    value,\n    to,\n    operation,\n    origin,\n    id,\n  }\n}\n\ntype Props = {\n  onClose: () => void\n  canExecute?: boolean\n  isCancelTx?: boolean\n  isOpen: boolean\n  transaction: Overwrite<Transaction, { txDetails: ExpandedTxDetails }>\n  txParameters: TxParameters\n}\n\nexport const ApproveTxModal = ({\n  onClose,\n  canExecute = false,\n  isCancelTx = false,\n  isOpen,\n  transaction,\n}: Props): React.ReactElement => {\n  const dispatch = useDispatch()\n  const userAddress = useSelector(userAccountSelector)\n  const classes = useStyles()\n  const safeAddress = useSelector(safeAddressFromUrl)\n  const [approveAndExecute, setApproveAndExecute] = useState(canExecute)\n  const thresholdReached = !!(transaction.executionInfo && isThresholdReached(transaction.executionInfo))\n  const _threshold = transaction.executionInfo?.confirmationsRequired ?? 0\n  const _countingCurrentConfirmation = (transaction.executionInfo?.confirmationsSubmitted ?? 0) + 1\n  const { description, title } = getModalTitleAndDescription(thresholdReached, isCancelTx)\n  const oneConfirmationLeft = !thresholdReached && _countingCurrentConfirmation === _threshold\n  const isTheTxReadyToBeExecuted = oneConfirmationLeft ? true : thresholdReached\n  const [manualGasPrice, setManualGasPrice] = useState<string | undefined>()\n  const [manualGasLimit, setManualGasLimit] = useState<string | undefined>()\n  const {\n    confirmations,\n    data,\n    baseGas,\n    gasPrice,\n    safeTxGas,\n    gasToken,\n    nonce,\n    refundReceiver,\n    safeTxHash,\n    value,\n    to,\n    operation,\n    origin,\n    id,\n  } = useTxInfo(transaction)\n  const {\n    gasLimit,\n    gasPriceFormatted,\n    gasCostFormatted,\n    txEstimationExecutionStatus,\n    isExecution,\n    isOffChainSignature,\n    isCreation,\n  } = useEstimateTransactionGas({\n    txRecipient: to,\n    txData: data,\n    txConfirmations: confirmations,\n    txAmount: value,\n    preApprovingOwner: approveAndExecute ? userAddress : undefined,\n    safeTxGas,\n    operation,\n    manualGasPrice,\n    manualGasLimit,\n  })\n\n  const [buttonStatus] = useEstimationStatus(txEstimationExecutionStatus)\n\n  const handleExecuteCheckbox = () => setApproveAndExecute((prevApproveAndExecute) => !prevApproveAndExecute)\n\n  const approveTx = (txParameters: TxParameters) => {\n    if (thresholdReached && confirmations.size < _threshold) {\n      dispatch(enqueueSnackbar(NOTIFICATIONS.TX_FETCH_SIGNATURES_ERROR_MSG))\n    } else {\n      dispatch(\n        processTransaction({\n          safeAddress,\n          tx: {\n            id,\n            baseGas,\n            confirmations,\n            data,\n            gasPrice,\n            gasToken,\n            nonce,\n            operation,\n            origin,\n            refundReceiver,\n            safeTxGas,\n            safeTxHash,\n            to,\n            value,\n          },\n          userAddress,\n          notifiedTransaction: TX_NOTIFICATION_TYPES.CONFIRMATION_TX,\n          approveAndExecute: canExecute && approveAndExecute && isTheTxReadyToBeExecuted,\n          ethParameters: txParameters,\n          thresholdReached,\n        }),\n      )\n    }\n    onClose()\n  }\n\n  const getParametersStatus = () => {\n    if (canExecute || approveAndExecute) {\n      return 'SAFE_DISABLED'\n    }\n\n    return 'DISABLED'\n  }\n\n  const closeEditModalCallback = (txParameters: TxParameters) => {\n    const oldGasPrice = Number(gasPriceFormatted)\n    const newGasPrice = Number(txParameters.ethGasPrice)\n\n    if (newGasPrice && oldGasPrice !== newGasPrice) {\n      setManualGasPrice(newGasPrice.toString())\n    }\n\n    if (txParameters.ethGasLimit && gasLimit !== txParameters.ethGasLimit) {\n      setManualGasLimit(txParameters.ethGasLimit.toString())\n    }\n  }\n\n  return (\n    <Modal description={description} handleClose={onClose} open={isOpen} title={title}>\n      <EditableTxParameters\n        isOffChainSignature={isOffChainSignature}\n        isExecution={isExecution}\n        parametersStatus={getParametersStatus()}\n        ethGasLimit={gasLimit}\n        ethGasPrice={gasPriceFormatted}\n        safeNonce={nonce.toString()}\n        safeTxGas={safeTxGas.toString()}\n        closeEditModalCallback={closeEditModalCallback}\n      >\n        {(txParameters, toggleEditMode) => {\n          return (\n            <>\n              {/* Header */}\n              <Row align=\"center\" className={classes.heading} grow>\n                <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\n                  {title}\n                </Paragraph>\n                <IconButton disableRipple onClick={onClose}>\n                  <Close className={classes.closeIcon} />\n                </IconButton>\n              </Row>\n\n              <Hairline />\n\n              {/* Tx info */}\n              <Block className={classes.container}>\n                <Row style={{ flexDirection: 'column' }}>\n                  <Paragraph>{description}</Paragraph>\n                  <Paragraph color=\"medium\" size=\"sm\">\n                    Transaction nonce:\n                    <br />\n                    <Bold className={classes.nonceNumber}>{nonce}</Bold>\n                  </Paragraph>\n\n                  {oneConfirmationLeft && canExecute && (\n                    <>\n                      <Paragraph color=\"error\">\n                        Approving this transaction executes it right away.\n                        {!isCancelTx &&\n                          ' If you want approve but execute the transaction manually later, click on the checkbox below.'}\n                      </Paragraph>\n\n                      {!isCancelTx && (\n                        <FormControlLabel\n                          control={\n                            <Checkbox checked={approveAndExecute} color=\"primary\" onChange={handleExecuteCheckbox} />\n                          }\n                          label=\"Execute transaction\"\n                          data-testid=\"execute-checkbox\"\n                        />\n                      )}\n                    </>\n                  )}\n\n                  {/* Tx Parameters */}\n                  {(approveAndExecute || !isOffChainSignature) && (\n                    <TxParametersDetail\n                      txParameters={txParameters}\n                      onEdit={toggleEditMode}\n                      parametersStatus={getParametersStatus()}\n                      isTransactionCreation={isCreation}\n                      isTransactionExecution={isExecution}\n                      isOffChainSignature={isOffChainSignature}\n                    />\n                  )}\n                </Row>\n              </Block>\n\n              {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\n                <Block className={classes.gasCostsContainer}>\n                  <TransactionFees\n                    gasCostFormatted={gasCostFormatted}\n                    isExecution={isExecution}\n                    isCreation={isCreation}\n                    isOffChainSignature={isOffChainSignature}\n                    txEstimationExecutionStatus={txEstimationExecutionStatus}\n                  />\n                </Block>\n              )}\n\n              {/* Footer */}\n              <GenericModal.Footer withoutBorder={buttonStatus !== ButtonStatus.LOADING}>\n                <GenericModal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onClose, text: 'Close' }}\n                  confirmButtonProps={{\n                    onClick: () => approveTx(txParameters),\n                    type: 'submit',\n                    status: buttonStatus,\n                    text: txEstimationExecutionStatus === EstimationStatus.LOADING ? 'Estimating' : undefined,\n                    testId: isCancelTx ? REJECT_TX_MODAL_SUBMIT_BTN_TEST_ID : APPROVE_TX_MODAL_SUBMIT_BTN_TEST_ID,\n                  }}\n                />\n              </GenericModal.Footer>\n            </>\n          )\n        }}\n      </EditableTxParameters>\n    </Modal>\n  )\n}\n","import { List } from 'immutable'\nimport { AnyAction } from 'redux'\nimport { ThunkAction } from 'redux-thunk'\n\nimport { getGnosisSafeInstanceAt } from 'src/logic/contracts/safeContracts'\nimport { getNotificationsFromTxType, NOTIFICATIONS } from 'src/logic/notifications'\nimport {\n  checkIfOffChainSignatureIsPossible,\n  generateSignaturesFromTxConfirmations,\n  getPreValidatedSignatures,\n} from 'src/logic/safe/safeTxSigner'\nimport { getApprovalTransaction, getExecutionTransaction, saveTxToHistory } from 'src/logic/safe/transactions'\nimport { tryOffChainSigning } from 'src/logic/safe/transactions/offchainSigner'\nimport * as aboutToExecuteTx from 'src/logic/safe/utils/aboutToExecuteTx'\nimport { currentSafeCurrentVersion } from 'src/logic/safe/store/selectors'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport { providerSelector } from 'src/logic/wallets/store/selectors'\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\nimport closeSnackbarAction from 'src/logic/notifications/store/actions/closeSnackbar'\nimport { fetchSafe } from 'src/logic/safe/store/actions/fetchSafe'\nimport fetchTransactions from 'src/logic/safe/store/actions/transactions/fetchTransactions'\nimport { getLastTx, getNewTxNonce, shouldExecuteTransaction } from 'src/logic/safe/store/actions/utils'\nimport { AppReduxState } from 'src/store'\nimport { getErrorMessage } from 'src/test/utils/ethereumErrors'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\n\nimport { Dispatch, DispatchReturn } from './types'\nimport { PayableTx } from 'src/types/contracts/types'\n\nimport { updateTransactionStatus } from 'src/logic/safe/store/actions/updateTransactionStatus'\nimport { Confirmation } from 'src/logic/safe/store/models/types/confirmation'\nimport { Operation, TransactionStatus } from '@gnosis.pm/safe-react-gateway-sdk'\nimport { isTxPendingError } from 'src/logic/wallets/getWeb3'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\n\ninterface ProcessTransactionArgs {\n  approveAndExecute: boolean\n  notifiedTransaction: string\n  safeAddress: string\n  tx: {\n    id: string\n    confirmations: List<Confirmation>\n    origin: string // json.stringified url, name\n    to: string\n    value: string\n    data: string\n    operation: Operation\n    nonce: number\n    safeTxGas: number\n    safeTxHash: string\n    baseGas: number\n    gasPrice: string\n    gasToken: string\n    refundReceiver: string\n  }\n  userAddress: string\n  ethParameters?: Pick<TxParameters, 'ethNonce' | 'ethGasLimit' | 'ethGasPriceInGWei'>\n  thresholdReached: boolean\n}\n\ntype ProcessTransactionAction = ThunkAction<Promise<void | string>, AppReduxState, DispatchReturn, AnyAction>\n\nexport const processTransaction =\n  ({\n    approveAndExecute,\n    notifiedTransaction,\n    safeAddress,\n    tx,\n    userAddress,\n    ethParameters,\n    thresholdReached,\n  }: ProcessTransactionArgs): ProcessTransactionAction =>\n  async (dispatch: Dispatch, getState: () => AppReduxState): Promise<DispatchReturn> => {\n    const state = getState()\n\n    const { account: from, hardwareWallet, smartContractWallet } = providerSelector(state)\n    const safeVersion = currentSafeCurrentVersion(state) as string\n    const safeInstance = getGnosisSafeInstanceAt(safeAddress, safeVersion)\n\n    const lastTx = await getLastTx(safeAddress)\n    const nonce = await getNewTxNonce(lastTx, safeInstance)\n    const isExecution = approveAndExecute || (await shouldExecuteTransaction(safeInstance, nonce, lastTx))\n\n    const preApprovingOwner = approveAndExecute && !thresholdReached ? userAddress : undefined\n    let sigs = generateSignaturesFromTxConfirmations(tx.confirmations, preApprovingOwner)\n\n    if (!sigs) {\n      sigs = getPreValidatedSignatures(from)\n    }\n\n    const notificationsQueue = getNotificationsFromTxType(notifiedTransaction, tx.origin)\n    const beforeExecutionKey = dispatch(enqueueSnackbar(notificationsQueue.beforeExecution))\n\n    let txHash\n    let transaction\n    const txArgs = {\n      ...tx, // merge the previous tx with new data\n      safeInstance,\n      to: tx.to,\n      valueInWei: tx.value,\n      data: tx.data ?? EMPTY_DATA,\n      operation: tx.operation,\n      nonce: tx.nonce,\n      safeTxGas: tx.safeTxGas,\n      baseGas: tx.baseGas,\n      gasPrice: tx.gasPrice || '0',\n      gasToken: tx.gasToken,\n      refundReceiver: tx.refundReceiver,\n      sender: from,\n      sigs,\n    }\n\n    try {\n      if (checkIfOffChainSignatureIsPossible(isExecution, smartContractWallet, safeVersion)) {\n        const signature = await tryOffChainSigning(\n          tx.safeTxHash,\n          { ...txArgs, safeAddress },\n          hardwareWallet,\n          safeVersion,\n        )\n\n        if (signature) {\n          dispatch(closeSnackbarAction({ key: beforeExecutionKey }))\n\n          dispatch(\n            updateTransactionStatus({ txStatus: TransactionStatus.PENDING, safeAddress, nonce: tx.nonce, id: tx.id }),\n          )\n          await saveTxToHistory({ ...txArgs, signature })\n\n          dispatch(fetchTransactions(safeAddress))\n          return\n        }\n      }\n\n      transaction = isExecution ? getExecutionTransaction(txArgs) : getApprovalTransaction(safeInstance, tx.safeTxHash)\n\n      const sendParams: PayableTx = {\n        from,\n        value: 0,\n        gas: ethParameters?.ethGasLimit,\n        gasPrice: ethParameters?.ethGasPriceInGWei,\n        nonce: ethParameters?.ethNonce,\n      }\n\n      await transaction\n        .send(sendParams)\n        .once('transactionHash', async (hash: string) => {\n          txHash = hash\n          dispatch(closeSnackbarAction({ key: beforeExecutionKey }))\n\n          dispatch(\n            updateTransactionStatus({\n              txStatus: TransactionStatus.PENDING,\n              safeAddress,\n              nonce: tx.nonce,\n              // if we provide the tx ID that sole tx will have the _pending_ status.\n              // if not, all the txs that share the same nonce will have the _pending_ status.\n              id: tx.id,\n            }),\n          )\n\n          try {\n            await saveTxToHistory({ ...txArgs, txHash })\n\n            // store the pending transaction's nonce\n            isExecution && aboutToExecuteTx.setNonce(txArgs.nonce)\n\n            dispatch(fetchTransactions(safeAddress))\n          } catch (e) {\n            console.error(e)\n          }\n        })\n        .on('error', () => {\n          dispatch(\n            updateTransactionStatus({\n              txStatus: TransactionStatus.PENDING_FAILED,\n              safeAddress,\n              nonce: tx.nonce,\n              id: tx.id,\n            }),\n          )\n        })\n        .then(async (receipt) => {\n          dispatch(fetchTransactions(safeAddress))\n\n          if (isExecution) {\n            dispatch(fetchSafe(safeAddress))\n          }\n\n          return receipt.transactionHash\n        })\n    } catch (err) {\n      const notification = isTxPendingError(err)\n        ? NOTIFICATIONS.TX_PENDING_MSG\n        : {\n            ...notificationsQueue.afterExecutionError,\n            message: `${notificationsQueue.afterExecutionError.message} - ${err.message}`,\n          }\n\n      dispatch(closeSnackbarAction({ key: beforeExecutionKey }))\n      dispatch(enqueueSnackbar({ key: err.code, ...notification }))\n\n      dispatch(\n        updateTransactionStatus({\n          txStatus: TransactionStatus.PENDING_FAILED,\n          safeAddress,\n          nonce: tx.nonce,\n          id: tx.id,\n        }),\n      )\n\n      logError(Errors._804, err.message)\n\n      if (txHash) {\n        const executeData = safeInstance.methods.approveHash(txHash).encodeABI()\n        try {\n          const errMsg = await getErrorMessage(safeInstance.options.address, 0, executeData, from)\n          logError(Errors._804, errMsg)\n        } catch (e) {\n          logError(Errors._804, e.message)\n        }\n      }\n    }\n\n    return txHash\n  }\n","import IconButton from '@material-ui/core/IconButton'\nimport Close from '@material-ui/icons/Close'\nimport React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { useStyles } from './style'\n\nimport Modal, { ButtonStatus, Modal as GenericModal } from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Bold from 'src/components/layout/Bold'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\nimport { EMPTY_DATA } from 'src/logic/wallets/ethTransactions'\nimport { createTransaction } from 'src/logic/safe/store/actions/createTransaction'\n\nimport { safeAddressFromUrl } from 'src/logic/safe/store/selectors'\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { EstimationStatus, useEstimateTransactionGas } from 'src/logic/hooks/useEstimateTransactionGas'\nimport { TransactionFees } from 'src/components/TransactionsFees'\nimport { TxParametersDetail } from 'src/routes/safe/components/Transactions/helpers/TxParametersDetail'\nimport { EditableTxParameters } from 'src/routes/safe/components/Transactions/helpers/EditableTxParameters'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { ParametersStatus } from 'src/routes/safe/components/Transactions/helpers/utils'\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  gwTransaction: Transaction\n}\n\nexport const RejectTxModal = ({ isOpen, onClose, gwTransaction }: Props): React.ReactElement => {\n  const dispatch = useDispatch()\n  const safeAddress = useSelector(safeAddressFromUrl)\n  const classes = useStyles()\n\n  const {\n    gasCostFormatted,\n    txEstimationExecutionStatus,\n    isExecution,\n    isOffChainSignature,\n    isCreation,\n    gasLimit,\n    gasPriceFormatted,\n  } = useEstimateTransactionGas({\n    txData: EMPTY_DATA,\n    txRecipient: safeAddress,\n  })\n\n  const origin = gwTransaction.safeAppInfo\n    ? JSON.stringify({ name: gwTransaction.safeAppInfo.name, url: gwTransaction.safeAppInfo.url })\n    : ''\n\n  const nonce = gwTransaction.executionInfo?.nonce ?? 0\n\n  const sendReplacementTransaction = (txParameters: TxParameters) => {\n    dispatch(\n      createTransaction({\n        safeAddress,\n        to: safeAddress,\n        valueInWei: '0',\n        txNonce: nonce,\n        origin,\n        safeTxGas: txParameters.safeTxGas ? Number(txParameters.safeTxGas) : undefined,\n        ethParameters: txParameters,\n        notifiedTransaction: TX_NOTIFICATION_TYPES.CANCELLATION_TX,\n        navigateToTransactionsTab: false,\n      }),\n    )\n    onClose()\n  }\n\n  const getParametersStatus = (): ParametersStatus => {\n    return 'CANCEL_TRANSACTION'\n  }\n\n  let confirmButtonStatus: ButtonStatus = ButtonStatus.READY\n  let confirmButtonText = 'Reject transaction'\n  if (txEstimationExecutionStatus === EstimationStatus.LOADING) {\n    confirmButtonStatus = ButtonStatus.LOADING\n    confirmButtonText = 'Estimating'\n  }\n\n  return (\n    <Modal description=\"Reject transaction\" handleClose={onClose} open={isOpen} title=\"Reject Transaction\">\n      <EditableTxParameters\n        isOffChainSignature={isOffChainSignature}\n        isExecution={isExecution}\n        ethGasLimit={gasLimit}\n        ethGasPrice={gasPriceFormatted}\n        safeTxGas={'0'}\n        safeNonce={nonce.toString()}\n        parametersStatus={getParametersStatus()}\n      >\n        {(txParameters, toggleEditMode) => {\n          return (\n            <>\n              <Row align=\"center\" className={classes.heading} grow>\n                <Paragraph className={classes.headingText} noMargin weight=\"bolder\">\n                  Reject transaction\n                </Paragraph>\n                <IconButton disableRipple onClick={onClose}>\n                  <Close className={classes.closeIcon} />\n                </IconButton>\n              </Row>\n              <Hairline />\n              <Block className={classes.container}>\n                <Row>\n                  <Paragraph>\n                    This action will reject this transaction. A separate transaction will be performed to submit the\n                    rejection.\n                  </Paragraph>\n                  <Paragraph color=\"medium\" size=\"sm\">\n                    Transaction nonce:\n                    <br />\n                    <Bold className={classes.nonceNumber}>{nonce}</Bold>\n                  </Paragraph>\n                </Row>\n                {/* Tx Parameters */}\n                <TxParametersDetail\n                  txParameters={txParameters}\n                  onEdit={toggleEditMode}\n                  parametersStatus={getParametersStatus()}\n                  isTransactionCreation={isCreation}\n                  isTransactionExecution={isExecution}\n                  isOffChainSignature={isOffChainSignature}\n                />\n              </Block>\n\n              {txEstimationExecutionStatus === EstimationStatus.LOADING ? null : (\n                <Block className={classes.gasCostsContainer}>\n                  <TransactionFees\n                    gasCostFormatted={gasCostFormatted}\n                    isExecution={isExecution}\n                    isCreation={isCreation}\n                    isOffChainSignature={isOffChainSignature}\n                    txEstimationExecutionStatus={txEstimationExecutionStatus}\n                  />\n                </Block>\n              )}\n              <GenericModal.Footer withoutBorder={confirmButtonStatus !== ButtonStatus.LOADING}>\n                <GenericModal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onClose, text: 'Close' }}\n                  confirmButtonProps={{\n                    onClick: () => sendReplacementTransaction(txParameters),\n                    color: 'error',\n                    type: 'submit',\n                    status: confirmButtonStatus,\n                    text: confirmButtonText,\n                  }}\n                />\n              </GenericModal.Footer>\n            </>\n          )\n        }}\n      </EditableTxParameters>\n    </Modal>\n  )\n}\n","import React, { ReactElement, useContext } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { ExpandedTxDetails, Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { getTransactionByAttribute } from 'src/logic/safe/store/selectors/gatewayTransactions'\nimport { useTransactionParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { AppReduxState } from 'src/store'\nimport { ApproveTxModal } from './modals/ApproveTxModal'\nimport { RejectTxModal } from './modals/RejectTxModal'\nimport { TransactionActionStateContext } from './TxActionProvider'\nimport { Overwrite } from 'src/types/helpers'\n\nexport const ActionModal = (): ReactElement | null => {\n  const { selectedAction, selectAction } = useContext(TransactionActionStateContext)\n  const txParameters = useTransactionParameters()\n\n  const transaction = useSelector((state: AppReduxState) =>\n    getTransactionByAttribute(state)({\n      attributeValue: selectedAction.transactionId,\n      attributeName: 'id',\n      txLocation: selectedAction.txLocation,\n    }),\n  )\n\n  const onClose = () => selectAction({ actionSelected: 'none', transactionId: '', txLocation: 'history' })\n\n  if (!transaction?.txDetails) {\n    return null\n  }\n\n  switch (selectedAction.actionSelected) {\n    case 'cancel':\n      return <RejectTxModal isOpen onClose={onClose} gwTransaction={transaction} />\n\n    case 'confirm':\n      return (\n        <ApproveTxModal\n          isOpen\n          onClose={onClose}\n          transaction={transaction as Overwrite<Transaction, { txDetails: ExpandedTxDetails }>}\n          txParameters={txParameters}\n        />\n      )\n\n    case 'execute':\n      return (\n        <ApproveTxModal\n          canExecute\n          isOpen\n          onClose={onClose}\n          transaction={transaction as Overwrite<Transaction, { txDetails: ExpandedTxDetails }>}\n          txParameters={txParameters}\n        />\n      )\n\n    case 'none':\n      return null\n  }\n}\n","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { loadPagedQueuedTransactions } from 'src/logic/safe/store/actions/transactions/fetchTransactions/loadGatewayTransactions'\nimport { addQueuedTransactions } from 'src/logic/safe/store/actions/transactions/gatewayTransactions'\nimport { safeAddressFromUrl } from 'src/logic/safe/store/selectors'\nimport { QueueTransactionsInfo, useQueueTransactions } from './useQueueTransactions'\nimport { Errors } from 'src/logic/exceptions/CodedException'\nimport { Await } from 'src/types/helpers'\n\ntype PagedQueuedTransactions = {\n  count: number\n  isLoading: boolean\n  transactions?: QueueTransactionsInfo\n  hasMore: boolean\n  next: () => Promise<void>\n}\n\nexport const usePagedQueuedTransactions = (): PagedQueuedTransactions => {\n  const transactions = useQueueTransactions()\n  const dispatch = useDispatch()\n  const safeAddress = useSelector(safeAddressFromUrl)\n  const [hasMore, setHasMore] = useState(true)\n\n  const nextPage = async () => {\n    let results: Await<ReturnType<typeof loadPagedQueuedTransactions>>\n    try {\n      results = await loadPagedQueuedTransactions(safeAddress)\n    } catch (e) {\n      // No next page\n      if (e.content !== Errors._608) {\n        e.log()\n      }\n    }\n\n    if (!results) {\n      setHasMore(false)\n      return\n    }\n\n    const { values, next } = results\n\n    if (next === null) {\n      setHasMore(false)\n    }\n\n    if (values) {\n      dispatch(addQueuedTransactions({ safeAddress, values }))\n    } else {\n      setHasMore(false)\n    }\n  }\n\n  let count\n  if (transactions) {\n    count = transactions.next.count + transactions.queue.count\n  }\n\n  const isLoading = typeof transactions === 'undefined' || typeof count === 'undefined'\n\n  return { count, isLoading, transactions, hasMore, next: nextPage }\n}\n","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { nextTransactions, queuedTransactions } from 'src/logic/safe/store/selectors/gatewayTransactions'\n\nexport type QueueTransactionsInfo = {\n  next: TransactionDetails\n  queue: TransactionDetails\n}\n\n/**\n * Get transactions (next and queue) from nextTransactions and queuedTransactions selectors\n */\nexport const useQueueTransactions = (): QueueTransactionsInfo | undefined => {\n  const nextTxs = useSelector(nextTransactions)\n  const queuedTxs = useSelector(queuedTransactions)\n  const [txsCount, setTxsCount] = useState<{ next: number; queued: number } | undefined>()\n\n  useEffect(() => {\n    const next = nextTxs\n      ? Object.entries(nextTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\n      : 0\n    const queued = queuedTxs\n      ? Object.entries(queuedTxs).reduce((acc, [, transactions]) => (acc += transactions.length), 0)\n      : 0\n    setTxsCount({ next, queued })\n  }, [nextTxs, queuedTxs])\n\n  // no data loaded to the store yet\n  if ((!nextTxs && !queuedTxs) || typeof txsCount === 'undefined') {\n    return\n  }\n\n  return {\n    next: {\n      count: txsCount.next,\n      transactions: nextTxs ? Object.entries(nextTxs) : [],\n    },\n    queue: {\n      count: txsCount.queued,\n      transactions: queuedTxs ? Object.entries(queuedTxs) : [],\n    },\n  }\n}\n","import React, { ReactElement } from 'react'\n\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useAssetInfo } from './hooks/useAssetInfo'\nimport { TransactionActions } from './hooks/useTransactionActions'\nimport { useTransactionStatus } from './hooks/useTransactionStatus'\nimport { useTransactionType } from './hooks/useTransactionType'\nimport { TxCollapsed } from './TxCollapsed'\n\nexport type CalculatedVotes = { votes: string; submitted: number; required: number }\n\nconst calculateVotes = (executionInfo: Transaction['executionInfo']): CalculatedVotes | undefined => {\n  if (!executionInfo) {\n    return\n  }\n\n  const submitted = executionInfo.confirmationsSubmitted\n  const required = executionInfo.confirmationsRequired\n\n  return {\n    votes: `${submitted} out of ${required}`,\n    submitted,\n    required,\n  }\n}\n\ntype TxQueuedCollapsedProps = {\n  isGrouped?: boolean\n  transaction: Transaction\n  actions?: TransactionActions\n}\n\nexport const TxQueueCollapsed = ({ isGrouped = false, transaction, actions }: TxQueuedCollapsedProps): ReactElement => {\n  const nonce = transaction.executionInfo?.nonce\n  const type = useTransactionType(transaction)\n  const info = useAssetInfo(transaction.txInfo)\n  const votes = calculateVotes(transaction.executionInfo)\n  const status = useTransactionStatus(transaction)\n\n  return (\n    <TxCollapsed\n      transaction={transaction}\n      isGrouped={isGrouped}\n      nonce={nonce}\n      type={type}\n      info={info}\n      time={transaction.timestamp}\n      votes={votes}\n      actions={actions}\n      status={status}\n    />\n  )\n}\n","import { AccordionDetails } from '@gnosis.pm/safe-react-components'\nimport { TransactionStatus } from '@gnosis.pm/safe-react-gateway-sdk'\nimport React, { ReactElement, useContext, useEffect, useState } from 'react'\n\nimport { Transaction } from 'src/logic/safe/store/models/types/gateway.d'\nimport { useTransactionActions } from 'src/routes/safe/components/Transactions/TxList/hooks/useTransactionActions'\nimport { NoPaddingAccordion, StyledAccordionSummary } from './styled'\nimport { TxDetails } from './TxDetails'\nimport { TxHoverContext } from './TxHoverProvider'\nimport { TxQueueCollapsed } from './TxQueueCollapsed'\n\ntype TxQueueRowProps = {\n  isGrouped?: boolean\n  transaction: Transaction\n}\n\nexport const TxQueueRow = ({ isGrouped = false, transaction }: TxQueueRowProps): ReactElement => {\n  const { activeHover } = useContext(TxHoverContext)\n  const actions = useTransactionActions(transaction)\n  const [tx, setTx] = useState<Transaction>(transaction)\n\n  useEffect(() => {\n    if (activeHover && activeHover !== transaction.id) {\n      setTx((currTx) => ({ ...currTx, txStatus: TransactionStatus.WILL_BE_REPLACED }))\n      return\n    }\n\n    setTx(transaction)\n  }, [activeHover, transaction])\n\n  return (\n    <NoPaddingAccordion\n      TransitionProps={{\n        mountOnEnter: false,\n        unmountOnExit: true,\n        appear: true,\n      }}\n    >\n      <StyledAccordionSummary>\n        <TxQueueCollapsed isGrouped={isGrouped} transaction={tx} actions={actions} />\n      </StyledAccordionSummary>\n      <AccordionDetails>\n        <TxDetails transaction={tx} actions={actions} />\n      </AccordionDetails>\n    </NoPaddingAccordion>\n  )\n}\n","import { Icon, Link, Text } from '@gnosis.pm/safe-react-components'\nimport React, { Fragment, ReactElement, useContext } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { Transaction, TransactionDetails } from 'src/logic/safe/store/models/types/gateway.d'\nimport { sameString } from 'src/utils/strings'\nimport { currentSafeNonce } from 'src/logic/safe/store/selectors'\n\nimport {\n  DisclaimerContainer,\n  GroupedTransactions,\n  GroupedTransactionsCard,\n  SubTitle,\n  StyledTransactions,\n  StyledTransactionsGroup,\n  AlignItemsWithMargin,\n} from './styled'\nimport { TxHoverProvider } from './TxHoverProvider'\nimport { TxLocationContext } from './TxLocationProvider'\nimport { TxQueueRow } from './TxQueueRow'\nimport { TxsInfiniteScrollContext } from './TxsInfiniteScroll'\n\nconst TreeView = ({ firstElement }: { firstElement: boolean }): ReactElement => {\n  return <p className=\"tree-lines\">{firstElement ? <span className=\"first-node\" /> : null}</p>\n}\n\nconst Disclaimer = ({ nonce }: { nonce: string }): ReactElement => {\n  return (\n    <DisclaimerContainer className=\"disclaimer-container\">\n      <Text size=\"xl\" className=\"nonce\">\n        {nonce}\n      </Text>\n      <AlignItemsWithMargin className=\"disclaimer\">\n        <Text as=\"span\" size=\"xl\">\n          These transactions conflict as they use the same nonce. Executing one will automatically replace the other(s).{' '}\n        </Text>\n        <Link\n          href=\"https://help.gnosis-safe.io/en/articles/4730252-why-are-transactions-with-the-same-nonce-conflicting-with-each-other\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          title=\"Why are transactions with the same nonce conflicting with each other?\"\n        >\n          <AlignItemsWithMargin>\n            <Text size=\"xl\" as=\"span\" color=\"primary\">\n              Learn more\n            </Text>\n            <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n          </AlignItemsWithMargin>\n        </Link>\n      </AlignItemsWithMargin>\n    </DisclaimerContainer>\n  )\n}\n\ntype QueueTransactionProps = {\n  nonce: string\n  transactions: Transaction[]\n}\n\nconst QueueTransaction = ({ nonce, transactions }: QueueTransactionProps): ReactElement =>\n  transactions.length > 1 ? (\n    <GroupedTransactionsCard>\n      <TxHoverProvider>\n        <Disclaimer nonce={nonce} />\n        <GroupedTransactions>\n          {transactions.map((transaction, index) => (\n            <Fragment key={`${nonce}-${transaction.id}`}>\n              <TreeView firstElement={!index} />\n              <TxQueueRow isGrouped transaction={transaction} />\n            </Fragment>\n          ))}\n        </GroupedTransactions>\n      </TxHoverProvider>\n    </GroupedTransactionsCard>\n  ) : (\n    <TxQueueRow transaction={transactions[0]} />\n  )\n\ntype QueueTxListProps = {\n  transactions: TransactionDetails['transactions']\n}\n\nexport const QueueTxList = ({ transactions }: QueueTxListProps): ReactElement => {\n  const { txLocation } = useContext(TxLocationContext)\n  const nonce = useSelector(currentSafeNonce)\n  const title =\n    txLocation === 'queued.next'\n      ? 'NEXT TRANSACTION'\n      : `QUEUE - Transaction with nonce ${nonce} needs to be executed first`\n\n  const { lastItemId, setLastItemId } = useContext(TxsInfiniteScrollContext)\n  if (transactions.length) {\n    const [, lastTransactionsGroup] = transactions[transactions.length - 1]\n    const lastTransaction = lastTransactionsGroup[lastTransactionsGroup.length - 1]\n\n    if (txLocation === 'queued.queued' && !sameString(lastItemId, lastTransaction.id)) {\n      setLastItemId(lastTransaction.id)\n    }\n  }\n\n  return (\n    <StyledTransactionsGroup>\n      <SubTitle size=\"lg\">{title}</SubTitle>\n      <StyledTransactions>\n        {transactions.map(([nonce, txs]) => (\n          <QueueTransaction key={nonce} nonce={nonce} transactions={txs} />\n        ))}\n      </StyledTransactions>\n    </StyledTransactionsGroup>\n  )\n}\n","import { Loader, Title } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\n\nimport Img from 'src/components/layout/Img'\nimport { ActionModal } from './ActionModal'\nimport NoTransactionsImage from './assets/no-transactions.svg'\nimport { usePagedQueuedTransactions } from './hooks/usePagedQueuedTransactions'\nimport { QueueTxList } from './QueueTxList'\nimport { Centered, NoTransactions } from './styled'\nimport { TxActionProvider } from './TxActionProvider'\nimport { TxsInfiniteScroll } from './TxsInfiniteScroll'\nimport { TxLocationContext } from './TxLocationProvider'\n\nexport const QueueTransactions = (): ReactElement => {\n  const { count, isLoading, hasMore, next, transactions } = usePagedQueuedTransactions()\n\n  if (count === 0 && isLoading) {\n    return (\n      <Centered>\n        <Loader size=\"md\" />\n      </Centered>\n    )\n  }\n\n  // `loading` is, actually `!transactions`\n  // added the `transaction` verification to prevent `Object is possibly 'undefined'` error\n  if (count === 0 || !transactions) {\n    return (\n      <NoTransactions>\n        <Img alt=\"No Transactions yet\" src={NoTransactionsImage} />\n        <Title size=\"xs\">Queue transactions will appear here </Title>\n      </NoTransactions>\n    )\n  }\n\n  return (\n    <TxActionProvider>\n      <TxsInfiniteScroll next={next} hasMore={hasMore} isLoading={isLoading}>\n        {/* Next list */}\n        <TxLocationContext.Provider value={{ txLocation: 'queued.next' }}>\n          {transactions.next.count !== 0 && <QueueTxList transactions={transactions.next.transactions} />}\n        </TxLocationContext.Provider>\n\n        {/* Queue list */}\n        <TxLocationContext.Provider value={{ txLocation: 'queued.queued' }}>\n          {transactions.queue.count !== 0 && <QueueTxList transactions={transactions.queue.transactions} />}\n        </TxLocationContext.Provider>\n      </TxsInfiniteScroll>\n      <ActionModal />\n    </TxActionProvider>\n  )\n}\n","import { Menu, Tab, Breadcrumb, BreadcrumbElement } from '@gnosis.pm/safe-react-components'\nimport { Item } from '@gnosis.pm/safe-react-components/dist/navigation/Tab'\nimport React, { ReactElement, useEffect, useState } from 'react'\n\nimport Col from 'src/components/layout/Col'\nimport { SAFE_NAVIGATION_EVENT, useAnalytics } from 'src/utils/googleAnalytics'\nimport { HistoryTransactions } from './HistoryTransactions'\nimport { QueueTransactions } from './QueueTransactions'\nimport { ContentWrapper, Wrapper } from './styled'\n\nconst items: Item[] = [\n  { id: 'queue', label: 'Queue' },\n  { id: 'history', label: 'History' },\n]\n\nconst GatewayTransactions = (): ReactElement => {\n  const [tab, setTab] = useState(items[0].id)\n\n  const { trackEvent } = useAnalytics()\n\n  useEffect(() => {\n    trackEvent({ category: SAFE_NAVIGATION_EVENT, action: 'Transactions' })\n  }, [trackEvent])\n\n  return (\n    <Wrapper>\n      <Menu>\n        <Col start=\"sm\" xs={12}>\n          <Breadcrumb>\n            <BreadcrumbElement iconType=\"transactionsInactive\" text=\"TRANSACTIONS\" />\n          </Breadcrumb>\n        </Col>\n      </Menu>\n      <Tab items={items} onChange={setTab} selectedTab={tab} />\n      <ContentWrapper>\n        {tab === 'queue' && <QueueTransactions />}\n        {tab === 'history' && <HistoryTransactions />}\n      </ContentWrapper>\n    </Wrapper>\n  )\n}\n\nexport default GatewayTransactions\n"],"sourceRoot":""}