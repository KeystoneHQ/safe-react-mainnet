{"version":3,"sources":["routes/safe/components/Balances/SendModal/screens/ContractInteraction/SendCustomTx/style.ts","routes/safe/components/Balances/SendModal/screens/ContractInteraction/SendCustomTx/index.tsx","components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","components/layout/Bold/index.tsx","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","assets/icons/qrcode.svg","components/Divider/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","components/forms/TextAreaField/index.tsx"],"names":["styles","createStyles","heading","padding","md","lg","justifyContent","boxSizing","maxHeight","annotation","letterSpacing","color","marginRight","marginLeft","manage","fontSize","closeIcon","height","width","qrCodeBtn","cursor","formContainer","buttonRow","gap","dataInput","lineHeight","border","selectAddress","useStyles","makeStyles","nativeCoin","getNetworkInfo","SendCustomTx","initialValues","onClose","onNext","contractAddress","switchMethod","isABI","classes","ethBalance","useSelector","currentSafeEthBalance","addressBook","addressBookState","useState","qrModalOpen","setQrModalOpen","defaultEntry","address","name","addressBookEntry","find","sameAddress","selectedEntry","setSelectedEntry","isValidAddress","setIsValidAddress","saveForm","values","a","handleSubmit","submit","data","value","submitValues","contractName","openQrModal","closeQrModal","formMutators","setMax","args","state","utils","changeValue","setRecipient","Row","align","className","grow","Paragraph","noMargin","weight","IconButton","disableRipple","onClick","Hairline","GnoForm","subscription","submitting","pristine","onSubmit","mutators","shouldDisableSubmitButton","handleScan","scannedAddress","startsWith","replace","Block","SafeInfo","Divider","withArrow","onKeyDown","e","sameString","key","role","tabIndex","margin","size","style","Col","xs","hash","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","fieldMutator","label","center","middle","Img","alt","src","QRIcon","between","ButtonLink","Field","component","TextField","inputAdornment","endAdornment","InputAdornment","position","placeholder","text","type","validate","composeValidators","mustBeFloat","maxValue","minValue","TextAreaField","mustBeHexData","Switch","onChange","checked","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","disabled","testId","ScanQRModal","isOpen","onScan","GnoField","props","overflowStyle","overflow","root","paddingTop","paddingBottom","input","restInput","meta","multiline","rows","rest","helperText","undefined","showError","touched","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","InputProps","stylesBasedOn","flexDirection","flex","children","decorators","validation","render","data-testid","validating","form","Bold","this","React","loaderContainer","close","secondaryText","detailsContainer","backgroundColor","background","button","sm","fileUploadModalOpen","setFileUploadModalOpen","setError","cameraBlocked","setCameraBlocked","scannerRef","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","description","handleClose","open","title","layout","legacyMode","onError","err","ref","facingMode","Button","minWidth","variant","Wrapper","styled","div","StyledDivider","DividerSRC","StyledBlock","currentSafeWithNames","safeAddress","safeName","symbol","useTextFieldLabelStyle","borderRadius","useTextFieldInputStyle","chainId","getNetworkId","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","updateAddressInfo","addressEntry","validateAddress","addressErrorMessage","mustBeEthereumAddress","filteredEntries","filterAddressEntries","inputValue","length","onInputChange","_","reason","normalizedValue","trimSpaces","isFeatureEnabled","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","labelStyles","inputStyles","Autocomplete","openOnFocus","filterOptions","freeSolo","options","id","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","required","getOptionLabel","renderOption","display","flexGrow","AddressBookInput","currentNetworkAddressBook","errorMsg","ContractsAddressBookInput","setFilteredEntries","filterContractAddressBookEntries","filteredADBK","filterContractAddresses","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","textarea","alignItems"],"mappings":"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","file":"static/js/48.eb239564.chunk.js","sourcesContent":["import { lg, md } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'flex-start',\n    boxSizing: 'border-box',\n    maxHeight: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: '#a2a8ba',\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  manage: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n  dataInput: {\n    '& TextField-root-294': {\n      lineHeight: 'auto',\n      border: 'green',\n    },\n  },\n  selectAddress: {\n    cursor: 'pointer',\n  },\n})\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport IconButton from '@material-ui/core/IconButton'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Switch from '@material-ui/core/Switch'\nimport Close from '@material-ui/icons/Close'\n\nimport Divider from 'src/components/Divider'\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport Field from 'src/components/forms/Field'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport { TextAreaField } from 'src/components/forms/TextAreaField'\nimport TextField from 'src/components/forms/TextField'\nimport { composeValidators, maxValue, minValue, mustBeFloat, mustBeHexData } from 'src/components/forms/validator'\nimport Block from 'src/components/layout/Block'\nimport ButtonLink from 'src/components/layout/ButtonLink'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { Modal } from 'src/components/Modal'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport { currentSafeEthBalance } from 'src/logic/safe/store/selectors'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { ContractsAddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\nimport { sameString } from 'src/utils/strings'\n\nimport { styles } from './style'\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { addressBookState } from 'src/logic/addressBook/store/selectors'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\n\nexport interface CreatedTx {\n  contractAddress: string\n  data: string\n  value: string | number\n}\n\nexport type CustomTxProps = {\n  contractAddress?: string\n}\n\ntype Props = {\n  initialValues: CustomTxProps\n  onClose: () => void\n  onNext: (tx: CreatedTx, submit: boolean) => void\n  isABI: boolean\n  switchMethod: () => void\n  contractAddress?: string\n}\n\nconst useStyles = makeStyles(styles)\n\nconst { nativeCoin } = getNetworkInfo()\n\nconst SendCustomTx = ({\n  initialValues,\n  onClose,\n  onNext,\n  contractAddress,\n  switchMethod,\n  isABI,\n}: Props): ReactElement => {\n  const classes = useStyles()\n  const ethBalance = useSelector(currentSafeEthBalance)\n  const addressBook = useSelector(addressBookState)\n  const [qrModalOpen, setQrModalOpen] = useState<boolean>(false)\n  const [selectedEntry, setSelectedEntry] = useState<{ address?: string; name: string } | null>(() => {\n    const defaultEntry = {\n      // `initialValue` has precedence over `contractAddress`\n      address: initialValues?.contractAddress ?? contractAddress,\n      name: '',\n    }\n\n    // if there's nothing to lookup for, we return the default entry\n    if (!defaultEntry.address) {\n      return defaultEntry\n    }\n\n    const addressBookEntry = addressBook.find(({ address }) => sameAddress(address, defaultEntry.address))\n    if (addressBookEntry) {\n      return addressBookEntry\n    }\n\n    return defaultEntry\n  })\n  const [isValidAddress, setIsValidAddress] = useState<boolean>(true)\n\n  const saveForm = async (values) => {\n    await handleSubmit(values, false)\n    switchMethod()\n  }\n\n  const handleSubmit = (values: any, submit = true) => {\n    if (values.data || values.value) {\n      const submitValues = { ...values }\n\n      if (!values.contractAddress) {\n        submitValues.contractAddress = selectedEntry?.address\n      }\n      submitValues.contractName = selectedEntry?.name\n\n      onNext(submitValues, submit)\n    }\n  }\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const formMutators = {\n    setMax: (args, state, utils) => {\n      utils.changeValue(state, 'value', () => ethBalance)\n    },\n    setRecipient: (args, state, utils) => {\n      utils.changeValue(state, 'contractAddress', () => args[0])\n    },\n  }\n\n  return (\n    <>\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph className={classes.manage} noMargin weight=\"bolder\">\n          Contract interaction\n        </Paragraph>\n        <Paragraph className={classes.annotation}>1 of 2</Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.closeIcon} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <GnoForm\n        formMutators={formMutators}\n        initialValues={initialValues}\n        subscription={{ submitting: true, pristine: true, values: true }}\n        onSubmit={handleSubmit}\n      >\n        {(...args) => {\n          const mutators = args[3]\n          const pristine = args[2].pristine\n          let shouldDisableSubmitButton = !isValidAddress\n          if (selectedEntry) {\n            shouldDisableSubmitButton = !selectedEntry.address\n          }\n\n          const handleScan = (value) => {\n            let scannedAddress = value\n\n            if (scannedAddress.startsWith('ethereum:')) {\n              scannedAddress = scannedAddress.replace('ethereum:', '')\n            }\n\n            mutators.setRecipient(scannedAddress)\n            closeQrModal()\n          }\n\n          return (\n            <>\n              <Block className={classes.formContainer}>\n                <SafeInfo />\n                <Divider withArrow />\n                {selectedEntry && selectedEntry.address ? (\n                  <div\n                    onKeyDown={(e) => {\n                      if (sameString(e.key, 'Tab')) {\n                        return\n                      }\n                      setSelectedEntry(null)\n                    }}\n                    onClick={() => {\n                      setSelectedEntry(null)\n                    }}\n                    role=\"listbox\"\n                    tabIndex={0}\n                  >\n                    <Row margin=\"xs\">\n                      <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                        Contract address\n                      </Paragraph>\n                    </Row>\n                    <Row align=\"center\" margin=\"md\">\n                      <Col xs={12}>\n                        <EthHashInfo\n                          hash={selectedEntry.address}\n                          name={selectedEntry.name}\n                          showAvatar\n                          showCopyBtn\n                          explorerUrl={getExplorerInfo(selectedEntry.address)}\n                        />\n                      </Col>\n                    </Row>\n                  </div>\n                ) : (\n                  <>\n                    <Row margin=\"md\">\n                      <Col xs={11}>\n                        <ContractsAddressBookInput\n                          fieldMutator={mutators.setRecipient}\n                          pristine={pristine}\n                          setIsValidAddress={setIsValidAddress}\n                          setSelectedEntry={setSelectedEntry}\n                          label=\"Contract address\"\n                        />\n                      </Col>\n                      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n                        <Img\n                          alt=\"Scan QR\"\n                          className={classes.qrCodeBtn}\n                          height={20}\n                          onClick={() => {\n                            openQrModal()\n                          }}\n                          role=\"button\"\n                          src={QRIcon}\n                        />\n                      </Col>\n                    </Row>\n                  </>\n                )}\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                      Value\n                    </Paragraph>\n                    <ButtonLink onClick={mutators.setMax} weight=\"bold\">\n                      Send max\n                    </ButtonLink>\n                  </Col>\n                </Row>\n                <Row margin=\"md\">\n                  <Col>\n                    <Field\n                      component={TextField}\n                      inputAdornment={{\n                        endAdornment: <InputAdornment position=\"end\">{nativeCoin.name}</InputAdornment>,\n                      }}\n                      name=\"value\"\n                      placeholder=\"Value*\"\n                      text=\"Value*\"\n                      type=\"text\"\n                      validate={composeValidators(mustBeFloat, maxValue(ethBalance || '0'), minValue(0))}\n                    />\n                  </Col>\n                </Row>\n                <Row margin=\"sm\">\n                  <Col>\n                    <TextAreaField\n                      name=\"data\"\n                      placeholder=\"Data (hex encoded)*\"\n                      text=\"Data (hex encoded)*\"\n                      type=\"text\"\n                      validate={mustBeHexData}\n                    />\n                  </Col>\n                </Row>\n                <Paragraph color=\"disabled\" noMargin size=\"lg\" style={{ letterSpacing: '-0.5px' }}>\n                  <Switch onChange={() => saveForm(args[2].values)} checked={!isABI} />\n                  Use custom data (hex encoded)\n                </Paragraph>\n              </Block>\n              <Modal.Footer>\n                <Modal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onClose }}\n                  confirmButtonProps={{ disabled: shouldDisableSubmitButton, testId: 'review-tx-btn', text: 'Review' }}\n                />\n              </Modal.Footer>\n              {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={handleScan} />}\n            </>\n          )\n        }}\n      </GnoForm>\n    </>\n  )\n}\n\nexport default SendCustomTx\n","import React from 'react'\nimport { Field } from 'react-final-form'\n\n// $FlowFixMe\nconst GnoField = ({ ...props }: any) => <Field {...props} />\n\nexport default GnoField\n","import MuiTextField from '@material-ui/core/TextField'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\n\nimport { lg } from 'src/theme/variables'\n\n// Neded for solving a fix in Windows browsers\nconst overflowStyle = {\n  overflow: 'hidden',\n  width: '100%',\n}\n\nconst styles = () =>\n  createStyles({\n    root: {\n      paddingTop: lg,\n      paddingBottom: '12px',\n      lineHeight: 0,\n    },\n  })\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  input: {\n    name: string\n    onChange?: () => void\n    value: string\n    placeholder: string\n    type: string\n  }\n  meta: {\n    touched?: boolean\n    pristine?: boolean\n    valid?: boolean\n    error?: string\n    modifiedSinceLastSubmit?: boolean\n    submitError?: boolean\n    active?: boolean\n  }\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\n  multiline: boolean\n  rows?: string\n  testId: string\n  text: string\n  disabled?: boolean\n  rowsMax?: number\n  className?: string\n}\n\nconst TextField = (props: Props): React.ReactElement => {\n  const {\n    input: { name, onChange, value, ...restInput },\n    inputAdornment,\n    meta,\n    multiline,\n    rows,\n    testId,\n    text,\n    ...rest\n  } = props\n  const classes = useStyles()\n  const helperText = value ? text : undefined\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\n  const errorMessage = meta.error || meta.submitError\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\n\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\n\n  const inputRoot = helperText ? classes.root : ''\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\n  const inputProps = {\n    ...restInput,\n    autoComplete: 'off',\n    'data-testid': testId,\n  }\n  const inputRootProps = {\n    ...inputAdornment,\n    className: `${inputRoot} ${statusClasses}`,\n    disableUnderline: disableUnderline,\n  }\n\n  return (\n    <MuiTextField\n      error={hasError && showError}\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\n      inputProps={inputProps} // blank in order to force to have helper text\n      InputProps={inputRootProps}\n      multiline={multiline}\n      name={name}\n      onChange={onChange}\n      rows={rows}\n      style={overflowStyle}\n      value={value}\n      {...rest}\n    />\n  )\n}\n\nexport default TextField\n","import * as React from 'react'\nimport { Form } from 'react-final-form'\n\nconst stylesBasedOn = (padding) => ({\n  padding: `0 ${padding}%`,\n  flexDirection: 'column',\n  flex: '1 0 auto',\n})\n\nconst GnoForm = ({\n  children,\n  decorators,\n  formMutators,\n  initialValues,\n  onSubmit,\n  padding = 0,\n  subscription,\n  testId = '',\n  validation,\n}: any) => (\n  <Form\n    decorators={decorators}\n    initialValues={initialValues}\n    mutators={formMutators}\n    onSubmit={onSubmit}\n    render={({ handleSubmit, ...rest }) => (\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\n      </form>\n    )}\n    subscription={subscription}\n    validate={validation}\n  />\n)\n\nexport default GnoForm\n","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render() {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import React, { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\n\nconst { nativeCoin } = getNetworkInfo()\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n\n  return (\n    <>\n      <EthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import { createStyles, makeStyles } from '@material-ui/core'\n\nexport const useTextFieldLabelStyle = makeStyles(\n  createStyles({\n    root: {\n      overflow: 'hidden',\n      borderRadius: 4,\n      fontSize: '15px',\n      width: '500px',\n    },\n  }),\n)\n\nexport const useTextFieldInputStyle = makeStyles(\n  createStyles({\n    root: {\n      fontSize: '14px',\n      width: '420px',\n    },\n  }),\n)\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport MuiTextField from '@material-ui/core/TextField'\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\nimport React, { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\nimport { getNetworkId, isFeatureEnabled } from 'src/config'\nimport { FEATURES } from 'src/config/networks/network.d'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport {\n  useTextFieldInputStyle,\n  useTextFieldLabelStyle,\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\nimport { trimSpaces } from 'src/utils/strings'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\n\nconst chainId = getNetworkId()\n\nexport interface AddressBookProps {\n  fieldMutator: (address: string) => void\n  label?: string\n  pristine?: boolean\n  recipientAddress?: string\n  errorMsg?: string\n  setIsValidAddress: (valid: boolean) => void\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\n}\n\nexport interface BaseAddressBookInputProps extends AddressBookProps {\n  addressBookEntries: AddressBookEntry[]\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\n  validationText: string | undefined\n}\n\nconst BaseAddressBookInput = ({\n  addressBookEntries,\n  fieldMutator,\n  label = 'Recipient',\n  setIsValidAddress,\n  setSelectedEntry,\n  setValidationText,\n  validationText,\n}: BaseAddressBookInputProps): ReactElement => {\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\n    setSelectedEntry(addressEntry)\n    fieldMutator(addressEntry.address)\n  }\n\n  const validateAddress = (address: string): AddressBookEntry | string | undefined => {\n    const addressErrorMessage = mustBeEthereumAddress(address)\n    setIsValidAddress(!addressErrorMessage)\n\n    if (addressErrorMessage) {\n      setValidationText(addressErrorMessage)\n      return\n    }\n\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: address })\n    return filteredEntries.length === 1 ? filteredEntries[0] : address\n  }\n\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\n    switch (reason) {\n      case 'select-option': {\n        const { address, name, chainId } = value as AddressBookEntry\n        updateAddressInfo({ address, name, chainId })\n        break\n      }\n    }\n  }\n\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\n    _,\n    value,\n    reason,\n  ) => {\n    switch (reason) {\n      case 'input': {\n        const normalizedValue = trimSpaces(value)\n\n        if (!normalizedValue) {\n          break\n        }\n\n        // ENS-enabled resolve/validation\n        if (\n          isFeatureEnabled(FEATURES.DOMAIN_LOOKUP) &&\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\n        ) {\n          let address = ''\n          try {\n            address = await getAddressFromDomain(normalizedValue)\n          } catch (err) {\n            logError(Errors._101, err.message)\n          }\n\n          const validatedAddress = validateAddress(address)\n\n          if (!validatedAddress) {\n            fieldMutator('')\n            break\n          }\n\n          const newEntry =\n            typeof validatedAddress === 'string'\n              ? {\n                  address,\n                  name: normalizedValue,\n                  chainId,\n                }\n              : validatedAddress\n\n          updateAddressInfo(newEntry)\n          break\n        }\n\n        // ETH address validation\n        const validatedAddress = validateAddress(normalizedValue)\n\n        if (!validatedAddress) {\n          fieldMutator('')\n          break\n        }\n\n        const newEntry =\n          typeof validatedAddress === 'string'\n            ? {\n                address: validatedAddress,\n                name: '',\n                chainId,\n              }\n            : validatedAddress\n\n        updateAddressInfo(newEntry)\n\n        break\n      }\n    }\n  }\n\n  const labelStyles = useTextFieldLabelStyle()\n  const inputStyles = useTextFieldInputStyle()\n\n  return (\n    <Autocomplete<AddressBookEntry, false, false, true>\n      closeIcon={null}\n      openOnFocus={false}\n      filterOptions={filterAddressEntries}\n      freeSolo\n      onChange={onChange}\n      onInputChange={onInputChange}\n      options={addressBookEntries}\n      id=\"address-book-input\"\n      renderInput={(params) => (\n        <MuiTextField\n          {...params}\n          autoFocus={true}\n          error={!!validationText}\n          fullWidth\n          variant=\"filled\"\n          label={validationText ? validationText : label}\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\n        />\n      )}\n      getOptionLabel={({ address }) => address}\n      renderOption={({ address, name }) => <EthHashInfo hash={address} name={name} showAvatar />}\n      role=\"listbox\"\n      style={{ display: 'flex', flexGrow: 1 }}\n    />\n  )\n}\n\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    if (props.errorMsg) {\n      setValidationText(props.errorMsg)\n    }\n  }, [props.errorMsg])\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={addressBookEntries}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n\nexport const ContractsAddressBookInput = ({\n  setIsValidAddress,\n  setSelectedEntry,\n  ...props\n}: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    const filterContractAddresses = async (): Promise<void> => {\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\n      setFilteredEntries(filteredADBK)\n    }\n    filterContractAddresses()\n  }, [addressBookEntries])\n\n  const onSetSelectedEntry = async (selectedEntry) => {\n    if (selectedEntry?.address) {\n      // verify if `address` is a contract\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\n      setIsValidAddress(!contractAddressErrorMessage)\n      setValidationText(contractAddressErrorMessage ?? '')\n      setSelectedEntry(selectedEntry)\n    }\n  }\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={filteredEntries}\n      setIsValidAddress={setIsValidAddress}\n      setSelectedEntry={onSetSelectedEntry}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n","import { createStyles, makeStyles } from '@material-ui/core/styles'\nimport React, { ReactElement } from 'react'\n\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\n\nconst styles = createStyles({\n  textarea: {\n    '& > div': {\n      height: '140px',\n      paddingTop: '0',\n      paddingBottom: '0',\n      alignItems: 'auto',\n      '& > textarea': {\n        fontSize: '15px',\n        letterSpacing: '-0.5px',\n        lineHeight: '20px',\n        height: '102px',\n      },\n    },\n  },\n})\n\nconst useStyles = makeStyles(styles)\n\nexport const TextAreaField = ({ ...props }): ReactElement => {\n  const classes = useStyles()\n  return <Field {...props} className={classes.textarea} component={TextField} multiline rows=\"5\" />\n}\n"],"sourceRoot":""}