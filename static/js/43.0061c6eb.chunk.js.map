{"version":3,"sources":["components/WhenFieldChanges/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/CollectibleSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/CollectibleSelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/TokenSelectField/style.ts","routes/safe/components/Balances/SendModal/screens/SendCollectible/TokenSelectField/index.tsx","routes/safe/components/Balances/SendModal/screens/SendCollectible/index.tsx","components/forms/Field/index.tsx","components/forms/GnoForm/index.tsx","routes/safe/components/Balances/utils/setTokenImgToPlaceholder.ts","components/layout/Bold/index.tsx","routes/safe/components/Balances/assets/token_placeholder.svg","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","assets/icons/qrcode.svg","components/Divider/index.tsx","components/ScanQRModal/ScanQRWrapper/index.tsx","routes/safe/components/Balances/SendModal/SafeInfo/index.tsx","components/forms/SelectField/index.tsx","../node_modules/react-final-form-listeners/dist/react-final-form-listeners.es.js","routes/safe/components/Balances/SendModal/screens/AddressBookInput/style.ts","routes/safe/components/Balances/SendModal/screens/AddressBookInput/index.tsx","logic/collectibles/store/selectors/index.ts","../node_modules/@material-ui/core/esm/ListItemIcon/ListItemIcon.js"],"names":["WhenFieldChanges","field","set","to","name","subscription","onChange","input","selectedTokenStyles","createStyles","container","minHeight","padding","width","tokenData","margin","lineHeight","tokenImage","marginRight","sm","selectStyles","selectMenu","paddingRight","useSelectedCollectibleStyles","makeStyles","SelectedCollectible","tokenId","tokens","classes","token","find","id","shortener","textShortener","charsStart","charsEnd","MenuItem","className","ListItemIcon","Img","alt","description","height","onError","setImageToPlaceholder","src","image","ListItemText","primary","secondary","toString","Paragraph","color","size","style","opacity","weight","useCollectibleSelectFieldStyles","CollectibleSelectField","initialValue","Field","component","SelectField","disabled","length","renderValue","nftTokenId","validate","required","map","key","assetAddress","value","styles","heading","md","lg","justifyContent","boxSizing","annotation","letterSpacing","secondaryText","marginLeft","manage","fontSize","closeIcon","qrCodeBtn","cursor","formContainer","buttonRow","gap","display","useSelectedTokenStyles","SelectedToken","assets","asset","numberOfTokens","formatAmount","symbol","useTokenSelectFieldStyles","TokenSelectField","tokenClasses","assetsAddresses","Object","keys","slug","formMutators","setMax","args","state","utils","changeValue","onTokenChange","setRecipient","useStyles","SendCollectible","initialValues","onClose","onNext","recipientAddress","selectedToken","nftAssets","useSelector","nftAssetsSelector","nftTokens","nftTokensSelector","addressBook","currentNetworkAddressBook","useState","defaultEntry","address","predefinedAddress","addressBookEntry","sameAddress","selectedEntry","setSelectedEntry","pristine","setPristine","isValidAddress","setIsValidAddress","React","useMemo","Row","align","grow","noMargin","IconButton","disableRipple","onClick","Hairline","GnoForm","onSubmit","values","recipientName","assetName","formState","mutators","selectedNFTTokens","filter","nftToken","handleScan","closeQrModal","scannedAddress","startsWith","replace","scannedName","shouldDisableSubmitButton","Block","SafeInfo","Divider","withArrow","onKeyDown","e","sameString","role","tabIndex","Col","xs","hash","showAvatar","showCopyBtn","explorerUrl","getExplorerInfo","AddressBookInput","fieldMutator","center","middle","ScanQRWrapper","between","tokenAddress","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","testId","text","GnoField","props","stylesBasedOn","flexDirection","flex","children","decorators","validation","render","handleSubmit","rest","data-testid","submitting","validating","form","event","img","currentTarget","test","TokenPlaceholder","Bold","this","maxHeight","loaderContainer","close","detailsContainer","backgroundColor","background","button","ScanQRModal","isOpen","onScan","fileUploadModalOpen","setFileUploadModalOpen","error","setError","cameraBlocked","setCameraBlocked","scannerRef","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","handleClose","open","title","layout","legacyMode","err","data","ref","facingMode","Button","minWidth","variant","Wrapper","styled","div","StyledDivider","DividerSRC","type","qrModalOpen","setQrModalOpen","QRIcon","nativeCoin","getNetworkInfo","StyledBlock","border","currentSafeWithNames","safeAddress","ethBalance","safeName","SelectInput","disableError","formControlProps","restInput","label","meta","showError","submitError","dirtySinceLastSubmit","touched","inputProps","htmlFor","_extends","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","_inheritsLoose","subClass","superClass","create","constructor","__proto__","Component","OnChangeState","_React$Component","_this","previous","_proto","componentDidUpdate","_this$props","setState","OnChange","_ref","createElement","allowNull","useTextFieldLabelStyle","root","overflow","borderRadius","useTextFieldInputStyle","chainId","getNetworkId","BaseAddressBookInput","addressBookEntries","setValidationText","validationText","updateAddressInfo","addressEntry","validateAddress","addressErrorMessage","mustBeEthereumAddress","filteredEntries","filterAddressEntries","inputValue","onInputChange","_","reason","a","normalizedValue","trimSpaces","isFeatureEnabled","FEATURES","DOMAIN_LOOKUP","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","logError","Errors","_101","message","validatedAddress","labelStyles","inputStyles","Autocomplete","openOnFocus","filterOptions","freeSolo","options","renderInput","params","autoFocus","fullWidth","InputLabelProps","shrink","InputProps","getOptionLabel","renderOption","flexGrow","errorMsg","ContractsAddressBookInput","setFilteredEntries","filterContractAddressBookEntries","filteredADBK","filterContractAddresses","onSetSelectedEntry","mustBeEthereumContractAddress","contractAddressErrorMessage","NFT_ASSETS_REDUCER_ID","createSelector","NFT_TOKENS_REDUCER_ID","nftAssetsToListSelector","nftAssetsAddressFromNftTokensSelector","userNftTokens","addresses","uniqueAddresses","Set","Array","from","orderedNFTAssets","sort","b","localeCompare","nftAssetsFromNftTokensSelector","nftAssetsFromNftTokens","includes","other","_objectWithoutProperties","context","ListContext","clsx","alignItems","alignItemsFlexStart","withStyles","theme","palette","action","active","flexShrink","marginTop"],"mappings":"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","file":"static/js/43.0061c6eb.chunk.js","sourcesContent":["import React from 'react'\nimport { OnChange } from 'react-final-form-listeners'\n\nimport GnoField from 'src/components/forms/Field'\n\nconst WhenFieldChanges = ({ field, set, to }) => (\n  <GnoField name={set} subscription={{}}>\n    {(\n      // No subscription. We only use Field to get to the change function\n      { input: { onChange } },\n    ) => (\n      <OnChange name={field}>\n        {() => {\n          onChange(to)\n        }}\n      </OnChange>\n    )}\n  </GnoField>\n)\nexport default WhenFieldChanges\n","import { sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const selectedTokenStyles = createStyles({\n  container: {\n    minHeight: '55px',\n    padding: 0,\n    width: '100%',\n  },\n  tokenData: {\n    padding: 0,\n    margin: 0,\n    lineHeight: '14px',\n  },\n  tokenImage: {\n    marginRight: sm,\n  },\n})\n\nexport const selectStyles = createStyles({\n  selectMenu: {\n    paddingRight: 0,\n  },\n  tokenImage: {\n    marginRight: sm,\n  },\n})\n","import ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\n\nimport { selectStyles, selectedTokenStyles } from './style'\n\nimport Field from 'src/components/forms/Field'\nimport SelectField from 'src/components/forms/SelectField'\nimport { required } from 'src/components/forms/validator'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { textShortener } from 'src/utils/strings'\nimport { NFTToken } from 'src/logic/collectibles/sources/collectibles.d'\n\nconst useSelectedCollectibleStyles = makeStyles(selectedTokenStyles)\n\ntype SelectedCollectibleProps = {\n  tokenId?: number | string\n  tokens: NFTToken[]\n}\n\nconst SelectedCollectible = ({ tokenId, tokens }: SelectedCollectibleProps): React.ReactElement => {\n  const classes = useSelectedCollectibleStyles()\n  const token = tokenId && tokens ? tokens.find(({ tokenId: id }) => tokenId === id) : null\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\n\n  return (\n    <MenuItem className={classes.container}>\n      {token ? (\n        <>\n          <ListItemIcon className={classes.tokenImage}>\n            <Img alt={token.description} height={28} onError={setImageToPlaceholder} src={token.image} />\n          </ListItemIcon>\n          <ListItemText\n            className={classes.tokenData}\n            primary={shortener(token.name)}\n            secondary={`token ID: ${shortener(token.tokenId.toString())}`}\n          />\n        </>\n      ) : (\n        <Paragraph color=\"disabled\" size=\"md\" style={{ opacity: 0.5 }} weight=\"light\">\n          Select a token*\n        </Paragraph>\n      )}\n    </MenuItem>\n  )\n}\n\nconst useCollectibleSelectFieldStyles = makeStyles(selectStyles)\n\ntype CollectibleSelectFieldProps = {\n  initialValue?: number | string\n  tokens: NFTToken[]\n}\n\nexport const CollectibleSelectField = ({ initialValue, tokens }: CollectibleSelectFieldProps): React.ReactElement => {\n  const classes = useCollectibleSelectFieldStyles()\n\n  return (\n    <Field\n      className={classes.selectMenu}\n      component={SelectField}\n      disabled={!tokens.length}\n      initialValue={initialValue}\n      name=\"nftTokenId\"\n      renderValue={(nftTokenId) => <SelectedCollectible tokenId={nftTokenId} tokens={tokens} />}\n      validate={required}\n    >\n      {tokens.map((token) => (\n        <MenuItem key={`${token.assetAddress}-${token.tokenId}`} value={token.tokenId}>\n          <ListItemIcon className={classes.tokenImage}>\n            <Img alt={token.name} height={28} onError={setImageToPlaceholder} src={token.image} />\n          </ListItemIcon>\n          <ListItemText primary={token.name} secondary={`token ID: ${token.tokenId}`} />\n        </MenuItem>\n      ))}\n    </Field>\n  )\n}\n","import { lg, md, secondaryText } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'flex-start',\n    boxSizing: 'border-box',\n    height: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: secondaryText,\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  manage: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n  formContainer: {\n    padding: `${md} ${lg}`,\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n    gap: '16px',\n  },\n})\n","import { sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const selectedTokenStyles = createStyles({\n  container: {\n    minHeight: '55px',\n    padding: 0,\n    width: '100%',\n  },\n  tokenData: {\n    padding: 0,\n    margin: 0,\n    lineHeight: '14px',\n  },\n  tokenImage: {\n    display: 'block',\n    marginRight: sm,\n    height: 28,\n    width: 'auto',\n  },\n})\n\nexport const selectStyles = createStyles({\n  selectMenu: {\n    paddingRight: 0,\n  },\n  tokenImage: {\n    marginRight: sm,\n  },\n})\n","import ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport { makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\n\nimport { selectStyles, selectedTokenStyles } from './style'\n\nimport Field from 'src/components/forms/Field'\nimport SelectField from 'src/components/forms/SelectField'\nimport { required } from 'src/components/forms/validator'\nimport Img from 'src/components/layout/Img'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\nimport { setImageToPlaceholder } from 'src/routes/safe/components/Balances/utils'\nimport { textShortener } from 'src/utils/strings'\nimport { NFTAssets } from 'src/logic/collectibles/sources/collectibles.d'\n\nconst useSelectedTokenStyles = makeStyles(selectedTokenStyles)\n\ntype SelectedTokenProps = {\n  assetAddress?: string\n  assets: NFTAssets\n}\n\nconst SelectedToken = ({ assetAddress, assets }: SelectedTokenProps): React.ReactElement => {\n  const classes = useSelectedTokenStyles()\n  const asset = assetAddress ? assets[assetAddress] : null\n  const shortener = textShortener({ charsStart: 40, charsEnd: 0 })\n\n  return (\n    <MenuItem className={classes.container}>\n      {asset && asset.numberOfTokens ? (\n        <>\n          <ListItemIcon>\n            <Img className={classes.tokenImage} alt={asset.name} onError={setImageToPlaceholder} src={asset.image} />\n          </ListItemIcon>\n          <ListItemText\n            className={classes.tokenData}\n            primary={shortener(asset.name)}\n            secondary={`${formatAmount(asset.numberOfTokens.toString())} ${asset.symbol}`}\n          />\n        </>\n      ) : (\n        <Paragraph color=\"disabled\" size=\"md\" style={{ opacity: 0.5 }} weight=\"light\">\n          Select an asset*\n        </Paragraph>\n      )}\n    </MenuItem>\n  )\n}\n\nconst useTokenSelectFieldStyles = makeStyles(selectStyles)\n\ntype TokenSelectFieldProps = {\n  assets: NFTAssets\n  initialValue?: string\n}\n\nconst TokenSelectField = ({ assets, initialValue }: TokenSelectFieldProps): React.ReactElement => {\n  const classes = useTokenSelectFieldStyles()\n  const tokenClasses = useSelectedTokenStyles()\n  const assetsAddresses = Object.keys(assets)\n\n  return (\n    <Field\n      className={classes.selectMenu}\n      component={SelectField}\n      disabled={!assetsAddresses.length}\n      initialValue={initialValue}\n      name=\"assetAddress\"\n      renderValue={(assetAddress) => <SelectedToken assetAddress={assetAddress} assets={assets} />}\n      validate={required}\n    >\n      {assetsAddresses.map((assetAddress) => {\n        const asset = assets[assetAddress]\n\n        return (\n          <MenuItem key={asset.slug} value={assetAddress}>\n            <ListItemIcon>\n              <Img\n                className={tokenClasses.tokenImage}\n                alt={asset.name}\n                onError={setImageToPlaceholder}\n                src={asset.image}\n              />\n            </ListItemIcon>\n            <ListItemText\n              primary={asset.name}\n              secondary={`Count: ${formatAmount(asset.numberOfTokens.toString())} ${asset.symbol}`}\n            />\n          </MenuItem>\n        )\n      })}\n    </Field>\n  )\n}\n\nexport default TokenSelectField\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport Divider from 'src/components/Divider'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\nimport { Modal } from 'src/components/Modal'\nimport WhenFieldChanges from 'src/components/WhenFieldChanges'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { nftAssetsSelector, nftTokensSelector } from 'src/logic/collectibles/store/selectors'\nimport SafeInfo from 'src/routes/safe/components/Balances/SendModal/SafeInfo'\nimport { AddressBookInput } from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput'\nimport { NFTToken } from 'src/logic/collectibles/sources/collectibles.d'\nimport { getExplorerInfo } from 'src/config'\nimport { sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { sameString } from 'src/utils/strings'\n\nimport { CollectibleSelectField } from './CollectibleSelectField'\nimport { styles } from './style'\nimport TokenSelectField from './TokenSelectField'\nimport { Erc721Transfer } from '@gnosis.pm/safe-react-gateway-sdk'\n\nconst formMutators = {\n  setMax: (args, state, utils) => {\n    utils.changeValue(state, 'amount', () => args[0])\n  },\n  onTokenChange: (args, state, utils) => {\n    utils.changeValue(state, 'amount', () => '')\n  },\n  setRecipient: (args, state, utils) => {\n    utils.changeValue(state, 'recipientAddress', () => args[0])\n  },\n}\n\nconst useStyles = makeStyles(styles)\n\ntype SendCollectibleProps = {\n  initialValues: any\n  onClose: () => void\n  onNext: (txInfo: SendCollectibleTxInfo) => void\n  recipientAddress?: string\n  selectedToken?: NFTToken | Erc721Transfer\n}\n\nexport type SendCollectibleTxInfo = {\n  assetAddress: string\n  assetName: string\n  nftTokenId: string\n  recipientAddress?: string\n  recipientName?: string\n}\n\nconst SendCollectible = ({\n  initialValues,\n  onClose,\n  onNext,\n  recipientAddress,\n  selectedToken,\n}: SendCollectibleProps): React.ReactElement => {\n  const classes = useStyles()\n  const nftAssets = useSelector(nftAssetsSelector)\n  const nftTokens = useSelector(nftTokensSelector)\n  const addressBook = useSelector(currentNetworkAddressBook)\n  const [selectedEntry, setSelectedEntry] = useState<{ address: string; name: string } | null>(() => {\n    const defaultEntry = { address: recipientAddress || '', name: '' }\n\n    // if there's nothing to lookup for, we return the default entry\n    if (!initialValues?.recipientAddress && !recipientAddress) {\n      return defaultEntry\n    }\n\n    // if there's something to lookup for, `initialValues` has precedence over `recipientAddress`\n    const predefinedAddress = initialValues?.recipientAddress ?? recipientAddress\n    const addressBookEntry = addressBook.find(({ address }) => {\n      return sameAddress(predefinedAddress, address)\n    })\n\n    // if found in the Address Book, then we return the entry\n    if (addressBookEntry) {\n      return addressBookEntry\n    }\n\n    // otherwise we return the default entry\n    return defaultEntry\n  })\n  const [pristine, setPristine] = useState(true)\n  const [isValidAddress, setIsValidAddress] = useState(false)\n\n  React.useMemo(() => {\n    if (selectedEntry === null && pristine) {\n      setPristine(false)\n    }\n  }, [selectedEntry, pristine])\n\n  const handleSubmit = (values: SendCollectibleTxInfo) => {\n    // If the input wasn't modified, there was no mutation of the recipientAddress\n    if (!values.recipientAddress) {\n      values.recipientAddress = selectedEntry?.address\n    }\n    values.recipientName = selectedEntry?.name\n    values.assetName = nftAssets[values.assetAddress].name\n\n    onNext(values)\n  }\n\n  return (\n    <>\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph className={classes.manage} noMargin weight=\"bolder\">\n          Send collectible\n        </Paragraph>\n        <Paragraph className={classes.annotation}>1 of 2</Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.closeIcon} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <GnoForm formMutators={formMutators} initialValues={initialValues} onSubmit={handleSubmit}>\n        {(...args) => {\n          const formState = args[2]\n          const mutators = args[3]\n          const { assetAddress } = formState.values\n          const selectedNFTTokens = nftTokens.filter((nftToken) => nftToken.assetAddress === assetAddress)\n\n          const handleScan = (value, closeQrModal) => {\n            let scannedAddress = value\n\n            if (scannedAddress.startsWith('ethereum:')) {\n              scannedAddress = scannedAddress.replace('ethereum:', '')\n            }\n            const scannedName = addressBook[scannedAddress]?.name ?? ''\n            mutators.setRecipient(scannedAddress)\n            setSelectedEntry({\n              name: scannedName ?? '',\n              address: scannedAddress,\n            })\n            closeQrModal()\n          }\n\n          let shouldDisableSubmitButton = !isValidAddress\n\n          if (selectedEntry) {\n            shouldDisableSubmitButton = !selectedEntry.address\n          }\n\n          return (\n            <>\n              <WhenFieldChanges field=\"assetAddress\" set=\"nftTokenId\" to={''} />\n              <Block className={classes.formContainer}>\n                <SafeInfo />\n                <Divider withArrow />\n                {selectedEntry && selectedEntry.address ? (\n                  <div\n                    onKeyDown={(e) => {\n                      if (sameString(e.key, 'Tab')) {\n                        return\n                      }\n                      setSelectedEntry({ address: '', name: '' })\n                    }}\n                    onClick={() => {\n                      setSelectedEntry({ address: '', name: '' })\n                    }}\n                    role=\"listbox\"\n                    tabIndex={0}\n                  >\n                    <Row margin=\"xs\">\n                      <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                        Recipient\n                      </Paragraph>\n                    </Row>\n                    <Row align=\"center\" margin=\"md\">\n                      <Col xs={12}>\n                        <EthHashInfo\n                          hash={selectedEntry.address}\n                          name={selectedEntry.name}\n                          showAvatar\n                          showCopyBtn\n                          explorerUrl={getExplorerInfo(selectedEntry.address)}\n                        />\n                      </Col>\n                    </Row>\n                  </div>\n                ) : (\n                  <>\n                    <Row margin=\"md\">\n                      <Col xs={11}>\n                        <AddressBookInput\n                          fieldMutator={mutators.setRecipient}\n                          pristine={pristine}\n                          setIsValidAddress={setIsValidAddress}\n                          setSelectedEntry={setSelectedEntry}\n                        />\n                      </Col>\n                      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n                        <ScanQRWrapper handleScan={handleScan} />\n                      </Col>\n                    </Row>\n                  </>\n                )}\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                      Collectible\n                    </Paragraph>\n                  </Col>\n                </Row>\n                <Row margin=\"sm\">\n                  <Col>\n                    <TokenSelectField\n                      assets={nftAssets}\n                      initialValue={\n                        (selectedToken as NFTToken)?.assetAddress ?? (selectedToken as Erc721Transfer)?.tokenAddress\n                      }\n                    />\n                  </Col>\n                </Row>\n                <Row margin=\"xs\">\n                  <Col between=\"lg\">\n                    <Paragraph color=\"disabled\" noMargin size=\"md\" style={{ letterSpacing: '-0.5px' }}>\n                      Token ID\n                    </Paragraph>\n                  </Col>\n                </Row>\n                <Row margin=\"md\">\n                  <Col>\n                    <CollectibleSelectField initialValue={selectedToken?.tokenId} tokens={selectedNFTTokens} />\n                  </Col>\n                </Row>\n              </Block>\n              <Modal.Footer>\n                <Modal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onClose }}\n                  confirmButtonProps={{ disabled: shouldDisableSubmitButton, testId: 'review-tx-btn', text: 'Review' }}\n                />\n              </Modal.Footer>\n            </>\n          )\n        }}\n      </GnoForm>\n    </>\n  )\n}\n\nexport default SendCollectible\n","import React from 'react'\nimport { Field } from 'react-final-form'\n\n// $FlowFixMe\nconst GnoField = ({ ...props }: any) => <Field {...props} />\n\nexport default GnoField\n","import * as React from 'react'\nimport { Form } from 'react-final-form'\n\nconst stylesBasedOn = (padding) => ({\n  padding: `0 ${padding}%`,\n  flexDirection: 'column',\n  flex: '1 0 auto',\n})\n\nconst GnoForm = ({\n  children,\n  decorators,\n  formMutators,\n  initialValues,\n  onSubmit,\n  padding = 0,\n  subscription,\n  testId = '',\n  validation,\n}: any) => (\n  <Form\n    decorators={decorators}\n    initialValues={initialValues}\n    mutators={formMutators}\n    onSubmit={onSubmit}\n    render={({ handleSubmit, ...rest }) => (\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\n      </form>\n    )}\n    subscription={subscription}\n    validate={validation}\n  />\n)\n\nexport default GnoForm\n","import { SyntheticEvent } from 'react'\n\nimport TokenPlaceholder from 'src/routes/safe/components/Balances/assets/token_placeholder.svg'\n\nexport const setImageToPlaceholder = (event: SyntheticEvent<HTMLImageElement, Event>): void => {\n  const img = event.currentTarget\n  if (!/token_placeholder/.test(img.src)) {\n    img.src = TokenPlaceholder\n  }\n}\n","import * as React from 'react'\n\nclass Bold extends React.PureComponent<any> {\n  render() {\n    const { children, ...props } = this.props\n\n    return <b {...props}>{children}</b>\n  }\n}\n\nexport default Bold\n","export default __webpack_public_path__ + \"static/media/token_placeholder.c1abe466.svg\";","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import React, { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Icon, Divider as DividerSRC } from '@gnosis.pm/safe-react-components'\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 8px 0;\n\n  svg {\n    margin: 0 12px 0 4px;\n  }\n`\nconst StyledDivider = styled(DividerSRC)`\n  width: 100%;\n`\n\ntype Props = {\n  withArrow?: boolean\n}\n\nconst Divider = ({ withArrow }: Props): ReactElement => (\n  <Wrapper>\n    {withArrow && <Icon type=\"arrowDown\" size=\"md\" />}\n    <StyledDivider />\n  </Wrapper>\n)\n\nexport default Divider\n","import { makeStyles } from '@material-ui/core/styles'\nimport React, { ReactElement, useState } from 'react'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport Img from 'src/components/layout/Img'\n\nconst useStyles = makeStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n})\n\ntype Props = {\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\n}\n\nexport const ScanQRWrapper = ({ handleScan }: Props): ReactElement => {\n  const classes = useStyles()\n  const [qrModalOpen, setQrModalOpen] = useState(false)\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const onScanFinished = (value: string) => {\n    handleScan(value, closeQrModal)\n  }\n\n  return (\n    <>\n      <Img\n        alt=\"Scan QR\"\n        className={classes.qrCodeBtn}\n        height={20}\n        onClick={() => openQrModal()}\n        role=\"button\"\n        src={QRIcon}\n        testId=\"qr-icon\"\n      />\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\n    </>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport { getExplorerInfo, getNetworkInfo } from 'src/config'\nimport { currentSafeWithNames } from 'src/logic/safe/store/selectors'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Bold from 'src/components/layout/Bold'\nimport { border, xs } from 'src/theme/variables'\nimport Block from 'src/components/layout/Block'\n\nconst { nativeCoin } = getNetworkInfo()\n\nconst StyledBlock = styled(Block)`\n  font-size: 12px;\n  line-height: 1.08;\n  letter-spacing: -0.5px;\n  background-color: ${border};\n  width: fit-content;\n  padding: 5px 10px;\n  margin-top: ${xs};\n  margin-left: 40px;\n  border-radius: 3px;\n`\n\nconst SafeInfo = (): React.ReactElement => {\n  const { address: safeAddress, ethBalance, name: safeName } = useSelector(currentSafeWithNames)\n\n  return (\n    <>\n      <EthHashInfo\n        hash={safeAddress}\n        name={safeName}\n        explorerUrl={getExplorerInfo(safeAddress)}\n        showAvatar\n        showCopyBtn\n      />\n      {ethBalance && (\n        <StyledBlock>\n          <Paragraph noMargin>\n            Balance: <Bold data-testid=\"current-eth-balance\">{`${ethBalance} ${nativeCoin.symbol}`}</Bold>\n          </Paragraph>\n        </StyledBlock>\n      )}\n    </>\n  )\n}\n\nexport default SafeInfo\n","import FormControl from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport Select from '@material-ui/core/Select'\nimport React from 'react'\n\nconst style = {\n  minWidth: '100%',\n}\n\nconst SelectInput = ({\n  classes,\n  disableError,\n  formControlProps,\n  input: { name, onChange, value, ...restInput },\n  label,\n  meta,\n  renderValue,\n  ...rest\n}) => {\n  const showError = ((meta.submitError && !meta.dirtySinceLastSubmit) || meta.error) && meta.touched && !disableError\n  const inputProps = {\n    ...restInput,\n    name,\n  }\n\n  return (\n    <FormControl {...formControlProps} error={showError} style={style}>\n      <InputLabel htmlFor={name}>{label}</InputLabel>\n      <Select\n        classes={classes}\n        inputProps={inputProps}\n        onChange={onChange}\n        renderValue={renderValue}\n        value={value}\n        {...rest}\n      />\n      {showError && <FormHelperText>{meta.error || meta.submitError}</FormHelperText>}\n    </FormControl>\n  )\n}\n\nexport default SelectInput\n","import { createElement, Component } from 'react';\nimport { Field } from 'react-final-form';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar ExternallyChangedState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(ExternallyChangedState, _React$Component);\n\n  function ExternallyChangedState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: props.input.value,\n      externallyChanged: false\n    };\n    return _this;\n  }\n\n  var _proto = ExternallyChangedState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        value = _this$props.input.value,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (value !== previous) {\n      this.setState({\n        previous: value,\n        externallyChanged: !active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return this.props.children(this.state.externallyChanged);\n  };\n\n  return ExternallyChangedState;\n}(Component);\n\nvar ExternallyChanged = function ExternallyChanged(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true,\n      value: true\n    },\n    allowNull: true,\n    render: function render(props) {\n      return createElement(ExternallyChangedState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnBlurState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnBlurState, _React$Component);\n\n  function OnBlurState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: !!props.meta.active\n    };\n    return _this;\n  }\n\n  var _proto = OnBlurState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (previous && !active) {\n      children();\n    }\n\n    if (previous !== active) {\n      this.setState({\n        previous: active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnBlurState;\n}(Component);\n\nvar OnBlur = function OnBlur(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true\n    },\n    render: function render(props) {\n      return createElement(OnBlurState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnChangeState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnChangeState, _React$Component);\n\n  function OnChangeState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: props.input.value\n    };\n    return _this;\n  }\n\n  var _proto = OnChangeState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        value = _this$props.input.value;\n    var previous = this.state.previous;\n\n    if (value !== previous) {\n      this.setState({\n        previous: value\n      });\n      children(value, previous);\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnChangeState;\n}(Component);\n\nvar OnChange = function OnChange(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      value: true\n    },\n    allowNull: true,\n    render: function render(props) {\n      return createElement(OnChangeState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nvar OnFocusState =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(OnFocusState, _React$Component);\n\n  function OnFocusState(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      previous: !!props.meta.active\n    };\n    return _this;\n  }\n\n  var _proto = OnFocusState.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        active = _this$props.meta.active;\n    var previous = this.state.previous;\n\n    if (active && !previous) {\n      this.setState({\n        previous: active\n      });\n      children();\n    } else if (!active && previous) {\n      this.setState({\n        previous: active\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return OnFocusState;\n}(Component);\n\nvar OnFocus = function OnFocus(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  return createElement(Field, {\n    name: name,\n    subscription: {\n      active: true\n    },\n    render: function render(props) {\n      return createElement(OnFocusState, _extends({}, props, {\n        children: children\n      }));\n    }\n  });\n};\n\nexport { ExternallyChanged, OnBlur, OnChange, OnFocus };\n","import { createStyles, makeStyles } from '@material-ui/core'\n\nexport const useTextFieldLabelStyle = makeStyles(\n  createStyles({\n    root: {\n      overflow: 'hidden',\n      borderRadius: 4,\n      fontSize: '15px',\n      width: '500px',\n    },\n  }),\n)\n\nexport const useTextFieldInputStyle = makeStyles(\n  createStyles({\n    root: {\n      fontSize: '14px',\n      width: '420px',\n    },\n  }),\n)\n","import { EthHashInfo } from '@gnosis.pm/safe-react-components'\nimport MuiTextField from '@material-ui/core/TextField'\nimport Autocomplete, { AutocompleteProps } from '@material-ui/lab/Autocomplete'\nimport React, { Dispatch, ReactElement, SetStateAction, useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { mustBeEthereumAddress, mustBeEthereumContractAddress } from 'src/components/forms/validator'\nimport { getNetworkId, isFeatureEnabled } from 'src/config'\nimport { FEATURES } from 'src/config/networks/network.d'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { filterContractAddressBookEntries, filterAddressEntries } from 'src/logic/addressBook/utils'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport {\n  useTextFieldInputStyle,\n  useTextFieldLabelStyle,\n} from 'src/routes/safe/components/Balances/SendModal/screens/AddressBookInput/style'\nimport { trimSpaces } from 'src/utils/strings'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\n\nconst chainId = getNetworkId()\n\nexport interface AddressBookProps {\n  fieldMutator: (address: string) => void\n  label?: string\n  pristine?: boolean\n  recipientAddress?: string\n  errorMsg?: string\n  setIsValidAddress: (valid: boolean) => void\n  setSelectedEntry: Dispatch<SetStateAction<{ address: string; name: string }> | null>\n}\n\nexport interface BaseAddressBookInputProps extends AddressBookProps {\n  addressBookEntries: AddressBookEntry[]\n  setSelectedEntry: (args: { address: string; name: string } | null) => void\n  setValidationText: Dispatch<SetStateAction<string | undefined>>\n  validationText: string | undefined\n}\n\nconst BaseAddressBookInput = ({\n  addressBookEntries,\n  fieldMutator,\n  label = 'Recipient',\n  setIsValidAddress,\n  setSelectedEntry,\n  setValidationText,\n  validationText,\n}: BaseAddressBookInputProps): ReactElement => {\n  const updateAddressInfo = (addressEntry: AddressBookEntry): void => {\n    setSelectedEntry(addressEntry)\n    fieldMutator(addressEntry.address)\n  }\n\n  const validateAddress = (address: string): AddressBookEntry | string | undefined => {\n    const addressErrorMessage = mustBeEthereumAddress(address)\n    setIsValidAddress(!addressErrorMessage)\n\n    if (addressErrorMessage) {\n      setValidationText(addressErrorMessage)\n      return\n    }\n\n    const filteredEntries = filterAddressEntries(addressBookEntries, { inputValue: address })\n    return filteredEntries.length === 1 ? filteredEntries[0] : address\n  }\n\n  const onChange: AutocompleteProps<AddressBookEntry, false, false, true>['onChange'] = (_, value, reason) => {\n    switch (reason) {\n      case 'select-option': {\n        const { address, name, chainId } = value as AddressBookEntry\n        updateAddressInfo({ address, name, chainId })\n        break\n      }\n    }\n  }\n\n  const onInputChange: AutocompleteProps<AddressBookEntry, false, false, true>['onInputChange'] = async (\n    _,\n    value,\n    reason,\n  ) => {\n    switch (reason) {\n      case 'input': {\n        const normalizedValue = trimSpaces(value)\n\n        if (!normalizedValue) {\n          break\n        }\n\n        // ENS-enabled resolve/validation\n        if (\n          isFeatureEnabled(FEATURES.DOMAIN_LOOKUP) &&\n          (isValidEnsName(normalizedValue) || isValidCryptoDomainName(normalizedValue))\n        ) {\n          let address = ''\n          try {\n            address = await getAddressFromDomain(normalizedValue)\n          } catch (err) {\n            logError(Errors._101, err.message)\n          }\n\n          const validatedAddress = validateAddress(address)\n\n          if (!validatedAddress) {\n            fieldMutator('')\n            break\n          }\n\n          const newEntry =\n            typeof validatedAddress === 'string'\n              ? {\n                  address,\n                  name: normalizedValue,\n                  chainId,\n                }\n              : validatedAddress\n\n          updateAddressInfo(newEntry)\n          break\n        }\n\n        // ETH address validation\n        const validatedAddress = validateAddress(normalizedValue)\n\n        if (!validatedAddress) {\n          fieldMutator('')\n          break\n        }\n\n        const newEntry =\n          typeof validatedAddress === 'string'\n            ? {\n                address: validatedAddress,\n                name: '',\n                chainId,\n              }\n            : validatedAddress\n\n        updateAddressInfo(newEntry)\n\n        break\n      }\n    }\n  }\n\n  const labelStyles = useTextFieldLabelStyle()\n  const inputStyles = useTextFieldInputStyle()\n\n  return (\n    <Autocomplete<AddressBookEntry, false, false, true>\n      closeIcon={null}\n      openOnFocus={false}\n      filterOptions={filterAddressEntries}\n      freeSolo\n      onChange={onChange}\n      onInputChange={onInputChange}\n      options={addressBookEntries}\n      id=\"address-book-input\"\n      renderInput={(params) => (\n        <MuiTextField\n          {...params}\n          autoFocus={true}\n          error={!!validationText}\n          fullWidth\n          variant=\"filled\"\n          label={validationText ? validationText : label}\n          InputLabelProps={{ shrink: true, required: true, classes: labelStyles }}\n          InputProps={{ ...params.InputProps, classes: inputStyles }}\n        />\n      )}\n      getOptionLabel={({ address }) => address}\n      renderOption={({ address, name }) => <EthHashInfo hash={address} name={name} showAvatar />}\n      role=\"listbox\"\n      style={{ display: 'flex', flexGrow: 1 }}\n    />\n  )\n}\n\nexport const AddressBookInput = (props: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    if (props.errorMsg) {\n      setValidationText(props.errorMsg)\n    }\n  }, [props.errorMsg])\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={addressBookEntries}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n\nexport const ContractsAddressBookInput = ({\n  setIsValidAddress,\n  setSelectedEntry,\n  ...props\n}: AddressBookProps): ReactElement => {\n  const addressBookEntries = useSelector(currentNetworkAddressBook)\n  const [filteredEntries, setFilteredEntries] = useState<AddressBookEntry[]>([])\n  const [validationText, setValidationText] = useState<string>('')\n\n  useEffect(() => {\n    const filterContractAddresses = async (): Promise<void> => {\n      const filteredADBK = await filterContractAddressBookEntries(addressBookEntries)\n      setFilteredEntries(filteredADBK)\n    }\n    filterContractAddresses()\n  }, [addressBookEntries])\n\n  const onSetSelectedEntry = async (selectedEntry) => {\n    if (selectedEntry?.address) {\n      // verify if `address` is a contract\n      const contractAddressErrorMessage = await mustBeEthereumContractAddress(selectedEntry.address)\n      setIsValidAddress(!contractAddressErrorMessage)\n      setValidationText(contractAddressErrorMessage ?? '')\n      setSelectedEntry(selectedEntry)\n    }\n  }\n\n  return (\n    <BaseAddressBookInput\n      addressBookEntries={filteredEntries}\n      setIsValidAddress={setIsValidAddress}\n      setSelectedEntry={onSetSelectedEntry}\n      setValidationText={setValidationText}\n      validationText={validationText}\n      {...props}\n    />\n  )\n}\n","import { createSelector } from 'reselect'\nimport { NFTAsset, NFTAssets, NFTToken, NFTTokens } from 'src/logic/collectibles/sources/collectibles.d'\n\nimport { AppReduxState } from 'src/store'\nimport { NFT_ASSETS_REDUCER_ID, NFT_TOKENS_REDUCER_ID } from 'src/logic/collectibles/store/reducer/collectibles'\nexport const nftAssets = (state: AppReduxState): NFTAssets => state[NFT_ASSETS_REDUCER_ID]\nexport const nftTokens = (state: AppReduxState): NFTTokens => state[NFT_TOKENS_REDUCER_ID]\n\nexport const nftAssetsSelector = createSelector(nftAssets, (assets) => assets)\n\nexport const nftTokensSelector = createSelector(nftTokens, (tokens) => tokens)\n\nconst nftAssetsToListSelector = createSelector(nftAssets, (assets): NFTAsset[] => {\n  return assets ? Object.values(assets) : []\n})\n\nconst nftAssetsAddressFromNftTokensSelector = createSelector(nftTokensSelector, (userNftTokens): string[] => {\n  const addresses = userNftTokens.map((nftToken) => nftToken.assetAddress)\n  const uniqueAddresses = new Set(addresses)\n  return Array.from(uniqueAddresses)\n})\n\nexport const orderedNFTAssets = createSelector(nftTokensSelector, (userNftTokens): NFTToken[] =>\n  userNftTokens.sort((a, b) => a.name.localeCompare(b.name)),\n)\n\nexport const nftAssetsFromNftTokensSelector = createSelector(\n  nftAssetsToListSelector,\n  nftAssetsAddressFromNftTokensSelector,\n  (nftAssets, nftAssetsFromNftTokens): NFTAsset[] => {\n    return nftAssets\n      .sort((a, b) => a.name.localeCompare(b.name))\n      .filter(({ address }) => nftAssetsFromNftTokens.includes(address))\n  },\n)\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListContext from '../List/ListContext';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      minWidth: 56,\n      color: theme.palette.action.active,\n      flexShrink: 0,\n      display: 'inline-flex'\n    },\n\n    /* Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: {\n      marginTop: 8\n    }\n  };\n};\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n */\n\nvar ListItemIcon = /*#__PURE__*/React.forwardRef(function ListItemIcon(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\"]);\n\n  var context = React.useContext(ListContext);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, context.alignItems === 'flex-start' && classes.alignItemsFlexStart),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? ListItemIcon.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@material-ui/icons` SVG icon element.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiListItemIcon'\n})(ListItemIcon);"],"sourceRoot":""}