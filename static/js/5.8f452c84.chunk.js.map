{"version":3,"sources":["components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","logic/hooks/useEstimateTransactionGas.tsx","routes/safe/components/Transactions/helpers/TxParametersDetail/index.tsx","routes/safe/components/Transactions/helpers/EditTxParametersForm/style.ts","routes/safe/components/Transactions/helpers/EditTxParametersForm/index.tsx","routes/safe/components/Transactions/helpers/EditableTxParameters.tsx","components/TransactionFailText/index.tsx","components/TransactionsFees/index.tsx","logic/hooks/useEstimationStatus.tsx","assets/icons/info_red.svg","routes/safe/container/hooks/useTransactionParameters.ts","routes/safe/components/Transactions/helpers/utils.ts"],"names":["GnoField","props","overflowStyle","overflow","width","useStyles","makeStyles","createStyles","root","paddingTop","lg","paddingBottom","lineHeight","TextField","input","name","onChange","value","restInput","inputAdornment","meta","multiline","rows","testId","text","rest","classes","helperText","undefined","showError","touched","pristine","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","className","InputProps","style","stylesBasedOn","padding","flexDirection","flex","GnoForm","children","decorators","formMutators","initialValues","onSubmit","subscription","validation","mutators","render","handleSubmit","data-testid","submitting","validating","form","validate","EstimationStatus","checkIfTxIsExecution","threshold","preApprovingOwner","txConfirmations","txType","sameString","checkIfTxIsApproveAndExecution","checkIfTxIsCreation","useEstimateTransactionGas","txRecipient","txData","txAmount","operation","safeTxGas","manualGasPrice","manualGasLimit","useState","txEstimationExecutionStatus","LOADING","gasEstimation","gasCost","gasCostFormatted","gasPrice","gasPriceFormatted","gasLimit","isExecution","isCreation","isOffChainSignature","setGasEstimation","nativeCoin","getNetworkInfo","useSelector","currentSafe","address","safeAddress","currentVersion","safeVersion","providerSelector","from","account","smartContractWallet","providerName","useEffect","a","length","size","Number","approvalAndExecution","checkIfOffChainSignatureIsPossible","safeTxGasEstimation","ethGasLimitEstimation","transactionCallSuccess","estimateSafeTxGas","CALL","estimateTransactionGasLimit","web3","utils","toWei","calculateGasPrice","fromWei","estimatedGasCosts","parseInt","fromTokenUnit","decimals","formatAmount","toString","checkTransactionExecution","gasToken","ZERO_ADDRESS","refundReceiver","SUCCESS","FAILURE","console","warn","message","estimateGas","TxParameterWrapper","styled","div","AccordionDetailsWrapper","StyledText","Text","StyledButtonLink","ButtonLink","TxParametersDetail","onEdit","txParameters","compact","parametersStatus","isTransactionCreation","isTransactionExecution","currentSafeThreshold","defaultParameterStatus","color","areSafeParamsEnabled","safeNonce","areEthereumParamsVisible","ethereumTxParametersTitle","ethNonce","ethGasLimit","ethGasPrice","textSize","onClick","styles","heading","md","justifyContent","boxSizing","height","annotation","letterSpacing","secondaryText","marginRight","marginLeft","headingText","fontSize","closeIcon","container","amount","sm","buttonRow","alignItems","gap","StyledDivider","Divider","StyledDividerFooter","SafeOptions","EthereumOptions","StyledLink","Link","StyledTextMt","formValidation","values","minValue","EditTxParametersForm","onClose","onCloseFormHandler","Row","align","grow","withoutMargin","IconButton","disableRipple","Block","strong","Field","defaultValue","placeholder","type","min","component","disabled","href","target","Modal","Footer","Buttons","cancelButtonProps","confirmButtonProps","EditableTxParameters","closeEditModalCallback","isEditMode","toggleEditMode","useManualValues","setUseManualValues","useTransactionParameters","parameterStatus","initialEthGasLimit","initialEthGasPrice","initialSafeNonce","initialSafeTxGas","setEthGasPrice","setEthGasLimit","setSafeNonce","setSafeTxGas","setEthNonce","toggleStatus","prev","executionWarningRow","display","warningIcon","TransactionFailText","Paragraph","Img","alt","src","InfoIcon","TransactionFees","transactionAction","as","useEstimationStatus","txEstimationStatus","ButtonStatus","DISABLED","buttonStatus","setButtonStatus","mounted","READY","isCancelTransaction","connectedWalletAddress","userAccountSelector","safeAddressFromUrl","currentSafeCurrentVersion","ethGasPriceInGWei","setEthGasPriceInGWei","getUserNonce","res","getNonce","safeInstance","getGnosisSafeInstanceAt","getLastTx","lastTx","getNewTxNonce","nonce","getSafeNonce"],"mappings":"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","file":"static/js/5.8f452c84.chunk.js","sourcesContent":["import React from 'react'\nimport { Field } from 'react-final-form'\n\n// $FlowFixMe\nconst GnoField = ({ ...props }: any) => <Field {...props} />\n\nexport default GnoField\n","import MuiTextField from '@material-ui/core/TextField'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\n\nimport { lg } from 'src/theme/variables'\n\n// Neded for solving a fix in Windows browsers\nconst overflowStyle = {\n  overflow: 'hidden',\n  width: '100%',\n}\n\nconst styles = () =>\n  createStyles({\n    root: {\n      paddingTop: lg,\n      paddingBottom: '12px',\n      lineHeight: 0,\n    },\n  })\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  input: {\n    name: string\n    onChange?: () => void\n    value: string\n    placeholder: string\n    type: string\n  }\n  meta: {\n    touched?: boolean\n    pristine?: boolean\n    valid?: boolean\n    error?: string\n    modifiedSinceLastSubmit?: boolean\n    submitError?: boolean\n    active?: boolean\n  }\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\n  multiline: boolean\n  rows?: string\n  testId: string\n  text: string\n  disabled?: boolean\n  rowsMax?: number\n  className?: string\n}\n\nconst TextField = (props: Props): React.ReactElement => {\n  const {\n    input: { name, onChange, value, ...restInput },\n    inputAdornment,\n    meta,\n    multiline,\n    rows,\n    testId,\n    text,\n    ...rest\n  } = props\n  const classes = useStyles()\n  const helperText = value ? text : undefined\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\n  const errorMessage = meta.error || meta.submitError\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\n\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\n\n  const inputRoot = helperText ? classes.root : ''\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\n  const inputProps = {\n    ...restInput,\n    autoComplete: 'off',\n    'data-testid': testId,\n  }\n  const inputRootProps = {\n    ...inputAdornment,\n    className: `${inputRoot} ${statusClasses}`,\n    disableUnderline: disableUnderline,\n  }\n\n  return (\n    <MuiTextField\n      error={hasError && showError}\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\n      inputProps={inputProps} // blank in order to force to have helper text\n      InputProps={inputRootProps}\n      multiline={multiline}\n      name={name}\n      onChange={onChange}\n      rows={rows}\n      style={overflowStyle}\n      value={value}\n      {...rest}\n    />\n  )\n}\n\nexport default TextField\n","import * as React from 'react'\nimport { Form } from 'react-final-form'\n\nconst stylesBasedOn = (padding) => ({\n  padding: `0 ${padding}%`,\n  flexDirection: 'column',\n  flex: '1 0 auto',\n})\n\nconst GnoForm = ({\n  children,\n  decorators,\n  formMutators,\n  initialValues,\n  onSubmit,\n  padding = 0,\n  subscription,\n  testId = '',\n  validation,\n}: any) => (\n  <Form\n    decorators={decorators}\n    initialValues={initialValues}\n    mutators={formMutators}\n    onSubmit={onSubmit}\n    render={({ handleSubmit, ...rest }) => (\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\n      </form>\n    )}\n    subscription={subscription}\n    validate={validation}\n  />\n)\n\nexport default GnoForm\n","import { List } from 'immutable'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { getNetworkInfo } from 'src/config'\nimport {\n  checkTransactionExecution,\n  estimateSafeTxGas,\n  estimateTransactionGasLimit,\n} from 'src/logic/safe/transactions/gas'\nimport { fromTokenUnit } from 'src/logic/tokens/utils/humanReadableValue'\nimport { formatAmount } from 'src/logic/tokens/utils/formatAmount'\nimport { calculateGasPrice } from 'src/logic/wallets/ethTransactions'\nimport { currentSafe } from 'src/logic/safe/store/selectors'\nimport { CALL } from 'src/logic/safe/transactions'\nimport { web3ReadOnly as web3 } from 'src/logic/wallets/getWeb3'\nimport { providerSelector } from 'src/logic/wallets/store/selectors'\n\nimport { Confirmation } from 'src/logic/safe/store/models/types/confirmation'\nimport { checkIfOffChainSignatureIsPossible } from 'src/logic/safe/safeTxSigner'\nimport { ZERO_ADDRESS } from 'src/logic/wallets/ethAddresses'\nimport { sameString } from 'src/utils/strings'\n\nexport enum EstimationStatus {\n  LOADING = 'LOADING',\n  FAILURE = 'FAILURE',\n  SUCCESS = 'SUCCESS',\n}\n\nexport const checkIfTxIsExecution = (\n  threshold: number,\n  preApprovingOwner?: string,\n  txConfirmations?: number,\n  txType?: string,\n): boolean => {\n  if (\n    threshold === 1 ||\n    sameString(txType, 'spendingLimit') ||\n    (txConfirmations !== undefined && txConfirmations >= threshold)\n  ) {\n    return true\n  }\n\n  if (preApprovingOwner && txConfirmations) {\n    return txConfirmations + 1 === threshold\n  }\n\n  return false\n}\n\nexport const checkIfTxIsApproveAndExecution = (\n  threshold: number,\n  txConfirmations: number,\n  txType?: string,\n  preApprovingOwner?: string,\n): boolean => {\n  if (preApprovingOwner) {\n    return txConfirmations + 1 === threshold || sameString(txType, 'spendingLimit')\n  }\n\n  if (threshold === 1) {\n    return true\n  }\n\n  return false\n}\n\nexport const checkIfTxIsCreation = (txConfirmations: number, txType?: string): boolean =>\n  txConfirmations === 0 && !sameString(txType, 'spendingLimit')\n\ntype UseEstimateTransactionGasProps = {\n  txData: string\n  txRecipient: string\n  txConfirmations?: List<Confirmation>\n  txAmount?: string\n  preApprovingOwner?: string\n  operation?: number\n  safeTxGas?: number\n  txType?: string\n  manualGasPrice?: string\n  manualGasLimit?: string\n}\n\nexport type TransactionGasEstimationResult = {\n  txEstimationExecutionStatus: EstimationStatus\n  gasEstimation: number // Amount of gas needed for execute or approve the transaction\n  gasCost: string // Cost of gas in raw format (estimatedGas * gasPrice)\n  gasCostFormatted: string // Cost of gas in format '< | > 100'\n  gasPrice: string // Current price of gas unit\n  gasPriceFormatted: string // Current gas price formatted\n  gasLimit: string // Minimum gas requited to execute the Tx\n  isExecution: boolean // Returns true if the user will execute the tx or false if it just signs it\n  isCreation: boolean // Returns true if the transaction is a creation transaction\n  isOffChainSignature: boolean // Returns true if offChainSignature is available\n}\n\nexport const useEstimateTransactionGas = ({\n  txRecipient,\n  txData,\n  txConfirmations,\n  txAmount,\n  preApprovingOwner,\n  operation,\n  safeTxGas,\n  txType,\n  manualGasPrice,\n  manualGasLimit,\n}: UseEstimateTransactionGasProps): TransactionGasEstimationResult => {\n  const [gasEstimation, setGasEstimation] = useState<TransactionGasEstimationResult>({\n    txEstimationExecutionStatus: EstimationStatus.LOADING,\n    gasEstimation: 0,\n    gasCost: '0',\n    gasCostFormatted: '< 0.001',\n    gasPrice: '0',\n    gasPriceFormatted: '0',\n    gasLimit: '0',\n    isExecution: false,\n    isCreation: false,\n    isOffChainSignature: false,\n  })\n  const { nativeCoin } = getNetworkInfo()\n  const { address: safeAddress = '', threshold = 1, currentVersion: safeVersion = '' } = useSelector(currentSafe) ?? {}\n  const { account: from, smartContractWallet, name: providerName } = useSelector(providerSelector)\n\n  useEffect(() => {\n    const estimateGas = async () => {\n      if (!txData.length) {\n        return\n      }\n\n      const isCreation = checkIfTxIsCreation(txConfirmations?.size || 0, txType)\n      const isExecution = checkIfTxIsExecution(Number(threshold), preApprovingOwner, txConfirmations?.size, txType)\n      const approvalAndExecution = checkIfTxIsApproveAndExecution(\n        Number(threshold),\n        txConfirmations?.size || 0,\n        txType,\n        preApprovingOwner,\n      )\n      const isOffChainSignature = checkIfOffChainSignatureIsPossible(isExecution, smartContractWallet, safeVersion)\n\n      try {\n        let safeTxGasEstimation = safeTxGas || 0\n        let ethGasLimitEstimation = 0\n        let transactionCallSuccess = true\n        let txEstimationExecutionStatus = EstimationStatus.LOADING\n\n        if (isCreation) {\n          safeTxGasEstimation = await estimateSafeTxGas({\n            safeAddress,\n            txData,\n            txRecipient,\n            txAmount: txAmount || '0',\n            operation: operation || CALL,\n          })\n        }\n        if (isExecution || approvalAndExecution) {\n          ethGasLimitEstimation = await estimateTransactionGasLimit({\n            safeAddress,\n            safeVersion,\n            txRecipient,\n            txData,\n            txAmount: txAmount || '0',\n            txConfirmations,\n            isExecution,\n            isOffChainSignature,\n            operation: operation || CALL,\n            from,\n            safeTxGas: safeTxGasEstimation,\n            approvalAndExecution,\n          })\n        }\n\n        const gasPrice = manualGasPrice ? web3.utils.toWei(manualGasPrice, 'gwei') : await calculateGasPrice()\n        const gasPriceFormatted = web3.utils.fromWei(gasPrice, 'gwei')\n        const estimatedGasCosts = ethGasLimitEstimation * parseInt(gasPrice, 10)\n        const gasCost = fromTokenUnit(estimatedGasCosts, nativeCoin.decimals)\n        const gasCostFormatted = formatAmount(gasCost)\n        const gasLimit = manualGasLimit || ethGasLimitEstimation.toString()\n\n        if (isExecution) {\n          transactionCallSuccess = await checkTransactionExecution({\n            safeAddress,\n            safeVersion,\n            txRecipient,\n            txData,\n            txAmount: txAmount || '0',\n            txConfirmations,\n            operation: operation || CALL,\n            from,\n            gasPrice: '0',\n            gasToken: ZERO_ADDRESS,\n            gasLimit,\n            refundReceiver: ZERO_ADDRESS,\n            safeTxGas: safeTxGasEstimation,\n            approvalAndExecution,\n          })\n        }\n\n        txEstimationExecutionStatus = transactionCallSuccess ? EstimationStatus.SUCCESS : EstimationStatus.FAILURE\n\n        setGasEstimation({\n          txEstimationExecutionStatus,\n          gasEstimation: safeTxGasEstimation,\n          gasCost,\n          gasCostFormatted,\n          gasPrice,\n          gasPriceFormatted,\n          gasLimit,\n          isExecution,\n          isCreation,\n          isOffChainSignature,\n        })\n      } catch (error) {\n        console.warn(error.message)\n        // If safeTxGas estimation fail we set this value to 0 (so up to all gasLimit can be used)\n        setGasEstimation({\n          txEstimationExecutionStatus: EstimationStatus.FAILURE,\n          gasEstimation: 0,\n          gasCost: '0',\n          gasCostFormatted: '< 0.001',\n          gasPrice: '1',\n          gasPriceFormatted: '1',\n          gasLimit: '0',\n          isExecution,\n          isCreation,\n          isOffChainSignature,\n        })\n      }\n    }\n\n    estimateGas()\n  }, [\n    txData,\n    safeAddress,\n    txRecipient,\n    txConfirmations,\n    txAmount,\n    preApprovingOwner,\n    nativeCoin.decimals,\n    threshold,\n    from,\n    operation,\n    safeVersion,\n    smartContractWallet,\n    safeTxGas,\n    txType,\n    providerName,\n    manualGasPrice,\n    manualGasLimit,\n  ])\n\n  return gasEstimation\n}\n","import React, { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Text, ButtonLink, Accordion, AccordionSummary, AccordionDetails } from '@gnosis.pm/safe-react-components'\n\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { ParametersStatus, areEthereumParamsVisible, areSafeParamsEnabled, ethereumTxParametersTitle } from '../utils'\nimport { useSelector } from 'react-redux'\nimport { currentSafeThreshold } from 'src/logic/safe/store/selectors'\n\nconst TxParameterWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst AccordionDetailsWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`\nconst StyledText = styled(Text)`\n  margin: 8px 0 0 0;\n`\n\nconst StyledButtonLink = styled(ButtonLink)`\n  padding-left: 0;\n  margin: 8px 0 0 0;\n\n  > p {\n    margin-left: 0;\n  }\n`\n\ntype Props = {\n  txParameters: TxParameters\n  onEdit: () => void\n  compact?: boolean\n  parametersStatus?: ParametersStatus\n  isTransactionCreation: boolean\n  isTransactionExecution: boolean\n  isOffChainSignature: boolean\n}\n\nexport const TxParametersDetail = ({\n  onEdit,\n  txParameters,\n  compact = true,\n  parametersStatus,\n  isTransactionCreation,\n  isTransactionExecution,\n  isOffChainSignature,\n}: Props): ReactElement | null => {\n  const threshold = useSelector(currentSafeThreshold) || 1\n  const defaultParameterStatus = isOffChainSignature && threshold > 1 ? 'ETH_HIDDEN' : 'ENABLED'\n\n  if (!isTransactionExecution && !isTransactionCreation && isOffChainSignature) {\n    return null\n  }\n\n  return (\n    <Accordion compact={compact}>\n      <AccordionSummary>\n        <Text size=\"lg\">Advanced options</Text>\n      </AccordionSummary>\n      <AccordionDetails>\n        <AccordionDetailsWrapper>\n          <StyledText size=\"md\" color=\"placeHolder\">\n            Safe transaction\n          </StyledText>\n\n          <TxParameterWrapper>\n            <Text\n              size=\"lg\"\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\n            >\n              Safe nonce\n            </Text>\n            <Text\n              size=\"lg\"\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\n            >\n              {txParameters.safeNonce}\n            </Text>\n          </TxParameterWrapper>\n\n          <TxParameterWrapper>\n            <Text\n              size=\"lg\"\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\n            >\n              SafeTxGas\n            </Text>\n            <Text\n              size=\"lg\"\n              color={areSafeParamsEnabled(parametersStatus || defaultParameterStatus) ? 'text' : 'secondaryLight'}\n            >\n              {txParameters.safeTxGas}\n            </Text>\n          </TxParameterWrapper>\n\n          {areEthereumParamsVisible(parametersStatus || defaultParameterStatus) && (\n            <>\n              <TxParameterWrapper>\n                <StyledText size=\"md\" color=\"placeHolder\">\n                  {ethereumTxParametersTitle(isTransactionExecution)}\n                </StyledText>\n              </TxParameterWrapper>\n\n              <TxParameterWrapper>\n                <Text size=\"lg\">Nonce</Text>\n                <Text size=\"lg\">{txParameters.ethNonce}</Text>\n              </TxParameterWrapper>\n\n              <TxParameterWrapper>\n                <Text size=\"lg\">Gas limit</Text>\n                <Text size=\"lg\">{txParameters.ethGasLimit}</Text>\n              </TxParameterWrapper>\n\n              <TxParameterWrapper>\n                <Text size=\"lg\">Gas price</Text>\n                <Text size=\"lg\">{txParameters.ethGasPrice}</Text>\n              </TxParameterWrapper>\n            </>\n          )}\n          <StyledButtonLink color=\"primary\" textSize=\"xl\" onClick={onEdit}>\n            Edit\n          </StyledButtonLink>\n        </AccordionDetailsWrapper>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import { lg, md, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: `${md} ${lg}`,\n    justifyContent: 'space-between',\n    boxSizing: 'border-box',\n    height: '74px',\n  },\n  annotation: {\n    letterSpacing: '-1px',\n    color: secondaryText,\n    marginRight: 'auto',\n    marginLeft: '20px',\n  },\n  headingText: {\n    fontSize: lg,\n  },\n  closeIcon: {\n    height: '35px',\n    width: '35px',\n  },\n  container: {\n    padding: `${md} ${lg}`,\n  },\n  amount: {\n    marginLeft: sm,\n  },\n  address: {\n    marginRight: sm,\n  },\n  buttonRow: {\n    height: '52px',\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: '16px',\n  },\n})\n","import React, { ReactElement } from 'react'\nimport IconButton from '@material-ui/core/IconButton'\nimport Close from '@material-ui/icons/Close'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Title, Text, Divider, Link, Icon } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport Field from 'src/components/forms/Field'\nimport TextField from 'src/components/forms/TextField'\nimport Block from 'src/components/layout/Block'\nimport Row from 'src/components/layout/Row'\nimport { styles } from './style'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport { TxParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { minValue } from 'src/components/forms/validator'\nimport { Modal } from 'src/components/Modal'\n\nimport { ParametersStatus, areSafeParamsEnabled, areEthereumParamsVisible, ethereumTxParametersTitle } from '../utils'\n\nconst StyledDivider = styled(Divider)`\n  margin: 0px;\n`\nconst StyledDividerFooter = styled(Divider)`\n  margin: 16px -24px;\n`\n\nconst SafeOptions = styled.div`\n  display: flex;\n  justify-content: space-between;\n  gap: 20px;\n`\n\nconst EthereumOptions = styled.div`\n  display: flex;\n  /* justify-content: space-between; */\n  flex-wrap: wrap;\n  gap: 10px 20px;\n\n  div {\n    width: 216px !important;\n  }\n`\nconst StyledLink = styled(Link)`\n  margin: 16px 0 0 0;\n  display: inline-flex;\n  align-items: center;\n\n  > :first-of-type {\n    margin-right: 5px;\n  }\n`\nconst StyledText = styled(Text)`\n  margin: 0 0 4px 0;\n`\nconst StyledTextMt = styled(Text)`\n  margin: 16px 0 4px 0;\n`\nconst useStyles = makeStyles(styles)\n\ninterface Props {\n  txParameters: TxParameters\n  onClose: (txParameters?: TxParameters) => void\n  parametersStatus: ParametersStatus\n  isExecution: boolean\n}\n\nconst formValidation = (values) => {\n  const { ethGasLimit, ethGasPrice, ethNonce, safeNonce, safeTxGas } = values ?? {}\n\n  const ethGasLimitValidation = minValue(0, true)(ethGasLimit)\n\n  const ethGasPriceValidation = minValue(0, true)(ethGasPrice)\n\n  const ethNonceValidation = minValue(0, true)(ethNonce)\n\n  const safeNonceValidation = minValue(0, true)(safeNonce)\n\n  const safeTxGasValidation = minValue(0, true)(safeTxGas)\n\n  return {\n    ethGasLimit: ethGasLimitValidation,\n    ethGasPrice: ethGasPriceValidation,\n    ethNonce: ethNonceValidation,\n    safeNonce: safeNonceValidation,\n    safeTxGas: safeTxGasValidation,\n  }\n}\n\nexport const EditTxParametersForm = ({\n  onClose,\n  txParameters,\n  parametersStatus = 'ENABLED',\n  isExecution,\n}: Props): ReactElement => {\n  const classes = useStyles()\n  const { safeNonce, safeTxGas, ethNonce, ethGasLimit, ethGasPrice } = txParameters\n\n  const onSubmit = (values: TxParameters) => {\n    onClose(values)\n  }\n\n  const onCloseFormHandler = () => {\n    onClose()\n  }\n\n  return (\n    <>\n      {/* Header */}\n      <Row align=\"center\" className={classes.heading} grow data-testid=\"send-funds-review-step\">\n        <Title size=\"sm\" withoutMargin>\n          Advanced options\n        </Title>\n        <IconButton disableRipple onClick={onCloseFormHandler}>\n          <Close className={classes.closeIcon} />\n        </IconButton>\n      </Row>\n\n      <StyledDivider />\n\n      <Block className={classes.container}>\n        <GnoForm\n          initialValues={{\n            safeNonce: safeNonce || 0,\n            safeTxGas: safeTxGas || '',\n            ethNonce: ethNonce || '',\n            ethGasLimit: ethGasLimit || '',\n            ethGasPrice: ethGasPrice || '',\n          }}\n          onSubmit={onSubmit}\n          validation={formValidation}\n        >\n          {() => (\n            <>\n              <StyledText size=\"xl\" strong>\n                Safe transaction\n              </StyledText>\n\n              <SafeOptions>\n                <Field\n                  name=\"safeNonce\"\n                  defaultValue={safeNonce}\n                  placeholder=\"Safe nonce\"\n                  text=\"Safe nonce\"\n                  type=\"number\"\n                  min=\"0\"\n                  component={TextField}\n                  disabled={!areSafeParamsEnabled(parametersStatus)}\n                />\n                <Field\n                  name=\"safeTxGas\"\n                  defaultValue={safeTxGas}\n                  placeholder=\"SafeTxGas\"\n                  text=\"SafeTxGas\"\n                  type=\"number\"\n                  min=\"0\"\n                  component={TextField}\n                  disabled={!areSafeParamsEnabled(parametersStatus)}\n                />\n              </SafeOptions>\n\n              {areEthereumParamsVisible(parametersStatus) && (\n                <>\n                  <StyledTextMt size=\"xl\" strong>\n                    {ethereumTxParametersTitle(isExecution)}\n                  </StyledTextMt>\n\n                  <EthereumOptions>\n                    <Field\n                      name=\"ethNonce\"\n                      defaultValue={ethNonce}\n                      placeholder=\"Nonce\"\n                      text=\"Nonce\"\n                      type=\"number\"\n                      component={TextField}\n                      disabled={!areEthereumParamsVisible(parametersStatus)}\n                    />\n                    <Field\n                      name=\"ethGasLimit\"\n                      defaultValue={ethGasLimit}\n                      placeholder=\"Gas limit\"\n                      text=\"Gas limit\"\n                      type=\"number\"\n                      component={TextField}\n                      disabled={parametersStatus === 'CANCEL_TRANSACTION'}\n                    />\n                    <Field\n                      name=\"ethGasPrice\"\n                      defaultValue={ethGasPrice}\n                      type=\"number\"\n                      placeholder=\"Gas price (GWEI)\"\n                      text=\"Gas price (GWEI)\"\n                      component={TextField}\n                      disabled={!areEthereumParamsVisible(parametersStatus)}\n                    />\n                  </EthereumOptions>\n\n                  <StyledLink\n                    href=\"https://help.gnosis-safe.io/en/articles/4738445-configure-advanced-transaction-parameters-manually\"\n                    target=\"_blank\"\n                  >\n                    <Text size=\"xl\" color=\"primary\">\n                      How can I configure these parameters manually?\n                    </Text>\n                    <Icon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n                  </StyledLink>\n                </>\n              )}\n\n              <StyledDividerFooter />\n\n              {/* Footer */}\n              <Row align=\"center\" className={classes.buttonRow}>\n                <Modal.Footer.Buttons\n                  cancelButtonProps={{ onClick: onCloseFormHandler, text: 'Back' }}\n                  confirmButtonProps={{\n                    type: 'submit',\n                    text: 'Confirm',\n                    testId: 'submit-tx-btn',\n                  }}\n                />\n              </Row>\n            </>\n          )}\n        </GnoForm>\n      </Block>\n    </>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { TxParameters, useTransactionParameters } from 'src/routes/safe/container/hooks/useTransactionParameters'\nimport { EditTxParametersForm } from 'src/routes/safe/components/Transactions/helpers/EditTxParametersForm'\nimport { ParametersStatus } from './utils'\nimport { useSelector } from 'react-redux'\n\nimport { currentSafeThreshold } from 'src/logic/safe/store/selectors'\n\ntype Props = {\n  children: (txParameters: TxParameters, toggleStatus: (txParameters?: TxParameters) => void) => any\n  isOffChainSignature: boolean\n  isExecution: boolean\n  parametersStatus?: ParametersStatus\n  ethGasLimit?: TxParameters['ethGasLimit']\n  ethGasPrice?: TxParameters['ethGasPrice']\n  safeNonce?: TxParameters['safeNonce']\n  safeTxGas?: TxParameters['safeTxGas']\n  closeEditModalCallback?: (txParameters: TxParameters) => void\n}\n\nexport const EditableTxParameters = ({\n  children,\n  isOffChainSignature,\n  isExecution,\n  parametersStatus,\n  ethGasLimit,\n  ethGasPrice,\n  safeNonce,\n  safeTxGas,\n  closeEditModalCallback,\n}: Props): React.ReactElement => {\n  const [isEditMode, toggleEditMode] = useState(false)\n  const [useManualValues, setUseManualValues] = useState(false)\n  const threshold = useSelector(currentSafeThreshold) || 1\n  const defaultParameterStatus = isOffChainSignature && threshold > 1 ? 'ETH_HIDDEN' : 'ENABLED'\n  const txParameters = useTransactionParameters({\n    parameterStatus: parametersStatus || defaultParameterStatus,\n    initialEthGasLimit: ethGasLimit,\n    initialEthGasPrice: ethGasPrice,\n    initialSafeNonce: safeNonce,\n    initialSafeTxGas: safeTxGas,\n  })\n  const { setEthGasPrice, setEthGasLimit, setSafeNonce, setSafeTxGas, setEthNonce } = txParameters\n\n  // Update TxParameters\n  useEffect(() => {\n    if (!useManualValues) {\n      setEthGasLimit(ethGasLimit)\n      setEthGasPrice(ethGasPrice)\n      setSafeTxGas(safeTxGas)\n    }\n  }, [ethGasLimit, setEthGasLimit, ethGasPrice, setEthGasPrice, useManualValues, safeTxGas, setSafeTxGas])\n\n  const toggleStatus = () => {\n    toggleEditMode((prev) => !prev)\n  }\n\n  const closeEditFormHandler = (txParameters?: TxParameters) => {\n    if (txParameters) {\n      setUseManualValues(true)\n      setSafeNonce(txParameters.safeNonce)\n      setSafeTxGas(txParameters.safeTxGas)\n      setEthGasLimit(txParameters.ethGasLimit)\n      setEthGasPrice(txParameters.ethGasPrice)\n      setEthNonce(txParameters.ethNonce)\n      closeEditModalCallback && closeEditModalCallback(txParameters)\n    }\n    toggleStatus()\n  }\n\n  return isEditMode ? (\n    <EditTxParametersForm\n      isExecution={isExecution}\n      txParameters={txParameters}\n      onClose={closeEditFormHandler}\n      parametersStatus={parametersStatus ? parametersStatus : defaultParameterStatus}\n    />\n  ) : (\n    children(txParameters, toggleStatus)\n  )\n}\n","import { createStyles, makeStyles } from '@material-ui/core'\nimport { sm } from 'src/theme/variables'\nimport { EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\nimport Row from 'src/components/layout/Row'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Img from 'src/components/layout/Img'\nimport InfoIcon from 'src/assets/icons/info_red.svg'\nimport React from 'react'\nimport { useSelector } from 'react-redux'\nimport { currentSafeThreshold } from 'src/logic/safe/store/selectors'\n\nconst styles = createStyles({\n  executionWarningRow: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  warningIcon: {\n    marginRight: sm,\n  },\n})\n\nconst useStyles = makeStyles(styles)\n\ntype TransactionFailTextProps = {\n  txEstimationExecutionStatus: EstimationStatus\n  isExecution: boolean\n}\n\nexport const TransactionFailText = ({\n  txEstimationExecutionStatus,\n  isExecution,\n}: TransactionFailTextProps): React.ReactElement | null => {\n  const classes = useStyles()\n  const threshold = useSelector(currentSafeThreshold)\n\n  if (txEstimationExecutionStatus !== EstimationStatus.FAILURE) {\n    return null\n  }\n\n  let errorMessage = 'To save gas costs, avoid creating the transaction.'\n  if (isExecution) {\n    errorMessage =\n      threshold && threshold > 1\n        ? `To save gas costs, reject this transaction`\n        : `To save gas costs, avoid executing the transaction.`\n  }\n\n  return (\n    <Row align=\"center\">\n      <Paragraph color=\"error\" className={classes.executionWarningRow}>\n        <Img alt=\"Info Tooltip\" height={16} src={InfoIcon} className={classes.warningIcon} />\n        This transaction will most likely fail. {errorMessage}\n      </Paragraph>\n    </Row>\n  )\n}\n","import React from 'react'\nimport { EstimationStatus } from 'src/logic/hooks/useEstimateTransactionGas'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport { getNetworkInfo } from 'src/config'\nimport { TransactionFailText } from 'src/components/TransactionFailText'\nimport { Text } from '@gnosis.pm/safe-react-components'\n\ntype TransactionFailTextProps = {\n  txEstimationExecutionStatus: EstimationStatus\n  gasCostFormatted: string\n  isExecution: boolean\n  isCreation: boolean\n  isOffChainSignature: boolean\n}\nconst { nativeCoin } = getNetworkInfo()\n\nexport const TransactionFees = ({\n  gasCostFormatted,\n  isExecution,\n  isCreation,\n  isOffChainSignature,\n  txEstimationExecutionStatus,\n}: TransactionFailTextProps): React.ReactElement | null => {\n  let transactionAction\n  if (txEstimationExecutionStatus === EstimationStatus.LOADING) {\n    return null\n  }\n  if (isCreation) {\n    transactionAction = 'create'\n  } else if (isExecution) {\n    transactionAction = 'execute'\n  } else {\n    transactionAction = 'approve'\n  }\n\n  return (\n    <>\n      <Paragraph size=\"lg\" align=\"center\">\n        You&apos;re about to {transactionAction} a transaction and will have to confirm it with your currently connected\n        wallet.{' '}\n        {!isOffChainSignature && (\n          <>\n            Make sure you have{' '}\n            <Text size=\"lg\" as=\"span\" color=\"text\" strong>\n              {gasCostFormatted}\n            </Text>{' '}\n            (fee price) {nativeCoin.name} in this wallet to fund this confirmation.\n          </>\n        )}\n      </Paragraph>\n      <TransactionFailText txEstimationExecutionStatus={txEstimationExecutionStatus} isExecution={isExecution} />\n    </>\n  )\n}\n","import { Dispatch, SetStateAction, useEffect, useState } from 'react'\n\nimport { EstimationStatus } from './useEstimateTransactionGas'\nimport { ButtonStatus } from 'src/components/Modal'\n\nexport const useEstimationStatus = (\n  txEstimationStatus?: EstimationStatus,\n): [buttonStatus: ButtonStatus, setButtonStatus: Dispatch<SetStateAction<ButtonStatus>>] => {\n  const [buttonStatus, setButtonStatus] = useState<ButtonStatus>(ButtonStatus.DISABLED)\n\n  useEffect(() => {\n    let mounted = true\n\n    if (mounted) {\n      switch (txEstimationStatus) {\n        case EstimationStatus.LOADING:\n          setButtonStatus(ButtonStatus.LOADING)\n          break\n        default:\n          setButtonStatus(ButtonStatus.READY)\n          break\n      }\n    }\n\n    return () => {\n      mounted = false\n    }\n  }, [txEstimationStatus])\n\n  return [buttonStatus, setButtonStatus]\n}\n","export default __webpack_public_path__ + \"static/media/info_red.2d444d88.svg\";","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { getUserNonce } from 'src/logic/wallets/ethTransactions'\nimport { userAccountSelector } from 'src/logic/wallets/store/selectors'\nimport { getLastTx, getNewTxNonce } from 'src/logic/safe/store/actions/utils'\nimport { getGnosisSafeInstanceAt } from 'src/logic/contracts/safeContracts'\nimport { currentSafeCurrentVersion, safeAddressFromUrl } from 'src/logic/safe/store/selectors'\nimport { web3ReadOnly as web3 } from 'src/logic/wallets/getWeb3'\nimport { ParametersStatus } from 'src/routes/safe/components/Transactions/helpers/utils'\nimport { sameString } from 'src/utils/strings'\n\nexport type TxParameters = {\n  safeNonce: string | undefined\n  setSafeNonce: (safeNonce: string | undefined) => void\n  safeTxGas: string | undefined\n  setSafeTxGas: (gas: string | undefined) => void\n  ethNonce: string | undefined\n  setEthNonce: (ethNonce: string | undefined) => void\n  ethGasLimit: string | undefined\n  setEthGasLimit: (ethGasLimit: string | undefined) => void\n  ethGasPrice: string | undefined\n  setEthGasPrice: (ethGasPrice: string | undefined) => void\n  ethGasPriceInGWei: string | undefined\n}\n\ntype Props = {\n  parameterStatus?: ParametersStatus\n  initialSafeNonce?: string\n  initialSafeTxGas?: string\n  initialEthGasLimit?: string\n  initialEthGasPrice?: string\n}\n\n/**\n * This hooks is used to store tx parameter\n * It needs to be initialized calling setGasEstimation.\n */\nexport const useTransactionParameters = (props?: Props): TxParameters => {\n  const isCancelTransaction = sameString(props?.parameterStatus || 'ENABLED', 'CANCEL_TRANSACTION')\n  const connectedWalletAddress = useSelector(userAccountSelector)\n  const safeAddress = useSelector(safeAddressFromUrl)\n  const safeVersion = useSelector(currentSafeCurrentVersion) as string\n\n  // Safe Params\n  const [safeNonce, setSafeNonce] = useState<string | undefined>(props?.initialSafeNonce)\n  // SafeTxGas: for a new Tx call requiredTxGas, for an existing tx get it from the backend.\n  const [safeTxGas, setSafeTxGas] = useState<string | undefined>(isCancelTransaction ? '0' : props?.initialSafeTxGas)\n\n  // ETH Params\n  const [ethNonce, setEthNonce] = useState<string | undefined>() // we delegate it to the wallet\n  const [ethGasLimit, setEthGasLimit] = useState<string | undefined>(props?.initialEthGasLimit) // call execTx until it returns a number > 0\n  const [ethGasPrice, setEthGasPrice] = useState<string | undefined>(props?.initialEthGasPrice) // get fast gas price\n  const [ethGasPriceInGWei, setEthGasPriceInGWei] = useState<string | undefined>() // get fast gas price\n\n  // Get nonce for connected wallet\n  useEffect(() => {\n    const getNonce = async () => {\n      const res = await getUserNonce(connectedWalletAddress)\n      setEthNonce(res.toString())\n    }\n\n    if (connectedWalletAddress) {\n      getNonce()\n    }\n  }, [connectedWalletAddress])\n\n  // Get ETH gas price\n  useEffect(() => {\n    if (!ethGasPrice) {\n      setEthGasPriceInGWei(undefined)\n      return\n    }\n    if (isCancelTransaction) {\n      setEthGasPrice('0')\n      return\n    }\n    setEthGasPriceInGWei(web3.utils.toWei(ethGasPrice, 'Gwei'))\n  }, [ethGasPrice, isCancelTransaction])\n\n  // Calc safe nonce\n  useEffect(() => {\n    const getSafeNonce = async () => {\n      if (safeAddress) {\n        const safeInstance = getGnosisSafeInstanceAt(safeAddress, safeVersion)\n        const lastTx = await getLastTx(safeAddress)\n        const nonce = await getNewTxNonce(lastTx, safeInstance)\n        setSafeNonce(nonce)\n      }\n    }\n\n    if (safeNonce === undefined) {\n      getSafeNonce()\n    }\n  }, [safeAddress, safeVersion, safeNonce])\n\n  return {\n    safeNonce,\n    setSafeNonce,\n    safeTxGas,\n    setSafeTxGas,\n    ethNonce,\n    setEthNonce,\n    ethGasLimit,\n    setEthGasLimit,\n    ethGasPrice,\n    setEthGasPrice,\n    ethGasPriceInGWei,\n  }\n}\n","export type ParametersStatus = 'ENABLED' | 'DISABLED' | 'SAFE_DISABLED' | 'ETH_HIDDEN' | 'CANCEL_TRANSACTION'\n\nexport const areEthereumParamsVisible = (parametersStatus: ParametersStatus): boolean => {\n  return (\n    parametersStatus === 'ENABLED' || (parametersStatus !== 'ETH_HIDDEN' && parametersStatus !== 'CANCEL_TRANSACTION')\n  )\n}\n\nexport const areSafeParamsEnabled = (parametersStatus: ParametersStatus): boolean => {\n  return (\n    parametersStatus === 'ENABLED' ||\n    (parametersStatus !== 'SAFE_DISABLED' && parametersStatus !== 'CANCEL_TRANSACTION')\n  )\n}\n\nexport const ethereumTxParametersTitle = (isExecution: boolean): string => {\n  return `Owner transaction ${isExecution ? '(Execution)' : '(On-chain approval)'}`\n}\n"],"sourceRoot":""}