{"version":3,"sources":["components/forms/Field/index.tsx","components/forms/TextField/index.tsx","components/forms/GnoForm/index.tsx","components/ScanQRModal/style.ts","components/ScanQRModal/index.tsx","assets/icons/qrcode.svg","components/ScanQRModal/ScanQRWrapper/index.tsx","components/Table/TableHead.tsx","components/Table/sorting.ts","components/Table/index.tsx","components/forms/AddressInput/index.tsx","routes/safe/components/AddressBook/style.ts","routes/safe/components/AddressBook/CreateEditEntryModal/style.ts","routes/safe/components/AddressBook/CreateEditEntryModal/index.tsx","routes/safe/components/AddressBook/HelpInfo/index.tsx","routes/safe/components/AddressBook/ExportEntriesModal/assets/success.svg","routes/safe/components/AddressBook/ExportEntriesModal/assets/error.svg","routes/safe/components/AddressBook/ExportEntriesModal/assets/wait.svg","routes/safe/components/AddressBook/ExportEntriesModal/index.tsx","routes/safe/components/AddressBook/DeleteEntryModal/index.tsx","routes/safe/components/AddressBook/columns.ts","routes/safe/components/AddressBook/utils.ts","routes/safe/components/AddressBook/ImportEntriesModal/index.tsx","routes/safe/components/AddressBook/index.tsx"],"names":["GnoField","props","overflowStyle","overflow","width","useStyles","makeStyles","createStyles","root","paddingTop","lg","paddingBottom","lineHeight","TextField","input","name","onChange","value","restInput","inputAdornment","meta","multiline","rows","testId","text","rest","classes","helperText","undefined","showError","touched","pristine","valid","hasError","error","modifiedSinceLastSubmit","submitError","errorMessage","isInactiveAndPristineOrUntouched","active","isInvalidAndUntouched","disableUnderline","inputRoot","statusClasses","inputProps","autoComplete","inputRootProps","className","InputProps","style","stylesBasedOn","padding","flexDirection","flex","GnoForm","children","decorators","formMutators","initialValues","onSubmit","subscription","validation","mutators","render","handleSubmit","data-testid","submitting","validating","form","validate","styles","heading","justifyContent","maxHeight","boxSizing","loaderContainer","height","close","color","secondaryText","detailsContainer","backgroundColor","background","buttonRow","button","marginLeft","sm","ScanQRModal","isOpen","onClose","onScan","useState","fileUploadModalOpen","setFileUploadModalOpen","setError","cameraBlocked","setCameraBlocked","scannerRef","React","openImageDialog","current","useEffect","onFileScannedResolve","successData","console","Modal","description","handleClose","open","title","Row","align","grow","Paragraph","noMargin","size","IconButton","disableRipple","onClick","Hairline","Col","layout","middle","Block","margin","legacyMode","onError","err","data","ref","facingMode","Button","minWidth","variant","qrCodeBtn","cursor","ScanQRWrapper","handleScan","qrModalOpen","setQrModalOpen","closeQrModal","alt","role","src","QRIcon","cellWidth","maxWidth","GnoTableHead","changeSort","property","orderAttr","onSort","this","columns","order","orderBy","map","column","key","id","disablePadding","sortDirection","static","label","direction","desc","a","b","orderProp","format","borderTopRightRadius","borderTopLeftRadius","boxShadow","selectRoot","xxl","white","paginationRoot","marginBottom","xl","borderBottomRightRadius","borderBottomLeftRadius","loader","backProps","nextProps","GnoTable","newOrderBy","state","defaultOrder","newOrder","setState","fixed","getEmptyStyle","display","alignItems","handleChangePage","e","page","handleChangeRowsPerPage","rowsPerPage","Number","target","defaultOrderBy","find","defaultFixed","defaultRowsPerPage","disableLoadingOnEmptyTable","disablePagination","noBorder","orderByParam","orderParam","displayRows","fixedParam","paginationClasses","columnSort","sortedData","dataArray","cmp","fixedElems","filter","elem","List","stabilizedThis","el","index","sortedElems","sort","concat","stableSort","getSorting","formatTypeSort","slice","isEmpty","Table","aria-labelledby","TableHead","TableBody","TablePagination","backIconButtonProps","component","count","nextIconButtonProps","onChangePage","onChangeRowsPerPage","rowsPerPageOptions","defaultProps","withStyles","AddressInput","placeholder","fieldMutator","validators","defaultValue","disabled","type","spellCheck","composeValidators","required","mustBeEthereumAddress","address","trimSpaces","isValidEnsName","isValidCryptoDomainName","getAddressFromDomain","resolverAddr","formattedAddress","checksumAddress","logError","Errors","_101","message","formContainer","minHeight","annotation","paddingLeft","hide","visibility","actions","gap","md","noBorderBottom","borderBottom","controlsRow","borderRadius","editEntryButton","editEntryButtonNonOwner","removeEntryButton","removeEntryButtonDisabled","removeEntryButtonNonOwner","leftIcon","marginRight","iconSmall","fontSize","manage","container","CREATE_ENTRY_INPUT_NAME_ID","CREATE_ENTRY_INPUT_ADDRESS_ID","SAVE_NEW_ENTRY_BTN_ID","setOwnerAddress","args","utils","changeValue","CreateEditEntryModal","editEntryModalHandler","entryToEdit","newEntryModalHandler","entry","isNew","storedAddresses","useSelector","addressBookAddresses","isUniqueAddress","uniqueAddress","Header","Title","Body","withoutPadding","values","formState","scannedAddress","startsWith","replace","xs","Field","validAddressBookName","center","Footer","Buttons","cancelButtonProps","confirmButtonProps","StyledIcon","styled","Icon","HelpInfo","href","rel","as","ImageContainer","InfoContainer","BodyImage","div","StyledLoader","Loader","ExportEntriesModal","dispatch","useDispatch","addressBook","addressBookState","loading","setLoading","csvData","setCsvData","doRetry","setDoRetry","date","Date","jsonToCSV","handleCsvData","withoutMargin","Img","ErrorSvg","LoadingSvg","SuccessSvg","strong","length","withoutBorder","bom","filename","setTimeout","notification","getNotificationsFromTxType","TX_NOTIFICATION_TYPES","ADDRESS_BOOK_EXPORT_ENTRIES","action","afterExecution","afterExecutionError","noMoreConfirmationsNeeded","enqueueSnackbar","enhanceSnackbarForAction","DeleteEntryModal","deleteEntryModalHandler","entryToDelete","AB_NAME_ID","AB_ADDRESS_ID","IMPORT_SUPPORTED_FORMATS","CSV_EXTENSION_REGEX","ImportContainer","theme","colors","ImportEntriesModal","importEntryModalHandler","csvLoaded","setCsvLoaded","importError","setImportError","entryList","setEntryList","onDrop","parseResults","file","slicedData","fileError","includes","test","toLowerCase","validateFile","dataError","chainId","trim","lowerCaseAddress","isValidAddress","chainIdNum","parseInt","isNaN","ETHEREUM_NETWORK","validateCsvData","formatedList","addRemoveButton","onRemoveFile","dropArea","borderColor","dropAreaActive","dropFile","fileSizeInfo","position","left","top","fileNameInfo","progressBar","removeButton","StyledButton","getNetworkId","initialEntryState","AddressBookTable","nameColumn","custom","addressColumn","actionsColumn","generateColumns","autoColumns","safesList","safesAsList","entryAddressToEditOrCreateNew","addressBookFromQueryParams","currentNetworkAddressBook","granted","grantedSelector","selectedEntry","setSelectedEntry","editCreateEntryModalOpen","setEditCreateEntryModalOpen","importEntryModalOpen","setImportEntryModalOpen","deleteEntryModalOpen","setDeleteEntryModalOpen","exportEntriesModalOpen","setExportEntriesModalOpen","sendFundsModalOpen","setSendFundsModalOpen","trackEvent","useAnalytics","category","SAFE_NAVIGATION_EVENT","oldEntryIndex","findIndex","sameAddress","start","iconType","counter","toString","end","iconSize","textSize","TableContainer","row","userOwner","isUserAnOwnerOfAnySafe","hideBorderBottom","TableRow","cn","tabIndex","TableCell","justify","hash","showCopyBtn","showAvatar","explorerUrl","getExplorerInfo","ButtonHelper","isOwnerAddress","tooltip","addressBookAddOrUpdate","makeAddressBookEntry","addressBookRemove","addressList","addressBookImport","SendModal","activeScreenType","recipientAddress","recipientName"],"mappings":"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","file":"static/js/49.753a3e37.chunk.js","sourcesContent":["import React from 'react'\nimport { Field } from 'react-final-form'\n\n// $FlowFixMe\nconst GnoField = ({ ...props }: any) => <Field {...props} />\n\nexport default GnoField\n","import MuiTextField from '@material-ui/core/TextField'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport React from 'react'\n\nimport { lg } from 'src/theme/variables'\n\n// Neded for solving a fix in Windows browsers\nconst overflowStyle = {\n  overflow: 'hidden',\n  width: '100%',\n}\n\nconst styles = () =>\n  createStyles({\n    root: {\n      paddingTop: lg,\n      paddingBottom: '12px',\n      lineHeight: 0,\n    },\n  })\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  input: {\n    name: string\n    onChange?: () => void\n    value: string\n    placeholder: string\n    type: string\n  }\n  meta: {\n    touched?: boolean\n    pristine?: boolean\n    valid?: boolean\n    error?: string\n    modifiedSinceLastSubmit?: boolean\n    submitError?: boolean\n    active?: boolean\n  }\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\n  multiline: boolean\n  rows?: string\n  testId: string\n  text: string\n  disabled?: boolean\n  rowsMax?: number\n  className?: string\n}\n\nconst TextField = (props: Props): React.ReactElement => {\n  const {\n    input: { name, onChange, value, ...restInput },\n    inputAdornment,\n    meta,\n    multiline,\n    rows,\n    testId,\n    text,\n    ...rest\n  } = props\n  const classes = useStyles()\n  const helperText = value ? text : undefined\n  const showError = (meta.touched || !meta.pristine) && !meta.valid\n  const hasError = !!meta.error || (!meta.modifiedSinceLastSubmit && !!meta.submitError)\n  const errorMessage = meta.error || meta.submitError\n  const isInactiveAndPristineOrUntouched = !meta.active && (meta.pristine || !meta.touched)\n  const isInvalidAndUntouched = typeof meta.error === 'undefined' ? true : !meta.touched\n\n  const disableUnderline = isInactiveAndPristineOrUntouched && isInvalidAndUntouched\n\n  const inputRoot = helperText ? classes.root : ''\n  const statusClasses = meta.valid ? 'isValid' : hasError && showError ? 'isInvalid' : ''\n  const inputProps = {\n    ...restInput,\n    autoComplete: 'off',\n    'data-testid': testId,\n  }\n  const inputRootProps = {\n    ...inputAdornment,\n    className: `${inputRoot} ${statusClasses}`,\n    disableUnderline: disableUnderline,\n  }\n\n  return (\n    <MuiTextField\n      error={hasError && showError}\n      helperText={hasError && showError ? errorMessage : helperText || ' '}\n      inputProps={inputProps} // blank in order to force to have helper text\n      InputProps={inputRootProps}\n      multiline={multiline}\n      name={name}\n      onChange={onChange}\n      rows={rows}\n      style={overflowStyle}\n      value={value}\n      {...rest}\n    />\n  )\n}\n\nexport default TextField\n","import * as React from 'react'\nimport { Form } from 'react-final-form'\n\nconst stylesBasedOn = (padding) => ({\n  padding: `0 ${padding}%`,\n  flexDirection: 'column',\n  flex: '1 0 auto',\n})\n\nconst GnoForm = ({\n  children,\n  decorators,\n  formMutators,\n  initialValues,\n  onSubmit,\n  padding = 0,\n  subscription,\n  testId = '',\n  validation,\n}: any) => (\n  <Form\n    decorators={decorators}\n    initialValues={initialValues}\n    mutators={formMutators}\n    onSubmit={onSubmit}\n    render={({ handleSubmit, ...rest }) => (\n      <form data-testid={testId} onSubmit={handleSubmit} style={stylesBasedOn(padding) as any}>\n        {children(rest.submitting, rest.validating, rest, rest.form.mutators)}\n      </form>\n    )}\n    subscription={subscription}\n    validate={validation}\n  />\n)\n\nexport default GnoForm\n","import { background, lg, secondaryText, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  heading: {\n    padding: lg,\n    justifyContent: 'space-between',\n    maxHeight: '75px',\n    boxSizing: 'border-box',\n  },\n  loaderContainer: {\n    width: '100%',\n    height: '100%',\n  },\n  close: {\n    height: '25px',\n    width: '25px',\n    color: secondaryText,\n  },\n  detailsContainer: {\n    backgroundColor: background,\n    maxHeight: '450px',\n  },\n  buttonRow: {\n    height: '84px',\n    justifyContent: 'center',\n  },\n  button: {\n    '&:last-child': {\n      marginLeft: sm,\n    },\n  },\n})\n","import IconButton from '@material-ui/core/IconButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Close from '@material-ui/icons/Close'\nimport * as React from 'react'\nimport QrReader from 'react-qr-reader'\n\nimport { styles } from './style'\n\nimport Modal from 'src/components/Modal'\nimport Block from 'src/components/layout/Block'\nimport Button from 'src/components/layout/Button'\nimport Col from 'src/components/layout/Col'\nimport Hairline from 'src/components/layout/Hairline'\nimport Paragraph from 'src/components/layout/Paragraph'\nimport Row from 'src/components/layout/Row'\nimport { useEffect, useState } from 'react'\n\nconst useStyles = makeStyles(styles)\n\ntype Props = {\n  isOpen: boolean\n  onClose: () => void\n  onScan: (value: string) => void\n}\n\nexport const ScanQRModal = ({ isOpen, onClose, onScan }: Props): React.ReactElement => {\n  const classes = useStyles()\n  const [fileUploadModalOpen, setFileUploadModalOpen] = useState<boolean>(false)\n  const [error, setError] = useState<string | null>(null)\n  const [cameraBlocked, setCameraBlocked] = useState<boolean>(false)\n  const scannerRef: any = React.createRef()\n  const openImageDialog = React.useCallback(() => {\n    scannerRef.current.openImageDialog()\n  }, [scannerRef])\n\n  useEffect(() => {\n    if (!fileUploadModalOpen && cameraBlocked && !error) {\n      setFileUploadModalOpen(true)\n      openImageDialog()\n    }\n  }, [cameraBlocked, openImageDialog, fileUploadModalOpen, setFileUploadModalOpen, error])\n\n  const onFileScannedResolve = (error: Error | null, successData: string | null) => {\n    if (error) {\n      console.error('QR code error', error)\n\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDismissedError') {\n        setCameraBlocked(true)\n        setFileUploadModalOpen(false)\n      } else {\n        setError('The QR could not be read')\n      }\n      return\n    }\n\n    if (successData) {\n      onScan(successData)\n    } else if (cameraBlocked) {\n      setError('The QR could not be read')\n    }\n  }\n\n  return (\n    <Modal description=\"Receive Tokens Form\" handleClose={onClose} open={isOpen} title=\"Receive Tokens\">\n      <Row align=\"center\" className={classes.heading} grow>\n        <Paragraph noMargin size=\"xl\">\n          Scan QR\n        </Paragraph>\n        <IconButton disableRipple onClick={onClose}>\n          <Close className={classes.close} />\n        </IconButton>\n      </Row>\n      <Hairline />\n      <Col className={classes.detailsContainer} layout=\"column\" middle=\"xs\">\n        {error && (\n          <Block padding=\"md\" margin=\"md\">\n            {error}\n          </Block>\n        )}\n        <QrReader\n          legacyMode={cameraBlocked}\n          onError={(err: Error) => onFileScannedResolve(err, null)}\n          onScan={(data: string) => onFileScannedResolve(null, data)}\n          ref={scannerRef}\n          style={{ width: '400px', height: '400px' }}\n          facingMode=\"user\"\n        />\n      </Col>\n      <Hairline />\n      <Row align=\"center\" className={classes.buttonRow}>\n        <Button className={classes.button} color=\"secondary\" minWidth={154} onClick={onClose}>\n          Close\n        </Button>\n        <Button\n          className={classes.button}\n          color=\"primary\"\n          minWidth={154}\n          onClick={() => {\n            setCameraBlocked(true)\n            setError(null)\n            setFileUploadModalOpen(false)\n          }}\n          variant=\"contained\"\n        >\n          Upload an image\n        </Button>\n      </Row>\n    </Modal>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/qrcode.fec1b6d8.svg\";","import { makeStyles } from '@material-ui/core/styles'\nimport React, { ReactElement, useState } from 'react'\n\nimport QRIcon from 'src/assets/icons/qrcode.svg'\nimport { ScanQRModal } from 'src/components/ScanQRModal'\nimport Img from 'src/components/layout/Img'\n\nconst useStyles = makeStyles({\n  qrCodeBtn: {\n    cursor: 'pointer',\n  },\n})\n\ntype Props = {\n  handleScan: (dataResult: string, closeQrModal: () => void) => void\n}\n\nexport const ScanQRWrapper = ({ handleScan }: Props): ReactElement => {\n  const classes = useStyles()\n  const [qrModalOpen, setQrModalOpen] = useState(false)\n\n  const openQrModal = () => {\n    setQrModalOpen(true)\n  }\n\n  const closeQrModal = () => {\n    setQrModalOpen(false)\n  }\n\n  const onScanFinished = (value: string) => {\n    handleScan(value, closeQrModal)\n  }\n\n  return (\n    <>\n      <Img\n        alt=\"Scan QR\"\n        className={classes.qrCodeBtn}\n        height={20}\n        onClick={() => openQrModal()}\n        role=\"button\"\n        src={QRIcon}\n        testId=\"qr-icon\"\n      />\n      {qrModalOpen && <ScanQRModal isOpen={qrModalOpen} onClose={closeQrModal} onScan={onScanFinished} />}\n    </>\n  )\n}\n","import TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport * as React from 'react'\n\ninterface CellWidth {\n  maxWidth: string\n}\n\nexport const cellWidth = (width?: string | number): CellWidth | undefined => {\n  if (!width) {\n    return undefined\n  }\n\n  return {\n    maxWidth: `${width}px`,\n  }\n}\n\nclass GnoTableHead extends React.PureComponent<any> {\n  changeSort = (property, orderAttr) => () => {\n    const { onSort } = this.props\n\n    onSort(property, orderAttr)\n  }\n\n  render() {\n    const { columns, order, orderBy } = this.props\n\n    return (\n      <TableHead>\n        <TableRow>\n          {columns.map((column) => (\n            <TableCell\n              align={column.align}\n              key={column.id}\n              padding={column.disablePadding ? 'none' : 'default'}\n              sortDirection={orderBy === column.id ? order : false}\n            >\n              {column.static ? (\n                <div style={column.style}>{column.label}</div>\n              ) : (\n                <TableSortLabel\n                  active={orderBy === column.id}\n                  direction={order}\n                  onClick={this.changeSort(column.id, column.order)}\n                  style={column.style}\n                >\n                  {column.label}\n                </TableSortLabel>\n              )}\n            </TableCell>\n          ))}\n        </TableRow>\n      </TableHead>\n    )\n  }\n}\n\nexport default GnoTableHead\n","import { List } from 'immutable'\n\nexport const FIXED = 'fixed'\n\nexport const buildOrderFieldFrom = (attr: string): string => `${attr}Order`\n\nconst desc = (\n  a: string,\n  b: string,\n  orderBy: string,\n  orderProp: boolean,\n  format: (value: string | number) => string | number,\n): number => {\n  const order = orderProp ? buildOrderFieldFrom(orderBy) : orderBy\n\n  if (format(b[order]) < format(a[order])) {\n    return -1\n  }\n  if (format(b[order]) > format(a[order])) {\n    return 1\n  }\n\n  return 0\n}\n\n// eslint-disable-next-line\nexport const stableSort = (dataArray, cmp, fixed) => {\n  const fixedElems = fixed ? dataArray.filter((elem) => elem.fixed) : List([])\n  const data = fixed ? dataArray.filter((elem) => !elem[FIXED]) : dataArray\n  let stabilizedThis = data.map((el, index) => [el, index])\n\n  stabilizedThis = stabilizedThis.sort((a, b) => {\n    const order = cmp(a[0], b[0])\n\n    if (order !== 0) {\n      return order\n    }\n\n    return a[1] - b[1]\n  })\n\n  const sortedElems = stabilizedThis.map((el) => el[0])\n\n  return fixedElems.concat(sortedElems)\n}\n\nexport const getSorting = (\n  order: 'desc' | 'asc',\n  orderBy: string,\n  orderProp: boolean,\n  format: (value: string | number) => string | number = (value) => value,\n): ((a: string, b: string) => number) =>\n  order === 'desc'\n    ? (a, b) => desc(a, b, orderBy, orderProp, format)\n    : (a, b) => -desc(a, b, orderBy, orderProp, format)\n","import { Loader } from '@gnosis.pm/safe-react-components'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport { withStyles } from '@material-ui/core/styles'\nimport * as React from 'react'\n\nimport TableHead from 'src/components/Table/TableHead'\nimport { getSorting, stableSort } from 'src/components/Table/sorting'\nimport Row from 'src/components/layout/Row'\nimport { sm, xl, xxl } from 'src/theme/variables'\n\nconst styles = {\n  root: {\n    backgroundColor: 'white',\n    borderTopRightRadius: sm,\n    borderTopLeftRadius: sm,\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n  },\n  selectRoot: {\n    lineHeight: xxl,\n    backgroundColor: 'white',\n  },\n  white: {\n    backgroundColor: 'white',\n  },\n  paginationRoot: {\n    backgroundColor: 'white',\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n    marginBottom: xl,\n    borderBottomRightRadius: sm,\n    borderBottomLeftRadius: sm,\n  },\n  loader: {\n    boxShadow: '1px 2px 10px 0 rgba(212, 212, 211, 0.59)',\n  },\n}\n\nconst FIXED_EMPTY_HEIGHT = 255\n\nconst backProps = {\n  'aria-label': 'Previous Page',\n}\n\nconst nextProps = {\n  'aria-label': 'Next Page',\n}\n\nclass GnoTable extends React.Component<any, any> {\n  static defaultProps = {\n    defaultOrder: 'asc',\n    disablePagination: false,\n    defaultRowsPerPage: 5,\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      page: 0,\n      order: undefined,\n      orderBy: undefined,\n      fixed: undefined,\n      orderProp: false,\n      rowsPerPage: undefined,\n    }\n  }\n\n  componentDidMount() {\n    const { columns, defaultOrderBy } = this.props\n\n    if (defaultOrderBy && columns) {\n      const defaultOrderCol = columns.find(({ id }) => id === defaultOrderBy)\n\n      if (defaultOrderCol.order) {\n        this.setState({\n          orderProp: true,\n        })\n      }\n    }\n  }\n\n  onSort = (newOrderBy, orderProp) => {\n    const { order, orderBy } = this.state\n    const { defaultOrder } = this.props\n    let newOrder = 'desc'\n\n    // if table was previously sorted by the user\n    if (order && orderBy === newOrderBy && order === 'desc') {\n      newOrder = 'asc'\n    } else if (!order && defaultOrder === 'desc') {\n      // if it was not sorted and defaultOrder is used\n      newOrder = 'asc'\n    }\n\n    this.setState(() => ({\n      order: newOrder,\n      orderBy: newOrderBy,\n      orderProp,\n      fixed: false,\n    }))\n  }\n\n  getEmptyStyle = () => ({\n    height: `calc(100vh - ${FIXED_EMPTY_HEIGHT}px)`,\n    borderTopRightRadius: sm,\n    borderTopLeftRadius: sm,\n    backgroundColor: 'white',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  })\n\n  handleChangePage = (e, page) => {\n    this.setState({ page })\n  }\n\n  handleChangeRowsPerPage = (e) => {\n    const rowsPerPage = Number(e.target.value)\n    this.setState({ rowsPerPage })\n  }\n\n  render() {\n    const {\n      children,\n      classes,\n      columns,\n      data,\n      defaultFixed,\n      defaultOrder,\n      defaultOrderBy,\n      defaultRowsPerPage,\n      disableLoadingOnEmptyTable,\n      disablePagination,\n      label,\n      noBorder,\n      size,\n    }: any = this.props\n    const { fixed, order, orderBy, orderProp, page, rowsPerPage } = this.state\n    const orderByParam = orderBy || defaultOrderBy\n    const orderParam = order || defaultOrder\n    const displayRows = rowsPerPage || defaultRowsPerPage\n    const fixedParam = typeof fixed !== 'undefined' ? fixed : !!defaultFixed\n    const paginationClasses = {\n      selectRoot: classes.selectRoot,\n      root: !noBorder && classes.paginationRoot,\n      input: classes.white,\n    }\n    const columnSort = columns.find((column) => column.id === orderByParam)\n    let sortedData = stableSort(\n      data,\n      getSorting(orderParam, orderByParam, orderProp, columnSort?.formatTypeSort),\n      fixedParam,\n    )\n\n    if (!disablePagination) {\n      sortedData = sortedData.slice(page * displayRows, page * displayRows + displayRows)\n    }\n\n    const isEmpty = size === 0 && !disableLoadingOnEmptyTable\n\n    return (\n      <>\n        {!isEmpty && (\n          <Table aria-labelledby={label} className={noBorder ? '' : classes.root}>\n            <TableHead columns={columns} onSort={this.onSort} order={order} orderBy={orderByParam} />\n            <TableBody>{children(sortedData)}</TableBody>\n          </Table>\n        )}\n        {isEmpty && (\n          <Row className={classes.loader} style={this.getEmptyStyle()}>\n            <Loader size=\"sm\" />\n          </Row>\n        )}\n        {!disablePagination && (\n          <TablePagination\n            backIconButtonProps={backProps}\n            classes={paginationClasses}\n            component=\"div\"\n            count={size}\n            nextIconButtonProps={nextProps}\n            onChangePage={this.handleChangePage}\n            onChangeRowsPerPage={this.handleChangeRowsPerPage}\n            page={page}\n            rowsPerPage={displayRows}\n            rowsPerPageOptions={[5, 10, 25, 50, 100]}\n          />\n        )}\n      </>\n    )\n  }\n}\n\nexport default withStyles(styles as any)(GnoTable)\n","import * as React from 'react'\nimport { Field } from 'react-final-form'\nimport { OnChange } from 'react-final-form-listeners'\n\nimport TextField from 'src/components/forms/TextField'\nimport { Validator, composeValidators, mustBeEthereumAddress, required } from 'src/components/forms/validator'\nimport { trimSpaces } from 'src/utils/strings'\nimport { getAddressFromDomain } from 'src/logic/wallets/getWeb3'\nimport { isValidEnsName, isValidCryptoDomainName } from 'src/logic/wallets/ethAddresses'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { Errors, logError } from 'src/logic/exceptions/CodedException'\n\n// an idea for second field was taken from here\n// https://github.com/final-form/react-final-form-listeners/blob/master/src/OnBlur.js\n\nexport interface AddressInputProps {\n  fieldMutator: (address: string) => void\n  name?: string\n  text?: string\n  placeholder?: string\n  inputAdornment?: { endAdornment: React.ReactElement } | undefined\n  testId: string\n  validators?: Validator[]\n  defaultValue?: string\n  disabled?: boolean\n  spellCheck?: boolean\n  className?: string\n}\n\nconst AddressInput = ({\n  className = '',\n  name = 'recipientAddress',\n  text = 'Recipient*',\n  placeholder = 'Recipient*',\n  fieldMutator,\n  testId,\n  inputAdornment,\n  validators = [],\n  defaultValue,\n  disabled,\n}: AddressInputProps): React.ReactElement => (\n  <>\n    <Field\n      className={className}\n      component={TextField as any}\n      defaultValue={defaultValue}\n      disabled={disabled}\n      inputAdornment={inputAdornment}\n      name={name}\n      placeholder={placeholder}\n      testId={testId}\n      text={text}\n      type=\"text\"\n      spellCheck={false}\n      validate={composeValidators(required, mustBeEthereumAddress, ...validators)}\n    />\n    <OnChange name={name}>\n      {async (value: string) => {\n        const address = trimSpaces(value)\n        if (isValidEnsName(address) || isValidCryptoDomainName(address)) {\n          try {\n            const resolverAddr = await getAddressFromDomain(address)\n            const formattedAddress = checksumAddress(resolverAddr)\n            fieldMutator(formattedAddress)\n          } catch (err) {\n            logError(Errors._101, err.message)\n          }\n        } else {\n          fieldMutator(address)\n        }\n      }}\n    </OnChange>\n  </>\n)\n\nexport default AddressInput\n","import { lg, md, sm } from 'src/theme/variables'\nimport { createStyles } from '@material-ui/core'\n\nexport const styles = createStyles({\n  formContainer: {\n    minHeight: '250px',\n  },\n  title: {\n    padding: lg,\n    paddingBottom: 0,\n  },\n  annotation: {\n    paddingLeft: lg,\n  },\n  hide: {\n    '&:hover': {\n      backgroundColor: '#f7f5f5',\n    },\n    '&:hover $actions': {\n      visibility: 'initial',\n    },\n  },\n  actions: {\n    justifyContent: 'flex-end',\n    alignItems: 'center',\n    visibility: 'hidden',\n    minWidth: '100px',\n    gap: md,\n  },\n  noBorderBottom: {\n    '& > td': {\n      borderBottom: 'none',\n    },\n  },\n  controlsRow: {\n    backgroundColor: 'white',\n    padding: lg,\n    borderRadius: sm,\n  },\n  editEntryButton: {\n    cursor: 'pointer',\n  },\n  editEntryButtonNonOwner: {\n    cursor: 'pointer',\n  },\n  removeEntryButton: {\n    cursor: 'pointer',\n  },\n  removeEntryButtonDisabled: {\n    cursor: 'default',\n  },\n  removeEntryButtonNonOwner: {\n    cursor: 'pointer',\n  },\n  leftIcon: {\n    marginRight: sm,\n  },\n  iconSmall: {\n    fontSize: 16,\n  },\n})\n","import { createStyles, makeStyles } from '@material-ui/core/styles'\n\nimport { lg, md } from 'src/theme/variables'\n\nexport const useStyles = makeStyles(\n  createStyles({\n    heading: {\n      padding: lg,\n      justifyContent: 'space-between',\n      boxSizing: 'border-box',\n      height: '74px',\n    },\n    manage: {\n      fontSize: lg,\n    },\n    container: {\n      padding: `${md} ${lg}`,\n    },\n    close: {\n      height: '35px',\n      width: '35px',\n    },\n  }),\n)\n","import React, { ReactElement } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { useStyles } from './style'\n\nimport { Modal } from 'src/components/Modal'\nimport { ScanQRWrapper } from 'src/components/ScanQRModal/ScanQRWrapper'\nimport AddressInput from 'src/components/forms/AddressInput'\nimport Field from 'src/components/forms/Field'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport TextField from 'src/components/forms/TextField'\nimport { composeValidators, required, uniqueAddress, validAddressBookName } from 'src/components/forms/validator'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport { addressBookAddresses } from 'src/logic/addressBook/store/selectors'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { Entry } from 'src/routes/safe/components/AddressBook'\n\nexport const CREATE_ENTRY_INPUT_NAME_ID = 'create-entry-input-name'\nexport const CREATE_ENTRY_INPUT_ADDRESS_ID = 'create-entry-input-address'\nexport const SAVE_NEW_ENTRY_BTN_ID = 'save-new-entry-btn-id'\n\nconst formMutators = {\n  setOwnerAddress: (args, state, utils) => {\n    utils.changeValue(state, 'address', () => args[0])\n  },\n}\n\ntype CreateEditEntryModalProps = {\n  editEntryModalHandler: (entry: AddressBookEntry) => void\n  entryToEdit: Entry\n  isOpen: boolean\n  newEntryModalHandler: (entry: AddressBookEntry) => void\n  onClose: () => void\n}\n\nexport const CreateEditEntryModal = ({\n  editEntryModalHandler,\n  entryToEdit,\n  isOpen,\n  newEntryModalHandler,\n  onClose,\n}: CreateEditEntryModalProps): ReactElement => {\n  const classes = useStyles()\n\n  const { isNew, ...initialValues } = entryToEdit.entry\n\n  const onFormSubmitted = (values: AddressBookEntry) => {\n    if (isNew) {\n      newEntryModalHandler(values)\n    } else {\n      editEntryModalHandler(values)\n    }\n  }\n\n  const storedAddresses = useSelector(addressBookAddresses)\n  const isUniqueAddress = uniqueAddress(storedAddresses)\n\n  return (\n    <Modal\n      description={isNew ? 'Create new addressBook entry' : 'Edit addressBook entry'}\n      handleClose={onClose}\n      open={isOpen}\n      title={isNew ? 'Create new entry' : 'Edit entry'}\n    >\n      <Modal.Header onClose={onClose}>\n        <Modal.Header.Title>{isNew ? 'Create entry' : 'Edit entry'}</Modal.Header.Title>\n      </Modal.Header>\n      <Modal.Body withoutPadding>\n        <GnoForm formMutators={formMutators} onSubmit={onFormSubmitted} initialValues={initialValues}>\n          {(...args) => {\n            const formState = args[2]\n            const mutators = args[3]\n            const handleScan = (value, closeQrModal) => {\n              let scannedAddress = value\n\n              if (scannedAddress.startsWith('ethereum:')) {\n                scannedAddress = scannedAddress.replace('ethereum:', '')\n              }\n\n              mutators.setOwnerAddress(scannedAddress)\n              closeQrModal()\n            }\n            return (\n              <>\n                <Block className={classes.container}>\n                  <Row margin=\"md\">\n                    <Col xs={11}>\n                      <Field\n                        component={TextField}\n                        name=\"name\"\n                        placeholder=\"Name*\"\n                        testId={CREATE_ENTRY_INPUT_NAME_ID}\n                        text=\"Name*\"\n                        type=\"text\"\n                        validate={composeValidators(required, validAddressBookName)}\n                      />\n                    </Col>\n                  </Row>\n                  <Row margin=\"md\">\n                    <Col xs={11}>\n                      <AddressInput\n                        disabled={!isNew}\n                        fieldMutator={mutators.setOwnerAddress}\n                        name=\"address\"\n                        placeholder=\"Address*\"\n                        testId={CREATE_ENTRY_INPUT_ADDRESS_ID}\n                        text=\"Address*\"\n                        validators={[(value?: string) => (isNew ? isUniqueAddress(value) : undefined)]}\n                      />\n                    </Col>\n                    {isNew ? (\n                      <Col center=\"xs\" className={classes} middle=\"xs\" xs={1}>\n                        <ScanQRWrapper handleScan={handleScan} />\n                      </Col>\n                    ) : null}\n                  </Row>\n                </Block>\n                <Modal.Footer>\n                  <Modal.Footer.Buttons\n                    cancelButtonProps={{ onClick: onClose }}\n                    confirmButtonProps={{\n                      disabled: !formState.valid,\n                      testId: SAVE_NEW_ENTRY_BTN_ID,\n                      text: isNew ? 'Create' : 'Save',\n                    }}\n                  />\n                </Modal.Footer>\n              </>\n            )\n          }}\n        </GnoForm>\n      </Modal.Body>\n    </Modal>\n  )\n}\n","import React, { ReactElement } from 'react'\nimport styled from 'styled-components'\nimport { Text, Link, Icon } from '@gnosis.pm/safe-react-components'\n\nconst StyledIcon = styled(Icon)`\n  svg {\n    position: relative;\n    top: 4px;\n    left: 4px;\n  }\n`\n\nconst HelpInfo = (): ReactElement => (\n  <Link\n    href=\"https://help.gnosis-safe.io/en/articles/5299068-address-book-export-and-import\"\n    target=\"_blank\"\n    rel=\"noreferrer\"\n    title=\"Export & import info\"\n  >\n    <Text size=\"xl\" as=\"span\" color=\"primary\">\n      Learn about the address book import and export\n    </Text>\n    <StyledIcon size=\"sm\" type=\"externalLink\" color=\"primary\" />\n  </Link>\n)\n\nexport default HelpInfo\n","export default __webpack_public_path__ + \"static/media/success.05cfb920.svg\";","export default __webpack_public_path__ + \"static/media/error.b0f27278.svg\";","export default __webpack_public_path__ + \"static/media/wait.8fd3356d.svg\";","import React, { ReactElement, useEffect, useState } from 'react'\nimport { format } from 'date-fns'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { CSVDownloader, jsonToCSV } from 'react-papaparse'\nimport { Button, Loader, Text } from '@gnosis.pm/safe-react-components'\nimport styled from 'styled-components'\n\nimport { enhanceSnackbarForAction, getNotificationsFromTxType } from 'src/logic/notifications'\nimport enqueueSnackbar from 'src/logic/notifications/store/actions/enqueueSnackbar'\nimport { TX_NOTIFICATION_TYPES } from 'src/logic/safe/transactions'\n\nimport { addressBookState } from 'src/logic/addressBook/store/selectors'\n\nimport { lg, md, background } from 'src/theme/variables'\n\nimport { Modal } from 'src/components/Modal'\nimport Img from 'src/components/layout/Img'\nimport Row from 'src/components/layout/Row'\nimport HelpInfo from 'src/routes/safe/components/AddressBook/HelpInfo'\n\nimport SuccessSvg from './assets/success.svg'\nimport ErrorSvg from './assets/error.svg'\nimport LoadingSvg from './assets/wait.svg'\n\ntype ExportEntriesModalProps = {\n  isOpen: boolean\n  onClose: () => void\n}\n\nconst ImageContainer = styled(Row)`\n  padding: ${md} ${lg};\n  justify-content: center;\n`\n\nconst InfoContainer = styled(Row)`\n  background-color: ${background};\n  flex-direction: column;\n  justify-content: center;\n  padding: ${lg};\n  text-align: center;\n`\n\nconst BodyImage = styled.div`\n  grid-row: 1;\n`\nconst StyledLoader = styled(Loader)`\n  margin-right: 5px;\n`\n\nexport const ExportEntriesModal = ({ isOpen, onClose }: ExportEntriesModalProps): ReactElement => {\n  const dispatch = useDispatch()\n  const addressBook = useSelector(addressBookState)\n  const [loading, setLoading] = useState<boolean>(true)\n  const [error, setError] = useState<string | undefined>('')\n  const [csvData, setCsvData] = useState<string>('')\n  const [doRetry, setDoRetry] = useState<boolean>(false)\n\n  const date = format(new Date(), 'yyyy-MM-dd')\n\n  const handleClose = () => {\n    //This timeout prevents modal to be closed abruptly\n    setLoading(true)\n    setTimeout(() => {\n      if (!loading) {\n        const notification = getNotificationsFromTxType(TX_NOTIFICATION_TYPES.ADDRESS_BOOK_EXPORT_ENTRIES)\n        const action = error\n          ? notification.afterExecution.afterExecutionError\n          : notification.afterExecution.noMoreConfirmationsNeeded\n        dispatch(enqueueSnackbar(enhanceSnackbarForAction(action)))\n      }\n      onClose()\n    }, 600)\n  }\n\n  useEffect(() => {\n    const handleCsvData = () => {\n      if (!isOpen && !doRetry) return\n      setLoading(true)\n      setError('')\n      try {\n        setCsvData(jsonToCSV(addressBook))\n      } catch (e) {\n        setLoading(false)\n        setError(e.message)\n        return\n      }\n      setLoading(false)\n      setDoRetry(false)\n    }\n\n    handleCsvData()\n  }, [addressBook, isOpen, doRetry, csvData])\n\n  return (\n    <Modal description=\"Export address book\" handleClose={onClose} open={isOpen} title=\"Export address book\">\n      <Modal.Header onClose={onClose}>\n        <Modal.Header.Title withoutMargin>Export address book</Modal.Header.Title>\n      </Modal.Header>\n\n      <Modal.Body withoutPadding>\n        <ImageContainer>\n          <BodyImage>\n            <Img alt=\"Export\" height={92} src={error ? ErrorSvg : loading ? LoadingSvg : SuccessSvg} />\n          </BodyImage>\n        </ImageContainer>\n        <InfoContainer>\n          <Text color=\"primary\" as=\"p\" size=\"xl\">\n            {!error ? (\n              <Text size=\"xl\" as=\"span\">\n                You&apos;re about to export a CSV file with{' '}\n                <Text size=\"xl\" strong as=\"span\">\n                  {addressBook.length} address book entries. <br />\n                  <HelpInfo />\n                </Text>\n                .\n              </Text>\n            ) : (\n              <Text size=\"xl\" as=\"span\">\n                An error occurred while generating the address book CSV.\n              </Text>\n            )}\n          </Text>\n        </InfoContainer>\n      </Modal.Body>\n\n      <Modal.Footer withoutBorder>\n        <Button size=\"md\" variant=\"outlined\" onClick={onClose}>\n          Cancel\n        </Button>\n\n        {error ? (\n          <Button color=\"primary\" size=\"md\" disabled={loading} onClick={() => setDoRetry(true)}>\n            Retry\n          </Button>\n        ) : (\n          <CSVDownloader data={csvData} bom={true} filename={`gnosis-safe-address-book-${date}`} type=\"link\">\n            <Button color=\"primary\" size=\"md\" disabled={loading} onClick={handleClose}>\n              {loading && <StyledLoader color=\"secondaryLight\" size=\"xs\" />}\n              Download\n            </Button>\n          </CSVDownloader>\n        )}\n      </Modal.Footer>\n    </Modal>\n  )\n}\n","import { Text } from '@gnosis.pm/safe-react-components'\nimport React, { ReactElement } from 'react'\n\nimport { Modal } from 'src/components/Modal'\nimport GnoForm from 'src/components/forms/GnoForm'\nimport { Entry } from 'src/routes/safe/components/AddressBook'\n\nexport const DELETE_ENTRY_BTN_ID = 'delete-entry-btn-id'\n\ninterface DeleteEntryModalProps {\n  deleteEntryModalHandler: () => void\n  entryToDelete: Entry\n  isOpen: boolean\n  onClose: () => void\n}\n\nexport const DeleteEntryModal = ({\n  deleteEntryModalHandler,\n  entryToDelete,\n  isOpen,\n  onClose,\n}: DeleteEntryModalProps): ReactElement => {\n  const handleDeleteEntrySubmit = () => {\n    deleteEntryModalHandler()\n  }\n\n  return (\n    <Modal description=\"Delete entry\" handleClose={onClose} open={isOpen} title=\"Delete entry\">\n      <Modal.Header onClose={onClose}>\n        <Modal.Header.Title>Delete entry</Modal.Header.Title>\n      </Modal.Header>\n      <GnoForm onSubmit={handleDeleteEntrySubmit}>\n        {() => (\n          <>\n            <Modal.Body>\n              <Text size=\"xl\">\n                This action will delete{' '}\n                <Text size=\"xl\" strong as=\"span\">\n                  {entryToDelete.entry.name}\n                </Text>{' '}\n                from the address book.\n              </Text>\n            </Modal.Body>\n            <Modal.Footer>\n              <Modal.Footer.Buttons\n                cancelButtonProps={{ onClick: onClose }}\n                confirmButtonProps={{ color: 'error', testId: DELETE_ENTRY_BTN_ID, text: 'Delete' }}\n              />\n            </Modal.Footer>\n          </>\n        )}\n      </GnoForm>\n    </Modal>\n  )\n}\n","import { List } from 'immutable'\nimport { TableCellProps } from '@material-ui/core/TableCell/TableCell'\n\nexport const ADDRESS_BOOK_ROW_ID = 'address-book-row'\nexport const TX_TABLE_ADDRESS_BOOK_ID = 'idAddressBook'\nexport const AB_NAME_ID = 'name'\nexport const AB_ADDRESS_ID = 'address'\nexport const AB_ADDRESS_ACTIONS_ID = 'actions'\nexport const EDIT_ENTRY_BUTTON = 'edit-entry-btn'\nexport const REMOVE_ENTRY_BUTTON = 'remove-entry-btn'\nexport const SEND_ENTRY_BUTTON = 'send-entry-btn'\n\ntype AddressBookColumn = {\n  id: string\n  order: boolean\n  disablePadding?: boolean\n  label: string\n  width?: number\n  custom?: boolean\n  align?: TableCellProps['align']\n}\n\nexport const generateColumns = (): List<AddressBookColumn> => {\n  const nameColumn = {\n    id: AB_NAME_ID,\n    order: false,\n    disablePadding: false,\n    label: 'Name',\n    width: 150,\n    custom: false,\n    align: 'left',\n  }\n\n  const addressColumn = {\n    id: AB_ADDRESS_ID,\n    order: false,\n    disablePadding: false,\n    label: 'Address',\n    custom: false,\n    align: 'left',\n  }\n\n  const actionsColumn = {\n    id: AB_ADDRESS_ACTIONS_ID,\n    order: false,\n    disablePadding: false,\n    label: '',\n    custom: true,\n  }\n\n  return List([nameColumn, addressColumn, actionsColumn])\n}\n","import { isValidAddress } from 'src/utils/isValidAddress'\nimport { ETHEREUM_NETWORK } from 'src/config/networks/network.d'\n\nexport const WRONG_FILE_EXTENSION_ERROR = 'Only CSV files are allowed'\nexport const FILE_SIZE_TOO_BIG_ERROR = 'The size of the file is over 1 MB'\nexport const FILE_BYTES_LIMIT = 1000000\nexport const IMPORT_SUPPORTED_FORMATS = [\n  '',\n  'text/csv',\n  'application/vnd.ms-excel',\n  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n]\n\nconst CSV_EXTENSION_REGEX = /([a-zA-Z0-9\\s_\\\\.\\-:])+(.csv|.ods|.xls|.xlsx)$/\n\nexport type CsvDataType = { data: string[] }[]\n\nexport const validateFile = (file: File): string | undefined => {\n  if (!IMPORT_SUPPORTED_FORMATS.includes(file.type) || !CSV_EXTENSION_REGEX.test(file.name.toLowerCase())) {\n    return WRONG_FILE_EXTENSION_ERROR\n  }\n\n  if (file.size >= FILE_BYTES_LIMIT) {\n    return FILE_SIZE_TOO_BIG_ERROR\n  }\n\n  return\n}\n\nexport const validateCsvData = (data: CsvDataType): string | undefined => {\n  for (let index = 0; index < data.length; index++) {\n    const entry = data[index]\n    const [address, name, chainId] = entry.data\n    if (entry.data.length !== 3) {\n      return `Invalid amount of columns on row ${index + 1}`\n    }\n    if (typeof address !== 'string' || typeof name !== 'string' || typeof chainId !== 'string') {\n      return `Invalid amount of columns on row ${index + 1}`\n    }\n    if (!address.trim() || !name.trim() || !chainId.trim()) {\n      return `Invalid amount of columns on row ${index + 1}`\n    }\n    // Verify address properties\n    const lowerCaseAddress = address.toLowerCase()\n    if (!isValidAddress(lowerCaseAddress)) {\n      return `Invalid address on row ${index + 1}`\n    }\n    const chainIdNum = parseInt(chainId.trim(), 10)\n    if (isNaN(chainIdNum) || ETHEREUM_NETWORK[chainIdNum] == null) {\n      return `Invalid chain id on row ${index + 1}`\n    }\n  }\n  return\n}\n","import React, { ReactElement, useState } from 'react'\n\nimport styled from 'styled-components'\nimport { Text } from '@gnosis.pm/safe-react-components'\nimport { Modal } from 'src/components/Modal'\nimport { CSVReader } from 'react-papaparse'\nimport { ParseResult } from 'papaparse'\nimport { AddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport HelpInfo from 'src/routes/safe/components/AddressBook/HelpInfo'\nimport { validateCsvData, validateFile } from 'src/routes/safe/components/AddressBook/utils'\n\nconst ImportContainer = styled.div`\n  flex-direction: column;\n  justify-content: center;\n  margin: 24px;\n  align-items: center;\n  min-height: 100px;\n  display: flex;\n`\n\nconst InfoContainer = styled.div`\n  background-color: ${({ theme }) => theme.colors.background};\n  flex-direction: column;\n  justify-content: center;\n  padding: 24px;\n  text-align: center;\n  margin-top: 16px;\n`\n\ntype ImportEntriesModalProps = {\n  importEntryModalHandler: (addressList: AddressBookEntry[]) => void\n  isOpen: boolean\n  onClose: () => void\n}\n\nconst ImportEntriesModal = ({ importEntryModalHandler, isOpen, onClose }: ImportEntriesModalProps): ReactElement => {\n  const [csvLoaded, setCsvLoaded] = useState(false)\n  const [importError, setImportError] = useState('')\n  const [entryList, setEntryList] = useState<AddressBookEntry[]>([])\n\n  const handleImportEntrySubmit = () => {\n    setCsvLoaded(false)\n    importEntryModalHandler(entryList)\n  }\n\n  const handleOnDrop = (parseResults: ParseResult<string>[], file: File) => {\n    // Remove the header row\n    const slicedData = parseResults.slice(1)\n\n    const fileError = validateFile(file)\n    if (fileError) {\n      setImportError(fileError)\n      return\n    }\n\n    const dataError = validateCsvData(slicedData)\n    if (dataError) {\n      setImportError(dataError)\n      return\n    }\n\n    const formatedList = slicedData.map(({ data }) => {\n      return {\n        address: checksumAddress(data[0].trim()),\n        name: data[1].trim(),\n        chainId: parseInt(data[2].trim(), 10),\n      }\n    })\n    setEntryList(formatedList)\n    setImportError('')\n    setCsvLoaded(true)\n  }\n\n  const handleOnError = (error: Error): void => {\n    setImportError(error.message)\n  }\n\n  const handleOnRemoveFile = () => {\n    setCsvLoaded(false)\n    setImportError('')\n  }\n\n  const handleClose = () => {\n    setCsvLoaded(false)\n    setEntryList([])\n    setImportError('')\n    onClose()\n  }\n\n  return (\n    <Modal description=\"Import address book\" handleClose={handleClose} open={isOpen} title=\"Import address book\">\n      <Modal.Header onClose={handleClose}>\n        <Modal.Header.Title>Import address book</Modal.Header.Title>\n      </Modal.Header>\n      <Modal.Body withoutPadding>\n        <ImportContainer>\n          <CSVReader\n            onDrop={handleOnDrop}\n            onError={handleOnError}\n            addRemoveButton\n            onRemoveFile={handleOnRemoveFile}\n            style={{\n              dropArea: {\n                borderColor: '#B2B5B2',\n                borderRadius: 8,\n              },\n              dropAreaActive: {\n                borderColor: '#008C73',\n              },\n              dropFile: {\n                width: 200,\n                height: 100,\n                background: '#fff',\n                boxShadow: 'rgb(40 54 61 / 18%) 1px 2px 10px 0px',\n                borderRadius: 8,\n              },\n              fileSizeInfo: {\n                color: '#001428',\n                lineHeight: 1,\n                position: 'absolute',\n                left: '10px',\n                top: '12px',\n              },\n              fileNameInfo: {\n                color: importError === '' ? '#008C73' : '#DB3A3D',\n                backgroundColor: '#fff',\n                fontSize: 14,\n                lineHeight: 1.4,\n                padding: '0 0.4em',\n                margin: '1.2em 0 0.5em 0',\n                maxHeight: '59px',\n                overflow: 'hidden',\n              },\n              progressBar: {\n                backgroundColor: '#008C73',\n              },\n              removeButton: {\n                color: '#DB3A3D',\n              },\n            }}\n          >\n            <Text size=\"xl\">\n              Drop your CSV file here <br />\n              or click to upload.\n            </Text>\n          </CSVReader>\n        </ImportContainer>\n        <InfoContainer>\n          {importError !== '' && (\n            <Text size=\"xl\" color=\"error\">\n              {importError}\n            </Text>\n          )}\n          {!csvLoaded && importError === '' && (\n            <Text color=\"text\" as=\"p\" size=\"xl\">\n              Only CSV files exported from Gnosis Safe are allowed. <br />\n              <HelpInfo />\n            </Text>\n          )}\n          {csvLoaded && importError === '' && (\n            <>\n              <Text size=\"xl\" as=\"span\">{`You're about to import`}</Text>\n              <Text size=\"xl\" strong as=\"span\">{` ${entryList.length} entries to your address book`}</Text>\n            </>\n          )}\n        </InfoContainer>\n      </Modal.Body>\n      <Modal.Footer withoutBorder>\n        <Modal.Footer.Buttons\n          cancelButtonProps={{ onClick: () => handleClose() }}\n          confirmButtonProps={{\n            color: 'primary',\n            disabled: !csvLoaded || importError !== '',\n            onClick: handleImportEntrySubmit,\n            text: 'Import',\n          }}\n        />\n      </Modal.Footer>\n    </Modal>\n  )\n}\n\nexport default ImportEntriesModal\n","import {\n  Breadcrumb,\n  BreadcrumbElement,\n  Button,\n  ButtonLink,\n  EthHashInfo,\n  FixedIcon,\n  Icon,\n  Menu,\n  Text,\n} from '@gnosis.pm/safe-react-components'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableRow from '@material-ui/core/TableRow'\nimport { makeStyles } from '@material-ui/core/styles'\nimport cn from 'classnames'\nimport styled from 'styled-components'\nimport React, { ReactElement, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { styles } from './style'\n\nimport { getExplorerInfo, getNetworkId } from 'src/config'\nimport ButtonHelper from 'src/components/ButtonHelper'\nimport Table from 'src/components/Table'\nimport { cellWidth } from 'src/components/Table/TableHead'\nimport Block from 'src/components/layout/Block'\nimport Col from 'src/components/layout/Col'\nimport Row from 'src/components/layout/Row'\nimport { AddressBookEntry, makeAddressBookEntry } from 'src/logic/addressBook/model/addressBook'\nimport { addressBookAddOrUpdate, addressBookImport, addressBookRemove } from 'src/logic/addressBook/store/actions'\nimport { addressBookFromQueryParams, currentNetworkAddressBook } from 'src/logic/addressBook/store/selectors'\nimport { isUserAnOwnerOfAnySafe, sameAddress } from 'src/logic/wallets/ethAddresses'\nimport { CreateEditEntryModal } from 'src/routes/safe/components/AddressBook/CreateEditEntryModal'\nimport { ExportEntriesModal } from 'src/routes/safe/components/AddressBook/ExportEntriesModal'\nimport { DeleteEntryModal } from 'src/routes/safe/components/AddressBook/DeleteEntryModal'\nimport {\n  AB_NAME_ID,\n  AB_ADDRESS_ID,\n  ADDRESS_BOOK_ROW_ID,\n  SEND_ENTRY_BUTTON,\n  generateColumns,\n} from 'src/routes/safe/components/AddressBook/columns'\nimport SendModal from 'src/routes/safe/components/Balances/SendModal'\nimport { safesAsList } from 'src/logic/safe/store/selectors'\nimport { checksumAddress } from 'src/utils/checksumAddress'\nimport { grantedSelector } from 'src/routes/safe/container/selector'\nimport { useAnalytics, SAFE_NAVIGATION_EVENT } from 'src/utils/googleAnalytics'\nimport ImportEntriesModal from './ImportEntriesModal'\nimport { isValidAddress } from 'src/utils/isValidAddress'\n\nconst StyledButton = styled(Button)`\n  &&.MuiButton-root {\n    margin: 4px 12px 4px 0px;\n    padding: 0 12px;\n    min-width: auto;\n  }\n\n  svg {\n    margin: 0 6px 0 0;\n  }\n`\n\nconst useStyles = makeStyles(styles)\n\ninterface AddressBookSelectedEntry extends AddressBookEntry {\n  isNew?: boolean\n}\n\nexport type Entry = {\n  entry: AddressBookSelectedEntry\n  index?: number\n  isOwnerAddress?: boolean\n}\n\nconst chainId = getNetworkId()\nconst initialEntryState: Entry = { entry: { address: '', name: '', chainId, isNew: true } }\n\nconst AddressBookTable = (): ReactElement => {\n  const classes = useStyles()\n  const columns = generateColumns()\n  const autoColumns = columns.filter(({ custom }) => !custom)\n  const dispatch = useDispatch()\n  const safesList = useSelector(safesAsList)\n  const entryAddressToEditOrCreateNew = useSelector(addressBookFromQueryParams)\n  const addressBook = useSelector(currentNetworkAddressBook)\n  const granted = useSelector(grantedSelector)\n  const [selectedEntry, setSelectedEntry] = useState<Entry>(initialEntryState)\n  const [editCreateEntryModalOpen, setEditCreateEntryModalOpen] = useState(false)\n  const [importEntryModalOpen, setImportEntryModalOpen] = useState(false)\n  const [deleteEntryModalOpen, setDeleteEntryModalOpen] = useState(false)\n  const [exportEntriesModalOpen, setExportEntriesModalOpen] = useState(false)\n  const [sendFundsModalOpen, setSendFundsModalOpen] = useState(false)\n  const { trackEvent } = useAnalytics()\n\n  useEffect(() => {\n    trackEvent({ category: SAFE_NAVIGATION_EVENT, action: 'AddressBook' })\n  }, [trackEvent])\n\n  useEffect(() => {\n    if (entryAddressToEditOrCreateNew) {\n      setEditCreateEntryModalOpen(true)\n    }\n  }, [entryAddressToEditOrCreateNew])\n\n  useEffect(() => {\n    if (isValidAddress(entryAddressToEditOrCreateNew)) {\n      const address = checksumAddress(entryAddressToEditOrCreateNew as string)\n      const oldEntryIndex = addressBook.findIndex((entry) => sameAddress(entry.address, address))\n\n      if (oldEntryIndex >= 0) {\n        // Edit old entry\n        setSelectedEntry({ entry: addressBook[oldEntryIndex], index: oldEntryIndex })\n      } else {\n        // Create new entry\n        setSelectedEntry({\n          entry: {\n            name: '',\n            address,\n            chainId,\n            isNew: true,\n          },\n        })\n      }\n    }\n  }, [addressBook, entryAddressToEditOrCreateNew])\n\n  const newEntryModalHandler = (entry: AddressBookEntry) => {\n    // close the modal\n    setEditCreateEntryModalOpen(false)\n    // update the store\n    dispatch(addressBookAddOrUpdate(makeAddressBookEntry({ ...entry, address: checksumAddress(entry.address) })))\n  }\n\n  const editEntryModalHandler = (entry: AddressBookEntry) => {\n    // reset the form\n    setSelectedEntry(initialEntryState)\n    // close the modal\n    setEditCreateEntryModalOpen(false)\n    // update the store\n    dispatch(addressBookAddOrUpdate(makeAddressBookEntry({ ...entry, address: checksumAddress(entry.address) })))\n  }\n\n  const deleteEntryModalHandler = () => {\n    // reset the form\n    setSelectedEntry(initialEntryState)\n    // close the modal\n    setDeleteEntryModalOpen(false)\n    // update the store\n    selectedEntry?.entry && dispatch(addressBookRemove(selectedEntry.entry))\n  }\n\n  const importEntryModalHandler = (addressList: AddressBookEntry[]) => {\n    dispatch(addressBookImport(addressList))\n    setImportEntryModalOpen(false)\n  }\n\n  return (\n    <>\n      <Menu>\n        <Col start=\"sm\" sm={6} xs={12}>\n          <Breadcrumb>\n            <BreadcrumbElement iconType=\"addressBook\" text=\"Address Book\" counter={addressBook?.length.toString()} />\n          </Breadcrumb>\n        </Col>\n        <Col end=\"sm\" sm={6} xs={12}>\n          <ButtonLink\n            onClick={() => {\n              setSelectedEntry(initialEntryState)\n              setExportEntriesModalOpen(true)\n            }}\n            color=\"primary\"\n            iconType=\"exportImg\"\n            iconSize=\"sm\"\n            textSize=\"xl\"\n          >\n            Export\n          </ButtonLink>\n          <ButtonLink\n            onClick={() => {\n              setImportEntryModalOpen(true)\n            }}\n            color=\"primary\"\n            iconType=\"importImg\"\n            iconSize=\"sm\"\n            textSize=\"xl\"\n          >\n            Import\n          </ButtonLink>\n          <ButtonLink\n            onClick={() => {\n              setSelectedEntry(initialEntryState)\n              setEditCreateEntryModalOpen(true)\n            }}\n            color=\"primary\"\n            iconType=\"add\"\n            iconSize=\"sm\"\n            textSize=\"xl\"\n          >\n            Create entry\n          </ButtonLink>\n        </Col>\n      </Menu>\n      <Block className={classes.formContainer}>\n        <TableContainer>\n          <Table\n            columns={columns}\n            data={addressBook}\n            defaultFixed\n            defaultOrderBy={AB_NAME_ID}\n            defaultRowsPerPage={25}\n            disableLoadingOnEmptyTable\n            label=\"Owners\"\n            size={addressBook?.length || 0}\n          >\n            {(sortedData) =>\n              sortedData.map((row, index) => {\n                const userOwner = isUserAnOwnerOfAnySafe(safesList, row.address)\n                const hideBorderBottom = index >= 3 && index === sortedData.size - 1 && classes.noBorderBottom\n                return (\n                  <TableRow\n                    className={cn(classes.hide, hideBorderBottom)}\n                    data-testid={ADDRESS_BOOK_ROW_ID}\n                    key={index}\n                    tabIndex={-1}\n                  >\n                    {autoColumns.map((column) => {\n                      return (\n                        <TableCell align={column.align} component=\"td\" key={column.id} style={cellWidth(column.width)}>\n                          {column.id === AB_ADDRESS_ID ? (\n                            <Block justify=\"left\">\n                              <EthHashInfo\n                                hash={row[column.id]}\n                                showCopyBtn\n                                showAvatar\n                                explorerUrl={getExplorerInfo(row[column.id])}\n                              />\n                            </Block>\n                          ) : (\n                            row[column.id]\n                          )}\n                        </TableCell>\n                      )\n                    })}\n                    <TableCell component=\"td\">\n                      <Row align=\"end\" className={classes.actions}>\n                        <ButtonHelper\n                          onClick={() => {\n                            setSelectedEntry({\n                              entry: row,\n                              isOwnerAddress: userOwner,\n                            })\n                            setEditCreateEntryModalOpen(true)\n                          }}\n                        >\n                          <Icon\n                            size=\"sm\"\n                            type=\"edit\"\n                            tooltip=\"Edit entry\"\n                            className={granted ? classes.editEntryButton : classes.editEntryButtonNonOwner}\n                          />\n                        </ButtonHelper>\n                        <ButtonHelper\n                          onClick={() => {\n                            setSelectedEntry({ entry: row })\n                            setDeleteEntryModalOpen(true)\n                          }}\n                        >\n                          <Icon\n                            size=\"sm\"\n                            type=\"delete\"\n                            color=\"error\"\n                            tooltip=\"Delete entry\"\n                            className={granted ? classes.removeEntryButton : classes.removeEntryButtonNonOwner}\n                          />\n                        </ButtonHelper>\n                        {granted ? (\n                          <StyledButton\n                            color=\"primary\"\n                            onClick={() => {\n                              setSelectedEntry({ entry: row })\n                              setSendFundsModalOpen(true)\n                            }}\n                            size=\"md\"\n                            variant=\"contained\"\n                            data-testid={SEND_ENTRY_BUTTON}\n                          >\n                            <FixedIcon type=\"arrowSentWhite\" />\n                            <Text size=\"xl\" color=\"white\">\n                              Send\n                            </Text>\n                          </StyledButton>\n                        ) : null}\n                      </Row>\n                    </TableCell>\n                  </TableRow>\n                )\n              })\n            }\n          </Table>\n        </TableContainer>\n      </Block>\n      <CreateEditEntryModal\n        editEntryModalHandler={editEntryModalHandler}\n        entryToEdit={selectedEntry}\n        isOpen={editCreateEntryModalOpen}\n        newEntryModalHandler={newEntryModalHandler}\n        onClose={() => setEditCreateEntryModalOpen(false)}\n      />\n      <DeleteEntryModal\n        deleteEntryModalHandler={deleteEntryModalHandler}\n        entryToDelete={selectedEntry}\n        isOpen={deleteEntryModalOpen}\n        onClose={() => setDeleteEntryModalOpen(false)}\n      />\n      <ExportEntriesModal isOpen={exportEntriesModalOpen} onClose={() => setExportEntriesModalOpen(false)} />\n      <ImportEntriesModal\n        importEntryModalHandler={importEntryModalHandler}\n        isOpen={importEntryModalOpen}\n        onClose={() => setImportEntryModalOpen(false)}\n      />\n      <SendModal\n        activeScreenType=\"chooseTxType\"\n        isOpen={sendFundsModalOpen}\n        onClose={() => setSendFundsModalOpen(false)}\n        recipientAddress={selectedEntry?.entry?.address}\n        recipientName={selectedEntry?.entry?.name}\n      />\n    </>\n  )\n}\n\nexport default AddressBookTable\n"],"sourceRoot":""}